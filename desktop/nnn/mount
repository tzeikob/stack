#!/usr/bin/env sh

MOUNT_HOME="$HOME/mount"

mount_local_disk () {
  lsblk

  local DEVICE=""
  read -rep "Device (sdXX): " DEVICE
  echo

  if grep -qs "$DEVICE " /proc/mounts; then
    sync &&
    udisksctl unmount -b "/dev/$DEVICE" &&
    udisksctl power-off -b "/dev/$DEVICE" &&
      echo -e "\nDevice $DEVICE unmounted successfully" ||
      echo -e "\nFailed to umount device $DEVICE"
  else
    udisksctl mount -b "/dev/$DEVICE" &&
      echo -e "\nDevice $DEVICE mounted successfully" ||
      echo -e "\nFailed to mount device $DEVICE"

    if [ -d "/run/media/$USER" ] && [ ! -L "$MOUNT_HOME/local" ]; then
      ln -s "/run/media/$USER" "$MOUNT_HOME/local"
    fi
  fi
}

mount_network_disk () {
  local PROTOCOL=""
  read -rep "Protocol: [smb] " PROTOCOL
  PROTOCOL="${PROTOCOL:-"smb"}"
  PROTOCOL="${PROTOCOL,,}"

  local HOST=""
  read -rep "Host name: " HOST

  local SHARED_FOLDER=""
  read -rep "Shared folder: " SHARED_FOLDER
  SHARED_FOLDER="${SHARED_FOLDER,,}"
  echo

  local DEVICE="$PROTOCOL://$HOST/$SHARED_FOLDER"

  if gio mount -l | grep "$DEVICE"; then
    sync &&
    gio mount -u "$DEVICE" &&
      echo -e "\nDevice $DEVICE unmounted successfully" ||
      echo -e "\nFailed to umount device $DEVICE"
  else
    gio mount "$DEVICE" &&
      echo -e "\nDevice $DEVICE mounted successfully" ||
      echo -e "\nFailed to mount device from $DEVICE"

    if [ -d "/run/user/${UID}/gvfs" ] && [ ! -L "$MOUNT_HOME/remote" ]; then
      ln -s "/run/user/${UID}/gvfs" "$MOUNT_HOME/remote"
    fi
  fi
}

mount_google_drive () {
  local REMOTE_NAME=""
  read -rep "Remote name: [drive] " REMOTE_NAME
  REMOTE_NAME="${REMOTE_NAME:-"drive"}"
  REMOTE_NAME="${REMOTE_NAME,,}"

  local CLIENT_ID=""
  read -rep "Client ID: " CLIENT_ID

  local CLIENT_SECRET=""
  read -rep "Client secret: " CLIENT_SECRET

  local SHARED_FOLDER=""
  read -rep "Shared folder: [/] " SHARED_FOLDER
  SHARED_FOLDER="${SHARED_FOLDER:-"/"}"
  echo

  local MOUNT_FOLDER="$MOUNT_HOME/cloud/$REMOTE_NAME"

  if [ ! -d "$MOUNT_FOLDER" ]; then
    rclone config create "$REMOTE_NAME" "drive" \
      client_id="$CLIENT_ID" client_secret="$CLIENT_SECRET" scope=drive --obscure &&
      mkdir -p "$MOUNT_FOLDER" &&
      rclone mount "$REMOTE_NAME":"$SHARED_FOLDER" "$MOUNT_FOLDER" \
        --umask=002 --gid=$(id -g) --uid=$(id -u) --timeout=1h \
        --poll-interval=15s --dir-cache-time=1000h --vfs-cache-mode=full \
        --vfs-cache-max-size=150G --vfs-cache-max-age=12h --daemon &&
        echo -e "\nFile service $REMOTE_NAME mounted successfully"

    if [[ ! $? -eq 0 ]]; then
      echo -e "\nFailed to mount file service $REMOTE_NAME"

      rclone config delete "$REMOTE_NAME"
      rm -rf "$MOUNT_FOLDER"
    fi
  else
    echo -e "\nRemote name $REMOTE_NAME seems to be taken"
  fi
}

while true; do
  clear

  echo "Mount external storage file systems"
  read -rep "(l)ocal (r)emote (q)uit: " REPLY
  REPLY="${REPLY,,}"

  case "$REPLY" in
    l|local)
      mount_local_disk;;

    r|remote)
      read -rep "Provider: [Nas/drive] " PROVIDER
      PROVIDER="${PROVIDER:-"nas"}"
      PROVIDER="${PROVIDER,,}"

      case "$PROVIDER" in
        nas) mount_network_disk;;
        drive) mount_google_drive;;

        *)
          echo -e "\nProvider $PROVIDER is not supported";;
      esac;;

    q|quit)
      clear && exit;;

    *)
      echo -e "\nUnknown or invalid user input";;
  esac

  read -rep "Do you want to quit? [Y/n] " REPLY
  REPLY="${REPLY:-"yes"}"
  REPLY="${REPLY,,}"

  if [[ "$REPLY" =~ ^(y|yes)$ ]]; then
    clear
    exit
  fi
done
