#!/usr/bin/env sh

MOUNT_HOME="$HOME/mount"

mount_local_disk () {
  lsblk

  local DEVICE=""
  read -rep "Device (sdXX): " DEVICE
  echo

  if grep -qs "$DEVICE " /proc/mounts; then
    sync &&
    udisksctl unmount -b "/dev/$DEVICE" &&
    udisksctl power-off -b "/dev/$DEVICE" &&
      echo -e "\nDevice $DEVICE unmounted successfully" ||
      echo -e "\nFailed to umount device $DEVICE"
  else
    udisksctl mount -b "/dev/$DEVICE" &&
      echo -e "\nDevice $DEVICE mounted successfully" ||
      echo -e "\nFailed to mount device $DEVICE"

    if [ -d "/run/media/$USER" ] && [ ! -L "$MOUNT_HOME/local" ]; then
      ln -s "/run/media/$USER" "$MOUNT_HOME/local"
    fi
  fi
}

mount_network_disk () {
  local PROTOCOL=""
  read -rep "Protocol: [smb] " PROTOCOL
  PROTOCOL="${PROTOCOL:-"smb"}"
  PROTOCOL="${PROTOCOL,,}"

  local HOST=""
  read -rep "Host name: " HOST

  local SHARED_FOLDER=""
  read -rep "Shared folder: " SHARED_FOLDER
  SHARED_FOLDER="${SHARED_FOLDER,,}"
  echo

  local DEVICE="$PROTOCOL://$HOST/$SHARED_FOLDER"

  if gio mount -l | grep "$DEVICE"; then
    sync &&
    gio mount -u "$DEVICE" &&
      echo -e "\nDevice $DEVICE unmounted successfully" ||
      echo -e "\nFailed to umount device $DEVICE"
  else
    gio mount "$DEVICE" &&
      echo -e "\nDevice $DEVICE mounted successfully" ||
      echo -e "\nFailed to mount device from $DEVICE"

    if [ -d "/run/user/${UID}/gvfs" ] && [ ! -L "$MOUNT_HOME/remote" ]; then
      ln -s "/run/user/${UID}/gvfs" "$MOUNT_HOME/remote"
    fi
  fi
}

mount_google_drive () {
  local REMOTE_NAME=""
  read -rep "Remote name: [drive] " REMOTE_NAME
  REMOTE_NAME="${REMOTE_NAME:-"drive"}"
  REMOTE_NAME="${REMOTE_NAME,,}"

  if rclone listremotes | grep -w "$REMOTE_NAME:" > /dev/null; then
    local REPLY=""
    read -rep "Found remote $REMOTE_NAME, do you want to unmount it? [y/N] " REPLY
    REPLY="${REPLY:-"no"}"
    REPLY="${REPLY,,}"

    if [[ "$REPLY" =~ ^(y|yes)$ ]]; then
      echo "Unmounting remote $REMOTE_NAME..."

      local MOUNT_POINTS=($(grep -E "$REMOTE_NAME:.* fuse.rclone" /proc/mounts | awk '{print $2}'))
      for MOUNT_POINT in ${MOUNT_POINTS[@]}; do
        fusermount -uz "$MOUNT_POINT"

        if [[ "$?" -eq 0 ]]; then
          find "$MOUNT_POINT" -maxdepth 0 -empty -exec rm -rf {} \;
          echo "Local folder $MOUNT_POINT has been unmounted"
        else
          echo -e "\nFailed to unmount $MOUNT_POINT, make sure folder isn't busy"
          return 1
        fi
      done

      rclone config delete "$REMOTE_NAME" &&
        echo -e "\nRemote $REMOTE_NAME deleted successfully" ||
        echo -e "\nFailed to delete remote $REMOTE_NAME"
    fi
  else
    local CLIENT_ID=""
    read -rep "Client ID: " CLIENT_ID

    local CLIENT_SECRET=""
    read -rep "Client secret: " CLIENT_SECRET

    local ROOT_FOLDER=""
    read -rep "Root folder: " ROOT_FOLDER
    echo

    local MOUNT_FOLDER="$MOUNT_HOME/drive/$REMOTE_NAME"

    rclone config create "$REMOTE_NAME" "drive" \
      client_id="$CLIENT_ID" client_secret="$CLIENT_SECRET" \
      root_folder_id="$ROOT_FOLDER" scope=drive --obscure &&
      mkdir -p "$MOUNT_FOLDER" &&
      rclone mount "$REMOTE_NAME:/" "$MOUNT_FOLDER" \
        --umask=002 --gid=$(id -g) --uid=$(id -u) --timeout=1h \
        --poll-interval=15s --dir-cache-time=1000h --vfs-cache-mode=full \
        --vfs-cache-max-size=150G --vfs-cache-max-age=12h --daemon &&
        echo -e "\nRemote $REMOTE_NAME mounted successfully"

    if [[ ! "$?" -eq 0 ]]; then
      echo -e "\nFailed to mount remote $REMOTE_NAME"

      rclone config delete "$REMOTE_NAME"
      find "$MOUNT_FOLDER" -maxdepth 0 -empty -exec rm -rf {} \;
    fi
  fi
}

clear

echo "Mount external storage file systems"
read -rep "(l)ocal (r)emote (q)uit: " REPLY
REPLY="${REPLY,,}"

case "$REPLY" in
  l|local)
    mount_local_disk;;

  r|remote)
    read -rep "Provider: [Nas/drive] " PROVIDER
    PROVIDER="${PROVIDER:-"nas"}"
    PROVIDER="${PROVIDER,,}"

    case "$PROVIDER" in
      nas) mount_network_disk;;
      drive) mount_google_drive;;

      *)
        echo -e "\nProvider $PROVIDER is not supported";;
    esac;;

  q|quit)
    clear && exit;;

  *)
    echo -e "\nUnknown or invalid user input";;
esac

read -p "Press any key to exit..."
