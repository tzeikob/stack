#!/usr/bin/env sh

MOUNT_HOME="$HOME/mount"

mount_local_disk () {
  lsblk

  local DEVICE=""
  read -rep "Device: " DEVICE

  if grep -qs "$DEVICE " /proc/mounts; then
    local REPLY=""
    read -rep "Found device $DEVICE, do you want to unmount it? [y/N] " REPLY
    REPLY="${REPLY:-"no"}"
    REPLY="${REPLY,,}"

    if [[ "$REPLY" =~ ^(y|yes)$ ]]; then
      sync &&
      udisksctl unmount -b "/dev/$DEVICE"

      if [[ "$?" -eq 0 ]]; then
        echo "Device $DEVICE unmounted successfully"
        echo "Powering device off..."

        udisksctl power-off -b "/dev/$DEVICE"
      else
        echo "Failed to umount device $DEVICE"
      fi
    fi
  else
    udisksctl mount -b "/dev/$DEVICE" &&
      echo "Device $DEVICE mounted successfully" ||
      echo "Failed to mount device $DEVICE"

    if [ -d "/run/media/$USER" ] && [ ! -L "$MOUNT_HOME/local" ]; then
      ln -s "/run/media/$USER" "$MOUNT_HOME/local"
    fi
  fi
}

mount_network_disk () {
  local PROTOCOL=""
  read -rep "Protocol: [smb] " PROTOCOL
  PROTOCOL="${PROTOCOL:-"smb"}"
  PROTOCOL="${PROTOCOL,,}"

  local HOST=""
  read -rep "Host name: " HOST

  local SHARED_FOLDER=""
  read -rep "Shared folder: " SHARED_FOLDER
  SHARED_FOLDER="${SHARED_FOLDER,,}"

  local DEVICE="$PROTOCOL://$HOST/$SHARED_FOLDER"

  if gio mount -l | grep "$DEVICE"; then
    local REPLY=""
    read -rep "Found remote $DEVICE, do you want to unmount it? [y/N] " REPLY
    REPLY="${REPLY:-"no"}"
    REPLY="${REPLY,,}"

    if [[ "$REPLY" =~ ^(y|yes)$ ]]; then
      sync &&
      gio mount -u "$DEVICE" &&
        echo "Device $DEVICE unmounted successfully" ||
        echo "Failed to umount device $DEVICE"
    fi
  else
    gio mount "$DEVICE" &&
      echo "Device $DEVICE mounted successfully" ||
      echo "Failed to mount device from $DEVICE"

    if [ -d "/run/user/${UID}/gvfs" ] && [ ! -L "$MOUNT_HOME/nas" ]; then
      ln -s "/run/user/${UID}/gvfs" "$MOUNT_HOME/nas"
    fi
  fi
}

remote_exists () {
  local REMOTE_NAME=$1

  if rclone listremotes | grep -w "$REMOTE_NAME:" > /dev/null; then
    return 0
  fi

  return 1
}

unmount_remote () {
  local REMOTE_NAME=$1

  echo "Unmounting remote $REMOTE_NAME..."

  local MOUNT_POINTS=($(grep -E "$REMOTE_NAME:.* fuse.rclone" /proc/mounts | awk '{print $2}'))
  for MOUNT_POINT in ${MOUNT_POINTS[@]}; do
    fusermount -uz "$MOUNT_POINT"

    if [[ "$?" -eq 0 ]]; then
      find "$MOUNT_POINT" -maxdepth 0 -empty -exec rm -rf {} \;
      echo "Local folder $MOUNT_POINT has been unmounted"
    else
      echo "Failed to unmount $MOUNT_POINT, make sure folder isn't busy"
    fi
  done

  rclone config delete "$REMOTE_NAME" &&
    echo "Remote $REMOTE_NAME deleted successfully" ||
    echo "Failed to delete remote $REMOTE_NAME"
}

mount_remote () {
  local STORAGE=$1

  local REMOTE_NAME=""
  read -rep "Remote name: [drive] " REMOTE_NAME
  REMOTE_NAME="${REMOTE_NAME:-"drive"}"
  REMOTE_NAME="${REMOTE_NAME,,}"

  if remote_exists "$REMOTE_NAME"; then
    local REPLY=""
    read -rep "Found remote $REMOTE_NAME, do you want to unmount it? [y/N] " REPLY
    REPLY="${REPLY:-"no"}"
    REPLY="${REPLY,,}"

    [[ "$REPLY" =~ ^(y|yes)$ ]] && unmount_remote "$REMOTE_NAME"
  else
    local CLIENT_ID=""
    read -rep "Client ID: " CLIENT_ID

    local CLIENT_SECRET=""
    read -rep "Client secret: " CLIENT_SECRET

    if [ "$STORAGE" = "drive" ]; then
      local ROOT_FOLDER=""
      read -rep "Root folder: " ROOT_FOLDER
    fi

    local MOUNT_FOLDER="$MOUNT_HOME/$STORAGE/$REMOTE_NAME"

    rclone config create "$REMOTE_NAME" "$STORAGE" client_id="$CLIENT_ID" client_secret="$CLIENT_SECRET" \
      $([ "$STORAGE" = "drive" ] && echo "root_folder_id="$ROOT_FOLDER" scope=drive") &&
    mkdir -p "$MOUNT_FOLDER" &&
    rclone mount "$REMOTE_NAME:" "$MOUNT_FOLDER" \
      --umask=002 --gid=$(id -g) --uid=$(id -u) --timeout=1h \
      --poll-interval=15s --dir-cache-time=1000h --vfs-cache-mode=full \
      --vfs-cache-max-size=150G --vfs-cache-max-age=12h --daemon &&
      echo "Remote $REMOTE_NAME mounted successfully"

    if [[ ! "$?" -eq 0 ]]; then
      echo "Failed to mount remote $REMOTE_NAME"

      rclone config delete "$REMOTE_NAME"
      find "$MOUNT_FOLDER" -maxdepth 0 -empty -exec rm -rf {} \;
    fi
  fi
}

clear

echo "Mount external storage file systems"
read -rep "(l)ocal (r)emote (q)uit: " REPLY
REPLY="${REPLY,,}"

case "$REPLY" in
  l|local)
    mount_local_disk;;

  r|remote)
    read -rep "Provider: [Nas/drive/dropbox] " PROVIDER
    PROVIDER="${PROVIDER:-"nas"}"
    PROVIDER="${PROVIDER,,}"

    case "$PROVIDER" in
      nas) mount_network_disk;;
      drive) mount_remote "drive";;
      dropbox) mount_remote "dropbox";;

      *)
        echo "Provider $PROVIDER is not supported";;
    esac;;

  q|quit)
    clear && exit;;

  *)
    echo "Unknown or invalid user input";;
esac

read -p "Press any key to exit..."
