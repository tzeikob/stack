#!/bin/bash

set -o pipefail
source /opt/stack/utils

# Returns all the available controllers.
# Arguments:
#  None
# Outputs:
#  A json array of controller objects.
find_controllers () {
  bluetoothctl list | jc --bluetoothctl || return 1
}

# Returns all the available devices filtered by the
# optionally given status.
# Arguments:
#  status: paired, connected or trusted
# Outputs:
#  A json array of device objects.
find_devices () {
  local status="${1}"

  local devices=''
  if [[ -n "${status}" ]]; then
    devices="$(bluetoothctl devices "${status}")" || return 1
  else
    devices="$(bluetoothctl devices)" || return 1
  fi

  echo "${devices}" | jc --bluetoothctl || return 1
}

# Shows a prompt status and asks user to enter the
# next command, which is kept in the global var REPLY.
# Globals:
#  REPLY
# Arguments:
#  None
# Outputs:
#  A minimal prompt status line.
prompt () {
  local status=''
  status="$(find_controllers | jq -cer '.[]|select(.is_default == true)|.name')"

  if [[ $? -ne 0 ]]; then
    status="none"
  fi

  read -rep "[bluetooth:${status}] " REPLY
}

# Shows the current status of bluetooth service
# and connected devices.
# Arguments:
#  None
# Outputs:
#  A long list of bluetooth data.
show_status () {
  systemctl status --lines 0 --no-pager bluetooth.service |
  awk '{
    if ($0 ~ / *Active/) {
      l = "Service"
      v = $2" "$3
    } else l = ""

    if (l) printf "%-12s %s\n",l":",v
  }' || return 1
}

# Shows the logs of the bluetooth service.
# Arguments:
#  None
# Outputs:
#  A long list of log messages.
show_logs () {
  systemctl status --no-pager bluetooth.service | tail -n +13 || return 1
}

# Shows the list of available controllers.
# Arguments:
#  None
# Outputs:
#  A list of bluetooth controllers.
list_controllers () {
  local controllers=''
  controllers="$(find_controllers)"

  if [[ $? -ne 0 ]]; then
    echo "Unable to read controllers"
    return 2
  fi

  local len=0
  len="$(count "${controllers}")" || return 1

  if [[ ${len} -eq 0 ]]; then
    echo "No controllers have found"
    return 0
  fi

  local query=''
  query+='Name:     \(.name)\n'
  query+='Address:  \(.address)'
  query+='\(if .is_default then "\nDefault:  \(.is_default)" else "" end)'
  query="[.[]|\"${query}\"]|join(\"\n\n\")"

  echo "${controllers}" | jq -cer "${query}" || return 1
}

# Shows the list of available devices filtered by
# the optionally given status.
# Arguments:
#  status: paired, connected or trusted
# Outputs:
#  A list of bluetooth devices.
list_devices () {
  local status="${1}"

  if [[ -n "${status}" ]] && [[ ! "${status}" =~ ^(paired|connected|trusted|bonded)$ ]]; then
    echo "Invalid status value"
    return 2
  fi

  local devices=''
  devices="$(find_devices "${status^}")"

  if [[ $? -ne 0 ]]; then
    echo "Unable to read devices"
    return 2
  fi

  local len=0
  len="$(count "${devices}")" || return 1

  if [[ ${len} -eq 0 ]]; then
    echo "No available devices have found"
    return 0
  fi

  local query=''
  query+='Name:     \(.name)\n'
  query+='Address:  \(.address)'
  query="[.[]|\"${query}\"]|join(\"\n\n\")"

  echo "${devices}" | jq -cer "${query}" || return 1
}

# Restarts the bluetooth service.
# Arguments:
#  None
restart_bluetooth () {
  rfkill block bluetooth &&
  rfkill unblock bluetooth &&
  sudo modprobe -r btusb &&
  sudo modprobe -r btintel &&
  sudo modprobe btintel &&
  sudo modprobe btusb &&
  sudo systemctl restart bluetooth.service

  if [[ $? -ne 0 ]]; then
    echo "Failed to restart the bluetooth service"
    return 2
  fi

  echo "Bluetooth service has been restarted"
}

# Shows the help message.
# Arguments:
#  None
# Outputs:
#  A long help message.
show_help () {
  echo "Usage: COMMAND [OBJECT] [ARGUMENTS]..."

  echo -e "\nCOMMANDS"
  printf " %-32s %s\n" \
    "help" "Show this help message." \
    "" "" \
    "show status" "Show a report of the bluetooth service and devices." \
    "show logs" "Show the last logs of the bluetooth service." \
    "" "" \
    "list controllers" "List the available controllers." \
    "list devices [<status>]" "List the devices where status could be" \
    "" "any of paired, connected, trusted or bonded." \
    "" "" \
    "restart" "Restart the bluetooth service."
}

loop () {
  clear

  while true; do
    prompt && history -s "${REPLY}"

    set -f
    set_separator "line"
    local cmd=($(xargs -n1 <<< "${REPLY}"))
    restore_separator && set +f

    if [[ "${cmd[0]}" == "help" ]]; then
      show_help
      continue
    elif [[ "${cmd[0]}" == "clear" ]]; then
      clear
      continue
    elif [[ "${cmd[0]}" == "quit" ]]; then
      break
    elif [[ -z "${cmd[0]}" ]]; then
      continue
    fi

    case "${cmd[0]}" in
      "show")
        case "${cmd[1]}" in
          "status") show_status;;
          "logs") show_logs;;
          *) echo "Invalid or unknown command";;
        esac;;
      "list")
        case "${cmd[1]}" in
          "controllers") list_controllers;;
          "devices") list_devices "${cmd[2]}";;
          *) echo "Invalid or unknown command";;
        esac;;
      "restart") restart_bluetooth;;
      *) echo "Invalid or unknown command";; 
    esac
    
    if [[ $? -eq 1 ]]; then
      echo "An unknown error has occurred"
    fi
  done

  clear
}

loop