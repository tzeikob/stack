#!/usr/bin/env bash

source /opt/stack/utils

require "xorg-xrandr"

prompt () {
  local SCREEN=$(xrandr --current | sed '/^Screen 0:/,/^Screen/!d;//d' || echo "err:$?")

  if [[ "$SCREEN" =~ ^err: ]]; then
    read -rep "[screens:${RE}none$RS] " REPLY
    return 1
  fi

  local PRIMARY=$(echo "$SCREEN" |
    awk 'match($0, /(.*) connected primary ([0-9]+x[0-9]+)\+.*/, a) {print a[1]" "a[2]}')
  
  local RATE=$(echo "$SCREEN" |
    sed -n '/.* connected primary .*/{:a;N;/\*/!ba;/\*/p}' |
    awk 'match($0, /.* ([0-9]{2}).[0-9]{2}\*.*/, a) {print a[1]}')

  local STATUS=$YE${PRIMARY}@${RATE}Hz$RS

  read -rep "[screens:$STATUS] " REPLY
}

show_status () {
  xrandr --current | awk '{ \
    if ($0 ~ /^Screen/) {printf "%s-%s %s%s%s\n",$1,$2,$8,$9,substr($10,1,length($10)-1)}
    else if ($0 !~ /^\s+/) {print " "$0}
  }'
}

show_output () {
  local OUTPUT=$1

  if [ -z "$OUTPUT" ]; then
    echo "Missing the output argument"
    return 1
  fi

  local SCREEN=$(xrandr --current | sed '/^Screen 0:/,/^Screen/!d;//d' || echo "err:$?")

  if [[ "$SCREEN" =~ ^err: ]]; then
    echo "Unable to find the default screen"
    return 1
  fi

  local OUTPUTS=($(echo "$SCREEN" | awk '/^[A-Z]/{print $1}'))

  if ! contains "$OUTPUT" "${OUTPUTS[@]}"; then
    echo "Unable to find output: '$OUTPUT'"
    return 1
  fi

  echo "$SCREEN" | awk /^$OUTPUT/
  echo "$SCREEN" |
    awk /^$OUTPUT/,!// | tail -n +2 |
    awk '{if ($0 ~ /^\s+[0-9]+x[0-9]+/) {print} else {exit}}' 
}

help () {
  local FRM=" %-28s\t%s\n"

  echo "Usage: COMMAND [OBJECT] [ARGUMENTS]..."

  echo -e "\nCOMMANDS"
  printf "$FRM" \
    "help" "Show this help message." \
    "show status" "Show a report of all screen layouts." \
    "show output <output>" "Show the data of the given output."

  echo -e "\nOBJECTS"
  printf "$FRM" \
    "status" "The status of all screen layouts." \
    "output" "An output display device."
}

loop () {
  clear

  while true; do
    prompt && history -s "$REPLY"

    set -f
    local OLD_IFS=$IFS && IFS=$'\n'
    local CMD=($(xargs -n1 <<< "$REPLY"))
    IFS=$OLD_IFS && set +f

    if [ "${CMD[0]}" = "help" ]; then
      help
      continue
    elif [ "${CMD[0]}" = "clear" ]; then
      clear
      continue
    elif [ "${CMD[0]}" = "quit" ]; then
      break
    elif [ -z "${CMD[0]}" ]; then
      continue
    fi

    case "${CMD[0]}" in
      "show")
        case "${CMD[1]}" in
          "status") show_status;;
          "output") show_output "${CMD[2]}";;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      *) echo "Unknown or invalid command: '$REPLY'";; 
    esac
  done

  clear
}

loop
