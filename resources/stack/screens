#!/usr/bin/env bash

set -o pipefail

source /opt/stack/utils

require "xorg-xrandr"

get_screen () {
  local INDEX=${1:-"0"}

  local SCREEN=$(xrandr --current | sed "/^Screen ${INDEX}:/,/^Screen/!d;//d" || echo "err:$?")

  if [[ "$SCREEN" =~ ^err: ]]; then
    return 1
  fi

  echo "$SCREEN"
}

get_primary () {
  local SCREEN=$(get_screen 0 || echo "err:$?")
  
  if [[ "$SCREEN" =~ ^err: ]]; then
    return 1
  fi

  local NAME=$(echo "$SCREEN" |
    awk 'match($0, /(.*) connected primary .*/, a) {print a[1]}')
  
  local RESOLUTION=$(echo "$SCREEN" |
    awk 'match($0, /.* connected primary ([0-9]+x[0-9]+)\+.*/, a) {print a[1]}')

  local RATE=$(echo "$SCREEN" |
    sed -n '/.* connected primary .*/{:a;N;/^[A-Z]/!ba;/\*/p}' |
    awk 'match($0, /.* ([0-9]{2}).[0-9]{2}\*.*/, a) {print a[1]"Hz"}')
  
  local PRIMARY="${NAME}|${RESOLUTION}|${RATE}"

  echo "$PRIMARY"
}

get_outputs () {
  local OUTPUTS=$(get_screen 0 | awk '/^[A-Z]/{print $1}' || echo "err:$?")

  if [[ "$OUTPUTS" =~ ^err: ]]; then
    return 1
  fi

  echo "$OUTPUTS"
}

prompt () {
  local PRIMARY=$(get_primary || echo "err:$?")

  if [[ "$PRIMARY" =~ ^err: ]]; then
    read -rep "[screens:${RE}none$RS] " REPLY
    return 1
  fi

  local NAME=$(echo "$PRIMARY" | cut -d '|' -f 1)
  local RESOLUTION=$(echo "$PRIMARY" | cut -d '|' -f 2)
  local RATE=$(echo "$PRIMARY" | cut -d '|' -f 3)

  local STATUS="$YE${NAME} ${RESOLUTION}$RS$GR@${RATE}$RS"

  read -rep "[screens:$STATUS] " REPLY
}

show_status () {
  xrandr --current | awk '{ \
    if ($0 ~ /^Screen/) {printf "%s-%s %s%s%s\n",$1,$2,$8,$9,substr($10,1,length($10)-1)}
    else if ($0 !~ /^\s+/) {print " "$0}
  }'
}

show_output () {
  local OUTPUT=$1

  if [ -z "$OUTPUT" ]; then
    echo "Missing the output argument"
    return 1
  fi

  local OUTPUTS=$(get_outputs || echo "err:$?")

  if [[ "$OUTPUTS" =~ ^err: ]]; then
    echo "Unable to retrieve outputs"
    return 1
  fi

  OUTPUTS=($OUTPUTS)

  if ! contains "$OUTPUT" "${OUTPUTS[@]}"; then
    echo "Unable to find output: '$OUTPUT'"
    return 1
  fi

  local SCREEN=$(get_screen 0 || echo "err:$?")

  if [[ "$SCREEN" =~ ^err: ]]; then
    echo "Unable to find the default screen"
    return 1
  fi

  local HEAD=$(echo "$SCREEN" | awk /^$OUTPUT/)

  local NAME="$(echo "$HEAD" | awk 'match($0, /(.*) ((dis)?connected) .*/, a) {print a[1]}')"
  local STATUS="$(echo "$HEAD" | awk 'match($0, /.* ((dis)?connected) .*/, a) {print a[1]}')"
  
  local PRIMARY="$(echo "$HEAD" | awk 'match($0, /.* connected (primary) .*/, a) {print a[1]}')"
  [ "$PRIMARY" = "primary" ] && PRIMARY="yes" || PRIMARY="no"
  
  local RESOLUTION="$(echo "$HEAD" | awk 'match($0, /.* ([0-9]+x[0-9]+)\+.*/, a) {print a[1]}')"
  [ -z "$RESOLUTION" ] && RESOLUTION="N/A"

  local POSITION="$(echo "$HEAD" | awk 'match($0, /.* [0-9]+x[0-9]+\+([0-9]+\+[0-9]+) .*/, a) {print a[1]}')"
  [ -n "$POSITION" ] && POSITION="[$(echo "$POSITION" | tr '+' ",")]" || POSITION="N/A"

  local ORIENTATION="$(echo "$HEAD" | awk 'match($0, /.* (\(.*\)).*/, a) {print a[1]}')"
  [ -n "$ORIENTATION" ] && ORIENTATION="$(echo "$ORIENTATION" | tr -d "(,)")"

  local DIMS="$(echo "$HEAD" | awk 'match($0, /.* ([0-9]+mm x [0-9]+mm).*/, a) {print a[1]}')"
  [ -z "$DIMS" ] && DIMS="N/A"

  local RATE="$(echo "$SCREEN" | sed -n "/$OUTPUT .*/{:a;N;/^[A-Z]/!ba;/\*/p}" |
    awk 'match($0, /.* ([0-9]{2}).[0-9]{2}\*.*/, a) {print a[1]"Hz"}')"
  [ -z "$RATE" ] && RATE="N/A"

  local FRM=""
  FRM+="Name:        %s\n"
  FRM+="Primary:     %s\n"
  FRM+="Status:      %s\n"
  FRM+="Resolution:  %s\n"
  FRM+="Frequency:   %s\n"
  FRM+="Position:    %s\n"
  FRM+="Dimensions:  %s\n"
  FRM+="Orientation: %s\n"

  printf "$FRM" \
    "$NAME" "$PRIMARY" "$STATUS" "$RESOLUTION" "$RATE" "$POSITION" "$DIMS" "$ORIENTATION"
  
  echo "Resolutions:"
  echo "$SCREEN" | awk /^$OUTPUT/,!// | tail -n +2 |
    awk '{if ($0 ~ /^\s+[0-9]+x[0-9]+/) {print "          "$0} else {exit}}'
}

help () {
  local FRM=" %-28s\t%s\n"

  echo "Usage: COMMAND [OBJECT] [ARGUMENTS]..."

  echo -e "\nCOMMANDS"
  printf "$FRM" \
    "help" "Show this help message." \
    "show status" "Show a report of all screen layouts." \
    "show output <output>" "Show the data of the given output."

  echo -e "\nOBJECTS"
  printf "$FRM" \
    "status" "The status of all screen layouts." \
    "output" "An output display device."
}

loop () {
  clear

  while true; do
    prompt && history -s "$REPLY"

    set -f
    local OLD_IFS=$IFS && IFS=$'\n'
    local CMD=($(xargs -n1 <<< "$REPLY"))
    IFS=$OLD_IFS && set +f

    if [ "${CMD[0]}" = "help" ]; then
      help
      continue
    elif [ "${CMD[0]}" = "clear" ]; then
      clear
      continue
    elif [ "${CMD[0]}" = "quit" ]; then
      break
    elif [ -z "${CMD[0]}" ]; then
      continue
    fi

    case "${CMD[0]}" in
      "show")
        case "${CMD[1]}" in
          "status") show_status;;
          "output") show_output "${CMD[2]}";;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      *) echo "Unknown or invalid command: '$REPLY'";; 
    esac
  done

  clear
}

loop
