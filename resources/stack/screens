#!/usr/bin/env bash

set -o pipefail

source /opt/stack/utils

require "xorg-xrandr"

get_screen () {
  local INDEX=${1:-"0"}

  local SCREEN=$(xrandr --current | sed "/^Screen ${INDEX}:/,/^Screen/!d;//d" || echo "err:$?")

  if [[ "$SCREEN" =~ ^err: ]]; then
    return 1
  fi

  echo "$SCREEN"
}

get_primary () {
  local SCREEN=$(get_screen 0 || echo "err:$?")
  
  if [[ "$SCREEN" =~ ^err: ]]; then
    return 1
  fi

  local NAME=$(echo "$SCREEN" |
    awk 'match($0, /(.*) connected primary .*/, a) {print a[1]}')
  
  local RESOLUTION=$(echo "$SCREEN" |
    awk 'match($0, /.* connected primary ([0-9]+x[0-9]+)\+.*/, a) {print a[1]}')

  local RATE=$(echo "$SCREEN" |
    sed -n '/.* connected primary .*/{:a;N;/\*/!ba;/\*/p}' |
    awk 'match($0, /.* ([0-9]{2}).[0-9]{2}\*.*/, a) {print a[1]"Hz"}')
  
  local PRIMARY="${NAME}|${RESOLUTION}|${RATE}"

  echo "$PRIMARY"
}

get_outputs () {
  local STATUS=$1

  if [ -n "$STATUS" ] && [[ ! "$STATUS" =~ ^(connected|disconnected|active)$ ]]; then
    return 1
  fi

  local SCREEN=$(get_screen 0 || echo "err:$?")

  if [[ "$SCREEN" =~ ^err: ]]; then
    return 1
  fi

  local PATTERN='^[A-Z]+-[0-9]+'
  if [[ "$STATUS" =~ (dis)?connected ]]; then
    PATTERN+="\s${STATUS}"
  elif [ "$STATUS" = "active" ]; then
    PATTERN+='\sconnected.*\s([0-9]+x[0-9]+)\+.*'
  fi

  local OUTPUTS=$(echo "$SCREEN" | awk '/'${PATTERN}'/{print $1}')

  echo "$OUTPUTS"
}

count_outputs () {
  local STATUS=$1

  get_outputs "$STATUS" | wc -l
}

exists () {
  local OUTPUT=$1

  local SCREEN=$(get_screen 0 || echo "err:$?")

  if [[ "$SCREEN" =~ ^err: ]]; then
    return 1
  fi

  local HEAD=$(echo "$SCREEN" | awk "/^${OUTPUT} /")

  [ -n "$HEAD" ] && return 0 || return 1
}

is_connected () {
  local OUTPUT=$1

  local SCREEN=$(get_screen 0 || echo "err:$?")

  if [[ "$SCREEN" =~ ^err: ]]; then
    return 1
  fi

  local HEAD=$(echo "$SCREEN" | awk "/^${OUTPUT} /")

  if [ -z "$HEAD" ]; then
    return 1
  fi

  local STATUS="$(echo "$HEAD" | awk 'match($0, /.* ((dis)?connected) .*/, a) {print a[1]}')"

  [ "$STATUS" = "connected" ] &&
    return 0 || return 1
}

is_active () {
  local OUTPUT=$1

  local SCREEN=$(get_screen 0 || echo "err:$?")

  if [[ "$SCREEN" =~ ^err: ]]; then
    return 1
  fi

  local HEAD=$(echo "$SCREEN" | awk "/^${OUTPUT} /")

  if [ -z "$HEAD" ]; then
    return 1
  fi

  local STATUS="$(echo "$HEAD" | awk 'match($0, /.* ((dis)?connected) .*/, a) {print a[1]}')"
  local RESOLUTION="$(echo "$HEAD" | awk 'match($0, /.* ([0-9]+x[0-9]+)\+.*/, a) {print a[1]}')"

  [ "$STATUS" = "connected" ] && [ -n "$RESOLUTION" ] &&
    return 0 || return 1
}

is_primary () {
  local OUTPUT=$1

  local PRIMARY=$(get_primary || echo "err:$?")

  if [[ "$PRIMARY" =~ ^err: ]]; then
    return 1
  fi
  
  [[ "$PRIMARY" =~ ^$OUTPUT ]] &&
    return 0 || return 1
}

pick_output () {
  local OUTPUTS=$(get_outputs | awk '{print NR-1"|"$0"|"$0}' || echo "err:$?")
  
  if [[ "$OUTPUTS" =~ ^err: ]]; then
    echo "Unable to find outputs"
    return 1
  fi
  
  OUTPUTS=($OUTPUTS)

  if [ ! ${#OUTPUTS[@]} -gt 0 ]; then
    echo "No outputs have found"
    return 1
  fi
  
  pick "Select an output:" "${OUTPUTS[@]}"
  REPLY=$(echo "${OUTPUTS[$REPLY]}" | cut -d '|' -f 2)
}

prompt () {
  local PRIMARY=$(get_primary || echo "err:$?")

  if [[ "$PRIMARY" =~ ^err: ]]; then
    read -rep "[screens:${RE}none$RS] " REPLY
    return 1
  fi

  local NAME=$(echo "$PRIMARY" | cut -d '|' -f 1)
  local RESOLUTION=$(echo "$PRIMARY" | cut -d '|' -f 2)
  local RATE=$(echo "$PRIMARY" | cut -d '|' -f 3)

  local STATUS="$YE${NAME}$RS"

  if [ -n "$RESOLUTION" ]; then
    STATUS+=" $YE${RESOLUTION}$RS"
    [ -n "$RATE" ] && STATUS+="$GR@${RATE}$RS"
  fi

  read -rep "[screens:$STATUS] " REPLY
}

show_status () {
  if [ -z "$DISPLAY" ]; then
    echo "Unable to resolve the xorg server"
    return 1
  fi

  local PATTERN='/^('
  PATTERN+='name\sof\sdisplay|'
  PATTERN+='version\snumber|'
  PATTERN+='vendor\sstring|'
  PATTERN+='vendor\srelease\snumber|'
  PATTERN+='X.Org\sversion|'
  PATTERN+='motion\sbuffer\ssize|'
  PATTERN+='image\sbyte\sorder|'
  PATTERN+='default\sscreen\snumber|'
  PATTERN+='number\sof\sscreens'
  PATTERN+=')/'

  xdpyinfo -display "$DISPLAY" |
    awk -F': ' $PATTERN'{ \
      gsub(/[ \t]+$/, "", $1); \
      gsub(/^[ \t]+/, "", $2); \
      printf "%-23s %s\n",$1":",$2 \
    }' | sed -r 's/\<./\U&/g'
  
  local SCREEN=$(get_screen 0 || echo "err:$?")

  if [[ "$SCREEN" =~ ^err: ]]; then
    echo "Unable to find the default screen"
    return 1
  fi

  local OUTPUTS=$(get_outputs connected || echo "err:$?")

  if [[ "$OUTPUTS" =~ ^err ]]; then
    echo "Unable to get connected outputs"
    return 1
  fi

  OUTPUTS=($OUTPUTS)
  LEN=${#OUTPUTS[@]}

  if [ $LEN = 0 ]; then
    echo "Connected Outputs:      none"
    return
  fi

  local CONNECTED="Connected Outputs:      "

  local INDEX=0
  for ((INDEX = 0; INDEX < $LEN; INDEX++)); do
    local OUTPUT=${OUTPUTS[$INDEX]}
    local HEAD=$(echo "$SCREEN" | awk "/^$OUTPUT /")

    local NAME="$(echo "$HEAD" | awk 'match($0, /(.*) connected .*/, a) {print a[1]}')"

    local RESOLUTION="$(echo "$HEAD" | awk 'match($0, /.* ([0-9]+x[0-9]+)\+.*/, a) {print a[1]}')"
    [ -z "$RESOLUTION" ] && RESOLUTION="inactive"

    local PRIMARY="$(echo "$HEAD" | awk 'match($0, /.* connected (primary) .*/, a) {print a[1]}')"
    [ -n "$PRIMARY" ] && PRIMARY="*"

    local RATE="$(echo "$SCREEN" | sed -n "/$OUTPUT .*/{:a;N;/\*/!ba;/\*/p}" |
      awk 'match($0, /.* ([0-9]{2}).[0-9]{2}\*.*/, a) {print "@"a[1]"Hz"}')"

    if [ $INDEX = 0 ]; then
      CONNECTED+="$NAME [${RESOLUTION}$RATE]$PRIMARY"
    else
      CONNECTED+="\n                        $NAME [${RESOLUTION}$RATE]$PRIMARY"
    fi
  done

  echo -e "$CONNECTED"
}

show_output () {
  local OUTPUT=$1

  if [ -z "$OUTPUT" ]; then
    pick_output || return 1
    OUTPUT=$REPLY
  fi

  local SCREEN=$(get_screen 0 || echo "err:$?")

  if [[ "$SCREEN" =~ ^err: ]]; then
    echo "Unable to find the default screen"
    return 1
  fi

  local HEAD=$(echo "$SCREEN" | awk "/^${OUTPUT} /")

  if [ -z "$HEAD" ]; then
    echo "Unable to find output: '$OUTPUT'"
    return 1
  fi

  local NAME="$(echo "$HEAD" | awk 'match($0, /(.*) ((dis)?connected) .*/, a) {print a[1]}')"
  local STATUS="$(echo "$HEAD" | awk 'match($0, /.* ((dis)?connected) .*/, a) {print a[1]}')"

  local PRIMARY="no"
  if is_primary "$OUTPUT"; then
    PRIMARY="yes"
  fi

  local ACTIVE="no"
  local RESOLUTION="N/A"
  local RATE="N/A"
  local POSITION="N/A"
  local DIMS="N/A"

  if is_active "$OUTPUT"; then
    ACTIVE="yes"
  
    RESOLUTION="$(echo "$HEAD" | awk 'match($0, /.* ([0-9]+x[0-9]+)\+.*/, a) {print a[1]}')"
    [ -z "$RESOLUTION" ] && RESOLUTION="N/A"

    RATE="$(echo "$SCREEN" | sed -n "/$OUTPUT .*/{:a;N;/\*/!ba;/\*/p}" |
      awk 'match($0, /.* ([0-9]{2}).[0-9]{2}\*.*/, a) {print a[1]"Hz"}')"
    [ -z "$RATE" ] && RATE="N/A"

    POSITION="$(echo "$HEAD" | awk 'match($0, /.* [0-9]+x[0-9]+\+([0-9]+\+[0-9]+) .*/, a) {print a[1]}')"
    [ -n "$POSITION" ] && POSITION="[$(echo "$POSITION" | tr '+' ",")]" || POSITION="N/A"

    DIMS="$(echo "$HEAD" | awk 'match($0, /.* ([0-9]+mm x [0-9]+mm).*/, a) {print a[1]}')"
    [ -z "$DIMS" ] && DIMS="N/A"
  fi

  local ORIENTATION="$(echo "$HEAD" | awk 'match($0, /.* (\(.*\)).*/, a) {print a[1]}')"
  [ -n "$ORIENTATION" ] && ORIENTATION="$(echo "$ORIENTATION" | tr -d "(,)")"

  local PROFILES="$(echo "$SCREEN" | awk /^$OUTPUT/,!// | tail -n +2 |
    awk '{if ($0 ~ /^\s+[0-9]+x[0-9]+/) {print "          "$0} else {exit}}')"
  [ -n "$PROFILES" ] && PROFILES="${PROFILES:13}" || PROFILES="N/A"

  local FRM=""
  FRM+="Name:        %s\n"
  FRM+="Primary:     %s\n"
  FRM+="Active:      %s\n"
  FRM+="Status:      %s\n"
  FRM+="Resolution:  %s\n"
  FRM+="Frequency:   %s\n"
  FRM+="Position:    %s\n"
  FRM+="Dimensions:  %s\n"
  FRM+="Orientation: %s\n"
  FRM+="Profiles:    %s\n"

  printf "$FRM" \
    "$NAME" "$PRIMARY" "$ACTIVE" "$STATUS" "$RESOLUTION" "$RATE" "$POSITION" "$DIMS" "$ORIENTATION" "$PROFILES"
}

list_outputs () {
  local STATUS=$1

  local OUTPUTS=$(get_outputs "$STATUS" || echo "err:$?")

  if [[ "$OUTPUTS" =~ ^err: ]]; then
    echo "Unable to get outputs"
    return 1
  fi

  OUTPUTS=($OUTPUTS)
  local LEN=${#OUTPUTS[@]}

  if [ ! $LEN -gt 0 ]; then
    echo "No outputs have been found"
    return
  fi

  local INDEX=0
  for ((INDEX = 0; INDEX < $LEN; INDEX++)); do
    [ $INDEX -gt 0 ] && echo
    show_output "${OUTPUTS[$INDEX]}" | head -n 7
  done
}

set_mode () {
  local OUTPUT=$1
  local RESOLUTION=$2
  local RATE=$3

  if [ -z "$OUTPUT" ]; then
    echo "Missing the output argument"
    return 1
  elif ! exists "$OUTPUT"; then
    echo "Unable to find output: '$OUTPUT'"
    return 1
  elif ! is_connected "$OUTPUT"; then
    echo "Cannot set mode of a disconnected output"
    return 1
  elif ! is_active "$OUTPUT"; then
    echo "Cannot set mode of an inactive"
    return 1
  fi

  if [ -z "$RESOLUTION" ]; then
    echo "Missing the resolution argument"
    return 1
  fi

  if [ -z "$RATE" ]; then
    echo "Missing the rate argument"
    return 1
  fi

  xrandr --output "$OUTPUT" --mode "$RESOLUTION" --rate "$RATE" &&
    echo "Output $OUTPUT mode set to $RESOLUTION@${RATE}Hz" ||
    echo "Unable to set mode for output $OUTPUT"
}

restore () {
  local OUTPUT=$1

  if [ -z "$OUTPUT" ]; then
    echo "Missing the output argument"
    return 1
  elif ! exists "$OUTPUT"; then
    echo "Unable to find output: '$OUTPUT'"
    return 1
  elif ! is_connected "$OUTPUT"; then
    echo "Cannot restore a disconnected output"
    return 1
  elif ! is_active "$OUTPUT"; then
    echo "Cannot restore an inactive output"
    return 1
  fi

  xrandr --output "$OUTPUT" --auto &&
    echo "Output $OUTPUT has been set to auto mode" ||
    echo "Unable to restore the output $OUTPUT"
}

set_primary () {
  local OUTPUT=$1

  if [ -z "$OUTPUT" ]; then
    echo "Missing the output argument"
    return 1
  elif ! exists "$OUTPUT"; then
    echo "Unable to find output: '$OUTPUT'"
    return 1
  elif ! is_connected "$OUTPUT"; then
    echo "Cannot set primary a disconnected output"
    return 1
  elif ! is_active "$OUTPUT"; then
    echo "Cannot set primary an inactive output"
    return 1
  elif is_primary "$OUTPUT"; then
    echo "Output $OUTPUT is already the primary"
    return 1
  fi

  xrandr --output "$OUTPUT" --primary &&
    echo "Output $OUTPUT has been set as primary" ||
    echo "Unable to set the primary output $OUTPUT"
}

set_active () {
  local OUTPUT=$1
  local ACTIVE=$2

  if [ -z "$OUTPUT" ]; then
    echo "Missing the output argument"
    return 1
  elif ! exists "$OUTPUT"; then
    echo "Unable to find output: '$OUTPUT'"
    return 1
  elif ! is_connected "$OUTPUT"; then
    echo "Cannot (de)activate a disconnected output"
    return 1
  fi

  if [[ ! "$ACTIVE" =~ ^(on|off)$ ]]; then
    echo "Invalid active argument: '$ACTIVE'"
    return 1
  fi

  if [ "$ACTIVE" = "on" ] && is_active "$OUTPUT"; then
    echo "Output $OUTPUT is already active"
    return 1
  fi

  if [ "$ACTIVE" = "off" ] && ! is_active "$OUTPUT"; then
    echo "Output $OUTPUT is already inactive"
    return 1
  fi

  if [ "$ACTIVE" = "off" ] && is_primary "$OUTPUT"; then
    echo "Cannot deactivate the primary output"
    return 1
  fi

  if [ "$ACTIVE" = "off" ] && [ $(count_outputs "active") -lt 2 ]; then
    echo "Cannot deactivate the only active output"
    return 1
  fi

  if [ "$ACTIVE" = "on" ]; then
    xrandr --output "$OUTPUT" --auto &&
      echo "Output $OUTPUT has been activated" ||
      echo "Unable to activate the output $OUTPUT"
  else
    xrandr --output "$OUTPUT" --off &&
      echo "Output $OUTPUT has been deactivated" ||
      echo "Unable to deactivate the output $OUTPUT"
  fi
}

help () {
  local FRM=" %-28s\t%s\n"

  echo "Usage: COMMAND [OBJECT] [ARGUMENTS]..."

  echo -e "\nCOMMANDS"
  printf "$FRM" \
    "help" "Show this help message." \
    "show status" "Show a report of the xorg server and screens." \
    "show output [<output>]" "Show the data of the given output." \
    "" "" \
    "list outputs [[dis]connected]" "List all outputs or by status." \
    "set mode <output> <res> <rate>" "Set the mode of the given output." \
    "set primary <output>" "Set the primary output." \
    "set active <output> on|off" "Set active or inactive the given output." \
    "restore <output>" "Restore the given output to auto mode."

  echo -e "\nOBJECTS"
  printf "$FRM" \
    "status" "The status of xorg server and screen layouts." \
    "output" "An output display device." \
    "mode" "The resolution and rate of an output." \
    "primary" "The main output in a multihead layout." \
    "active" "The status of an output if is active or not."
}

loop () {
  clear

  while true; do
    prompt && history -s "$REPLY"

    set -f
    local OLD_IFS=$IFS && IFS=$'\n'
    local CMD=($(xargs -n1 <<< "$REPLY"))
    IFS=$OLD_IFS && set +f

    if [ "${CMD[0]}" = "help" ]; then
      help
      continue
    elif [ "${CMD[0]}" = "clear" ]; then
      clear
      continue
    elif [ "${CMD[0]}" = "quit" ]; then
      break
    elif [ -z "${CMD[0]}" ]; then
      continue
    fi

    case "${CMD[0]}" in
      "show")
        case "${CMD[1]}" in
          "status") show_status;;
          "output") show_output "${CMD[2]}";;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      "list")
        case "${CMD[1]}" in
          "outputs") list_outputs "${CMD[2]}";;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      "set")
        case "${CMD[1]}" in
          "mode") set_mode "${CMD[2]}" "${CMD[3]}" "${CMD[4]}";;
          "primary") set_primary "${CMD[2]}";;
          "active") set_active "${CMD[2]}" "${CMD[3]}";;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      "restore") restore "${CMD[1]}";;
      *) echo "Unknown or invalid command: '$REPLY'";; 
    esac
  done

  clear
}

loop
