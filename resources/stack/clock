#!/usr/bin/env bash

set -f

source /opt/stack/utils

prompt () {
  local YELLOW=$'\e[0;33m'
  local RS=$'\e[m'
  local FG=$YELLOW

  local NOW=$(date +"%H:%M")

  read -rep "[clock $FG${NOW}$RS] " REPLY
}

show_status () {
  timedatectl status | head -n 7 | awk -F: '{ \
    i=index($0,":"); l=$1; \
    gsub(/^[ \t]+|[ \t]+$/, "", l); \
    printf "%-28s\t%s\n", l":", substr($0, i+1)}'
  
  echo
  
  timedatectl timesync-status | awk -F: '{ \
    i=index($0,":"); l=$1; \
    gsub(/^[ \t]+|[ \t]+$/, "", l); \
    printf "%-28s\t%s\n", l":", substr($0, i+1)}'
}

set_ntp () {
  local STATUS=$1

  if [[ ! "$STATUS" =~ ^(on|off)$ ]]; then
    echo "Invalid NTP status argument: '$STATUS'"
    return 1
  fi

  timedatectl set-ntp "$STATUS" &&
    echo "NTP set to $STATUS" ||
    echo "Something went wrong setting NTP"
}

set_timezone () {
  local TIMEZONE=$1

  timedatectl set-timezone "$TIMEZONE" &&
    echo "Timezone has been set to $TIMEZONE" ||
    echo "Something went wrong setting the timezone"
}

set_time () {
  local TIME=$1

  timedatectl set-time "$TIME" &&
    echo "Time has been set successfully" ||
    echo "Something went wrong setting the time"
}

set_date () {
  local DATE=$1
  local TIME=$(date +"%H:%M:%S")

  timedatectl set-time "$DATE $TIME" &&
    echo "Date has been set successfully" ||
    echo "Something went wrong setting the date"
}

set_rtc () {
  local MODE=$1

  if [[ ! "$MODE" =~ ^(local|utc)$ ]]; then
    echo "Invalid rtc mode argument: '$MODE'"
    return 1
  fi

  if [ "$MODE" = "local" ]; then
    timedatectl set-local-rtc on &&
      echo "RTC set to local time" ||
      echo "Something went wrong setting RTC to local time"
  else
    timedatectl set-local-rtc off &&
      echo "RTC set to UTC time" ||
      echo "Something went wrong setting RTC to UTC time"
  fi
}

sync_rtc () {
  sudo hwclock --systohc --utc &&
    echo "RTC hardware clock synced from the system clock" ||
    echo "Something went wrong synchronizing the hardware clock"
}

help () {
  echo "Usage: COMMAND [OBJECT] [ARGUMENTS]..."

  echo -e "\nOBJECTS"
  printf " %-25s\t%s\n" \
      "..." "An object to handle ..."

  echo -e "\nCOMMANDS"
  printf " %-25s\t%s\n" \
    "show status" "Show the current date time status of the system." \
    "set ntp on|off" "Enable or disable the NTP service." \
    "set timezone <Region/City>" "Set the timezone to the given region." \
    "set time <HH:MM:SS>" "Set the system local time to the given time." \
    "set date <YYYY-mm-dd>" "Set the system date to the given date." \
    "set rtc local|utc" "Set the RTC (hardware clock) to local or UTC time" \
    "sync rtc" "Sync the RTC (hardware clock) from the system clock" \
    "help" "Show this help message."
}

loop () {
  clear

  while true; do
    prompt && history -s "$REPLY"

    local OLD_IFS=$IFS && IFS=$'\n'
    local CMD=($(xargs -n1 <<< "$REPLY"))
    IFS=$OLD_IFS

    if [ "${CMD[0]}" = "help" ]; then
      help
      continue
    elif [ "${CMD[0]}" = "clear" ]; then
      clear
      continue
    elif [ "${CMD[0]}" = "quit" ]; then
      break
    elif [ -z "${CMD[0]}" ]; then
      continue
    fi

    case "${CMD[0]}" in
      "show")
        case "${CMD[1]}" in
          "status") show_status;;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      "set")
        case "${CMD[1]}" in
          "ntp") set_ntp "${CMD[2]}";;
          "timezone") set_timezone "${CMD[2]}";;
          "time") set_time "${CMD[2]}";;
          "date") set_date "${CMD[2]}";;
          "rtc") set_rtc "${CMD[2]}";;
          *) echo "Unknown or invalid command: '$REPLY'";; 
        esac;;
      "sync")
        case "${CMD[1]}" in
          "rtc") sync_rtc;;
          *) echo "Unknown or invalid command: '$REPLY'";; 
        esac;;
      *) echo "Unknown or invalid command: '$REPLY'";; 
    esac
  done

  clear
}

loop
