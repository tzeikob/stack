#!/usr/bin/env bash

source ~/.config/stack/utils

require "networkmanager"
require "wpa_supplicant"
require "wireless_tools"

validate () {
  local OBJECT=$1
  local NAME=$2

  if [ "$OBJECT" = "device" ]; then
    if ! nmcli -f DEVICE device | tail +2 | grep -q "$NAME"; then
      echo "Invalid device $NAME"
      return 1
    fi
  elif [ "$OBJECT" = "connection" ]; then
    if ! nmcli -f NAME connection | tail +2 | grep -q "$NAME"; then
      echo "Invalid connection $NAME"
      return 1
    fi
  fi
}

sel () {
  local OBJECT=$1
  local NAME=$2

  if ! validate "$OBJECT" "$NAME"; then
    return 1
  fi

  if [ "$OBJECT" = "device" ]; then
    SEL_DEVICE=$NAME
    SEL_CONNECTION=""
    SEL=$SEL_DEVICE
  elif [ "$OBJECT" = "connection" ]; then
    SEL_DEVICE=""
    SEL_CONNECTION=$NAME
    SEL=$SEL_CONNECTION
  fi
}

desel () {
  SEL_DEVICE=""
  SEL_CONNECTION=""
  SEL=""
}

status () {
  nmcli --colors no general status

  local OLD_IFS=$IFS && IFS=","

  local CONNECTIONS=($(
    nmcli -g DEVICE,TYPE,STATE,CONNECTION device |
      trim |
      awk -v FS=':' -v OFS=':' '{if ($3 == "connected" ) {print $4","}}' |
      no_breaks
  ))

  IFS=$OLD_IFS

  for CONNECTION in "${CONNECTIONS[@]}"; do
    echo
    nmcli --colors no --fields \
      "connection.interface-name, \
      connection.id, \
      connection.uuid, \
      connection.type, \
      connection.autoconnect, \
      802-11-wireless.ssid, \
      802-11-wireless.channel, \
      802-11-wireless.seen-bssids, \
      802-11-wireless-security.key-mgmt, \
      GENERAL.STATE, \
      IP4.ADDRESS, \
      IP4.GATEWAY, \
      IP4.ROUTE, \
      IP4.DNS, \
      IP6.ADDRESS, \
      IP6.GATEWAY, \
      IP6.ROUTE" \
      connection show "$CONNECTION"
  done
}

show () {
  local OBJECT=$1
  local NAME=$2

  if [ "$OBJECT" = "device" ]; then
    nmcli --colors no device show "$NAME"
  elif [ "$OBJECT" = "connection" ]; then
    nmcli --colors no --fields \
      "connection.interface-name, \
      connection.id, \
      connection.uuid, \
      connection.type, \
      connection.autoconnect, \
      802-11-wireless.ssid, \
      802-11-wireless.channel, \
      802-11-wireless.seen-bssids, \
      802-11-wireless-security.key-mgmt, \
      GENERAL.STATE, \
      IP4.ADDRESS, \
      IP4.GATEWAY, \
      IP4.ROUTE, \
      IP4.DNS, \
      IP6.ADDRESS, \
      IP6.GATEWAY, \
      IP6.ROUTE" \
      connection show "$NAME"
  fi
}

devices () {
  local TYPE=$1
  
  if [ -z "$TYPE" ]; then
    nmcli --colors no device
  else
    nmcli device | awk -v t=$TYPE '{if ($2 == t || $2 == "TYPE") {print}}'
  fi
}

connections () {
  local TYPE=$1

  if [ -z "$TYPE" ]; then
    nmcli --colors no connection
  else
    nmcli --color no connection | awk -v t=$TYPE '{if ($3 == t || $3 == "TYPE") {print}}'
  fi
}

scan () {
  local OLD_IFS=$IFS && IFS=","

  local NETWORKS=($(
    nmcli -f SIGNAL,SSID,IN-USE -t device wifi list |
      trim |
      awk -F: '{if ($3 == "*") {print "["$1"] \033[32m"$2"\033[0m,"} \
        else {print "["$1"] \033[35m"$2"\033[0m,"}}' |
      no_breaks
  ))

  IFS=$OLD_IFS

  print 3 40 "${NETWORKS[@]}"
}

up () {
  local OBJECT=$1
  local NAME=$2

  if [ "$OBJECT" = "device" ]; then
    nmcli device connect "$NAME" && sleep 6
  elif [ "$OBJECT" = "connection" ]; then
    nmcli connection up "$NAME" && sleep 6
  fi
}

down () {
  local OBJECT=$1
  local NAME=$2

  if [ "$OBJECT" = "device" ]; then
    nmcli device disconnect "$NAME" && sleep 6
  elif [ "$OBJECT" = "connection" ]; then
    nmcli connection down "$NAME" && sleep 6
  fi
}

power () {
  local OBJECT=$1
  local STATUS=${2:-"on"}

  if [ "$OBJECT" = "network" ]; then
    nmcli networking "$STATUS" &&
      sleep 6 &&
      echo "Network set to $STATUS status" ||
      echo "Unable to power $STATUS the network"
  elif [ "$OBJECT" = "wifi" ]; then
    nmcli radio wifi "$STATUS" &&
      sleep 6 &&
      echo "Wifi set to $STATUS status" ||
      echo "Unable to power $STATUS the wifi"
  fi
}

delete () {
  local OBJECT=$1
  local NAME=$2

  askme "Do you want to delete the $OBJECT?" "yes" "no"

  if [ "$REPLY" = "no" ]; then
    return 0
  fi

  if [ "$OBJECT" = "device" ]; then
    nmcli device delete "$NAME" && sleep 6 && desel
  elif [ "$OBJECT" = "connection" ]; then
    nmcli connection delete "$NAME" && sleep 6 && desel
  fi
}

connect () {
  local SSID=$1
  local SECRET_KEY=$2

  nmcli device wifi connect "$SSID" password "$SECRET_KEY" hidden yes &&
   sleep 6
}

help () {
  echo "COMMANDS"

  if [ -z "$SEL" ]; then
    printf " %-25s\t%s\n" \
      "status" "Show the current status of system's networking" \
      "devices [<type>]" "List all network devices or filtered by type" \
      "connections [<type>]" "List all network connections or filtered by type" \
      "scan" "Scan for wireless networks in your area" \
      "power network <on|off>" "Power on/off the system networking" \
      "power wifi <on|off>" "Power on/off the wifi" \
      "airplane" "Set networking to airplane mode" \
      "connect <SSID> <secret-key>" "Connect to a wireless network" \
      "select device <name>" "Select a device by the given name" \
      "select connection <name>" "Select a connection by the given name" \
      "help" "Show this help message"
  else
    printf " %-25s\t%s\n" \
      "help" "Show this help message" \
      "status" "Show the current status of the selected device or connection" \
      "up" "Get the selected device or connection up" \
      "down" "Get the selected device or connection down" \
      "delete" "Delete the selected device or connection" \
      "deselect" "Deselect the select device or connection"
  fi
}

while true; do
  if [ -z "$SEL" ]; then
    NETWORKING=$(nmcli networking)
    STATUS=$(nmcli -g STATE,CONNECTIVITY general status)

    FOREGROUND=$WHITE
    if [ "$NETWORKING" = "enabled" ]; then
      if [[ "$STATUS" =~ ^connected ]]; then
        FOREGROUND=$GREEN
      elif [[ "$STATUS" =~ ^disconnected ]]; then
        FOREGROUND=$RED
      else
        FOREGROUND=$YELLOW
      fi
    fi

    prompt "$STATUS" "$FOREGROUND"
  else
    prompt "$SEL" "$YELLOW"
  fi

  history -s "$REPLY"
  CMD=($(echo "$REPLY" | tr ':' '\n'))

  if [ "${CMD[0]}" = "help" ]; then
    help
    continue
  elif [ "${CMD[0]}" = "clear" ]; then
    clear
    continue
  elif [ "${CMD[0]}" = "quit" ]; then
    break
  elif [ -z "${CMD[0]}" ]; then
    continue
  fi

  if [ -z "$SEL" ]; then
    case "${CMD[0]}" in
      "status") status;;
      "devices") devices "${CMD[@]:1}";;
      "connections") connections "${CMD[@]:1}";;
      "scan") scan;;
      "power") power "${CMD[@]:1}";;
      "airplane") power wifi off;;
      "connect") connect "${CMD[@]:1}";;
      "select")
        case "${CMD[1]}" in
          "device") sel device "${CMD[*]:2}";;
          "connection") sel connection "${CMD[*]:2}";;
          *) echo "Invalid select command: $REPLY";;
        esac;;
      *) echo "Unknown or invalid command: $REPLY";; 
    esac
  else
    case "${CMD[0]}" in
      "status")
        [ ! -z "$SEL_DEVICE" ] &&
          show device "$SEL" ||
          show connection "$SEL";;
      "up")
        [ ! -z "$SEL_DEVICE" ] &&
          up device "$SEL" ||
          up connection "$SEL";;
      "down")
        [ ! -z "$SEL_DEVICE" ] &&
          down device "$SEL" ||
          down connection "$SEL";;
      "delete")
        [ ! -z "$SEL_DEVICE" ] &&
          delete device "$SEL" ||
          delete connection "$SEL";;
      "deselect") desel;;
      *) echo "Unknown or invalid command: $REPLY";;
    esac
  fi
done
