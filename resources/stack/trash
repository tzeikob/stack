#!/usr/bin/env bash

source ~/.config/stack/utils

require "trash-cli"

not_present () {
  local BEFORE=($1)
  local AFTER=($2)

  for EXISTED in "${BEFORE[@]}"; do
    local IS_FOUND="false"

    for REMAINED in "${AFTER[@]}"; do
      if [ "$EXISTED" = "$REMAINED" ]; then
        IS_FOUND="true"
        break
      fi
    done

    if [ "$IS_FOUND" = "false" ]; then
      echo "$EXISTED"
    fi
  done
}

count_files () {
  trash-list | wc -l
}

list_files () {
  if [ $COUNTER -gt 0 ]; then
    trash-list | awk '{print " "$3}'
  else
    echo "Trash is empty, no files to list"
  fi
}

restore_files () {
  if [ $COUNTER -gt 0 ]; then
    local BEFORE=$(trash-list)

    trash-restore

    local AFTER=$(trash-list)
    local RESTORED=$(not_present "$BEFORE" "$AFTER")

    if [ ! -z "$RESTORED" ]; then
      echo "Restored file(s):"
      echo "$RESTORED" | awk '{print " "$1}'
    else
      echo "No file is restored"
    fi
  else
    echo "Trash is empty, no files to restore"
  fi
}

remove_files () {
  if [ $COUNTER -gt 0 ]; then
    askme "Enter a path pattern to match files for removal:" ".+"
    local FILE_PAT="$REPLY"

    askme "ANY MATCHED FILE will be gone, proceed?" "yes" "no"

    if [ "$REPLY" = "yes" ]; then
      local BEFORE=$(trash-list)

      trash-rm "$FILE_PAT"

      local AFTER=$(trash-list)
      local GONE=$(not_present "$BEFORE" "$AFTER")

      if [ ! -z "$GONE" ]; then
        echo "Removed file(s):"
        echo "$GONE" | awk '{print " "$1}'
      else
        echo "No file is removed"
      fi
    fi
  else
    echo "Trash is empty, no files to remove"
  fi
}

empty_files () {
  if [[ $COUNTER -gt 0 ]]; then
    askme "ALL $COUNTER FILES will be gone, proceed?" "yes" "no"

    if [ "$REPLY" = "yes" ]; then
      local BEFORE=$(trash-list)

      trash-empty -f

      local AFTER=$(trash-list)
      local GONE=$(not_present "$BEFORE" "$AFTER")

      echo "Removed file(s):"
      echo "$GONE" | awk '{print " "$1}'
    fi
  else
    echo "Trash is already empty, no files to remove"
  fi
}

trash_files () {
  local FILES=("$@")
  local LEN=${#FILES[@]}

  if [ $LEN -gt 0 ]; then
    local BEFORE=$(trash-list)

    local INDEX=0
    while [ $INDEX -lt $LEN ]; do
      trash-put "${FILES[$INDEX]}"
      INDEX=$((INDEX + 1))
    done

    local AFTER=$(trash-list)
    local TRASHED=$(not_present "$AFTER" "$BEFORE")

    echo "The following files are trashed:"
    echo "$TRASHED" | awk '{print " "$1}'
  else
    abort "Unable to trash, no files are given"
  fi
}

wipe_files () {
  local FILES=("$@")
  local LEN=${#FILES[@]}

  if [ $LEN -gt 0 ]; then
    askme "Files will be gone forever, are you sure?" "yes" "no"

    if [ "$REPLY" = "yes" ]; then
      local INDEX=0
      while [ $INDEX -lt $LEN ]; do
        rm -rf "${FILES[$INDEX]}"
        INDEX=$((INDEX + 1))
      done
    fi
  else
    abort "Unable to remove, no files are given"
  fi
}

help () {
  local MODE=$1

  if [ "$MODE" = "noargs" ]; then
    echo "Usage: COMMAND"
  
    echo -e "\nCOMMANDS"
    printf " %-25s\t%s\n" \
      "list" "List all trashed files" \
      "restore" "Restore trashed files" \
      "remove" "Remove trashed files by the given pattern" \
      "empty" "Empty trash from any trashed files if any" \
      "help" "Show this help message"
  else
    echo "Usage: trash [OPTIONS] FILE..."

    echo -e "\nOPTIONS"
    printf " %-25s\t%s\n" \
      "r, --remove" "Remove files forever, no trash" \
      "h, --help" "Show this help message"
  fi
}

if [ $# = 0 ]; then
  while true; do
    COUNTER=$(count_files)

    FOREGROUND=$WHITE
    if [ $COUNTER -gt 0 ]; then
      FOREGROUND=$YELLOW
    fi

    prompt "trashed:$COUNTER" "$FOREGROUND"

    history -s "$REPLY"
    CMD=($(echo "$REPLY" | tr ':' '\n'))

    if [ "${CMD[0]}" = "help" ]; then
      help "noargs"
      continue
    elif [ "${CMD[0]}" = "clear" ]; then
      clear
      continue
    elif [ "${CMD[0]}" = "quit" ]; then
      break
    elif [ -z "${CMD[0]}" ]; then
      continue
    fi

    case "${CMD[0]}" in
      "list") list_files;;
      "restore") restore_files;;
      "remove") remove_files;;
      "empty") empty_files;;
      *) echo "Unknown or invalid command: $REPLY";; 
    esac
  done
else
  OPTS=""
  FILES=()

  while true; do
    if [ "$1" = "-r" ] || [ "$1" = "--remove" ]; then
      OPTS="$OPTS remove"
    elif [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
      OPTS="$OPTS help"
    elif [[ "$1" =~ ^(-|--) ]]; then
      abort "Unknown or invalid option: $1"
    elif [ -n "$1" ]; then
      FILES+=("$1")
    else
      break
    fi

    shift
  done

  if [[ "$OPTS" =~ "help" ]]; then
    help
  elif [[ "$OPTS" =~ "remove" ]]; then
    wipe_files "${FILES[@]}"
  else
    trash_files "${FILES[@]}"
  fi
fi
