#!/usr/bin/env bash

source ~/.config/stack/utils

require "trash-cli"

count_files () {
  trash-list | wc -l
}

list_files () {
  local COUNTER=$(count_files)

  if [ $COUNTER -gt 0 ]; then
    trash-list
  else
    echo "Trash is empty, no files to list"
  fi
}

restore_files () {
  local RESTORE_PATH=$1
  local COUNTER=$(count_files)

  if [ $COUNTER -gt 0 ]; then
    trash-restore "$RESTORE_PATH"

    local NEW_COUNTER=$(count_files)
    local RESTORED=$((COUNTER - NEW_COUNTER))

    if [ $RESTORED -gt 1 ]; then
      echo "$RESTORED files have been restored"
    elif [ $RESTORED -gt 0 ]; then
      echo "$RESTORED file has been restored"
    else
      echo "No file has been restored"
    fi
  else
    echo "Trash is empty, no files to restore"
  fi
}

remove_files () {
  local FILE_PAT=$1
  local COUNTER=$(count_files)

  if [ $COUNTER -gt 0 ]; then
    askme "Matched files will be gone forever, proceed?" "yes" "no"

    if [ "$REPLY" = "yes" ]; then
      trash-rm "$FILE_PAT"

      local NEW_COUNTER=$(count_files)
      local GONE=$((COUNTER - NEW_COUNTER))

      if [ $GONE -gt 1 ]; then
        echo "$GONE files have been removed"
      elif [ $GONE -gt 0 ]; then
        echo "$GONE file has been removed"
      else
        echo "No file is removed"
      fi
    fi
  else
    echo "Trash is empty, no files to remove"
  fi
}

empty_files () {
  local DAYS=$1
  local COUNTER=$(count_files)

  if [[ $COUNTER -eq 0 ]]; then
    echo "Trash is empty, no files to remove"
    return 0
  fi
  
  if [ -n "$DAYS" ]; then
    if [[ "$DAYS" =~ ^[0-9]+$ ]]; then
      askme "Files older than $DAYS day(s) will be removed, proceed?" "yes" "no"

      if [ "$REPLY" = "yes" ]; then
        trash-empty -f "$DAYS"
      fi
    else
      echo "Error: days should be a positive integer value"
    fi
  else
    askme "All trashed files will be removed, proceed?" "yes" "no"

    if [ "$REPLY" = "yes" ]; then
      trash-empty -f
    fi
  fi

  local NEW_COUNTER=$(count_files)
  local GONE=$((COUNTER - NEW_COUNTER))

  if [ $GONE -gt 1 ]; then
    echo "$GONE files have been removed"
  elif [ $GONE -eq 1 ]; then
    echo "$GONE file has been removed"
  else
    echo "No file is removed"
  fi
}

trash_files () {
  local FILES=("$@")
  local LEN=${#FILES[@]}

  if [ $LEN -gt 0 ]; then
    local COUNTER=$(count_files)

    local INDEX=0
    while [ $INDEX -lt $LEN ]; do
      trash-put "${FILES[$INDEX]}"
      INDEX=$((INDEX + 1))
    done

    local NEW_COUNTER=$(count_files)
    local TRASHED=$((NEW_COUNTER - COUNTER))

    if [ $TRASHED -gt 1 ]; then
      echo "$TRASHED files have been trashed"
    elif [ $TRASHED -gt 0 ]; then
      echo "$TRASHED file has been trashed"
    else
      echo "No file is trashed"
    fi
  else
    abort "Unable to trash, no files are given"
  fi
}

wipe_files () {
  local FILES=("$@")
  local LEN=${#FILES[@]}

  if [ $LEN -gt 0 ]; then
    askme "Files will be gone forever, proceed?" "yes" "no"

    if [ "$REPLY" = "yes" ]; then
      local INDEX=0
      while [ $INDEX -lt $LEN ]; do
        rm -rf "${FILES[$INDEX]}"
        INDEX=$((INDEX + 1))
      done
    fi
  else
    abort "Unable to remove, no files are given"
  fi
}

help () {
  local MODE=$1

  if [ "$MODE" = "noargs" ]; then
    echo "Usage: COMMAND [ARGUMENTS]..."
  
    echo -e "\nCOMMANDS"
    printf " %-25s\t%s\n" \
      "list" "List all trashed files" \
      "restore <path>" "Restore files from the given path or the current directory" \
      "remove <path>" "Remove trashed files matched by the given path pattern" \
      "empty <days>" "Empty trash from files aged by the given days or all files" \
      "help" "Show this help message"
  else
    echo "Usage: trash [OPTIONS] FILE..."

    echo -e "\nOPTIONS"
    printf " %-25s\t%s\n" \
      "r, --remove" "Remove files forever, no trash" \
      "h, --help" "Show this help message"
  fi
}

if [ $# = 0 ]; then
  CURRENT_PATH=${PWD/*\//}

  while true; do
    COUNTER=$(count_files)

    FOREGROUND=$WHITE
    if [ $COUNTER -gt 0 ]; then
      FOREGROUND=$YELLOW
    fi

    prompt "$CURRENT_PATH:$COUNTER" "$FOREGROUND"

    history -s "$REPLY"
    CMD=($(echo "$REPLY" | tr ':' '\n'))

    if [ "${CMD[0]}" = "help" ]; then
      help "noargs"
      continue
    elif [ "${CMD[0]}" = "clear" ]; then
      clear
      continue
    elif [ "${CMD[0]}" = "quit" ]; then
      break
    elif [ -z "${CMD[0]}" ]; then
      continue
    fi

    case "${CMD[0]}" in
      "list") list_files;;
      "restore") restore_files "${CMD[@]:1}";;
      "remove") remove_files "${CMD[@]:1}";;
      "empty") empty_files "${CMD[@]:1}";;
      *) echo "Unknown or invalid command: $REPLY";; 
    esac
  done
else
  OPTS=""
  FILES=()

  while true; do
    if [ "$1" = "-r" ] || [ "$1" = "--remove" ]; then
      OPTS="$OPTS remove"
    elif [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
      OPTS="$OPTS help"
    elif [[ "$1" =~ ^(-|--) ]]; then
      abort "Unknown or invalid option: $1"
    elif [ -n "$1" ]; then
      FILES+=("$1")
    else
      break
    fi

    shift
  done

  if [[ "$OPTS" =~ "help" ]]; then
    help
  elif [[ "$OPTS" =~ "remove" ]]; then
    wipe_files "${FILES[@]}"
  else
    trash_files "${FILES[@]}"
  fi
fi
