#!/usr/bin/env bash

source /opt/stack/utils

require "udisks2"
require "glib2"
require "nmap"

prompt () {
  read -rep "[disks] " REPLY
}

list_devices () {
  lsblk -o NAME,PATH,TYPE,SIZE,FSTYPE,LABEL
}

list_hosts () {
  local GATEWAY=$(ip route get 1.1.1.1 | awk '/via/{print $3}' | head -n 1)
  local CIDR=$(echo "$GATEWAY" | sed -r 's/(\.[0-9]{1,3}$)/.0\/24/')
  local HOSTS=($(nmap -n -sn "$CIDR" -oG - | awk '/Up$/{print $2}'))
  local LEN=${#HOSTS[@]}

  if [ $LEN -gt 0 ]; then
    printf "%-15s\t%s\n" "HOST" "NAME"

    local INDEX=0
    while [ $INDEX -lt $LEN ]; do
      nmap "${HOSTS[$INDEX]}" -oG - |
        awk '/Host/{printf "%-15s\t%s\n", $2, $3}' |
        head -n 1 |
        tr -d '()'

      INDEX=$((INDEX + 1))
    done
  else
    echo "No local hosts have been discovered"
  fi
}

mount_device () {
  local DEVICE="$1"

  if [ ! -b "$DEVICE" ]; then
    echo "Invalid block device: $DEVICE"
    return 1
  elif grep -qs "$DEVICE " /proc/mounts; then
    echo "Block device $DEVICE is already mounted"
    return 1
  fi
  
  udisksctl mount -b "$DEVICE" &&
    echo "Block device $DEVICE mounted successfully" ||
    echo "Failed to mount block device $DEVICE"

  if [ -d "/run/media/$USER" ] && [ ! -L "$HOME/mount/local" ]; then
    mkdir -p "$HOME/mount/local"
    ln -s "/run/media/$USER" "$HOME/mount/local"
  fi
}

unmount_device () {
  local DEVICE="$1"

  if [ ! -b "$DEVICE" ]; then
    echo "Invalid block device: $DEVICE"
    return 1
  elif ! grep -qs "$DEVICE " /proc/mounts; then
    echo "Block device $DEVICE is not mounted"
    return 1
  fi

  sync &&
  udisksctl unmount -b "$DEVICE"

  if [[ "$?" -eq 0 ]]; then
    echo "Block device $DEVICE unmounted successfully"

    udisksctl power-off -b "$DEVICE" &&
      echo "Device power set to off" ||
      echo "Unable to power off the device"
  else
    echo "Failed to unmount block device $DEVICE"
  fi
}

mount_host () {
  local HOST=$1
  local SHARE=$2
  local URI="smb://$HOST/$SHARE"

  if gio mount -l | grep -q "$URI"; then
    echo "Host $URI is already mounted"
    return 1
  fi

  gio mount "$URI" &&
    echo "Host $URI mounted successfully" ||
    echo "Failed to mount host: $URI"

  if [ -d "/run/user/${UID}/gvfs" ] && [ ! -L "$HOME/mount/remote" ]; then
    mkdir -p "$HOME/mount/remote"
    ln -s "/run/user/${UID}/gvfs" "$HOME/mount/remote"
  fi
}

unmount_host () {
  local HOST=$1
  local SHARE=$2
  local URI="smb://$HOST/$SHARE"

  if ! gio mount -l | grep -q "$URI"; then
    echo "Host $URI is not mounted"
    return 1
  fi

  sync &&
  gio mount -u "$URI" &&
    echo "Host $URI unmounted successfully" ||
    echo "Failed to umount host $URI"
}

help () {
  echo "Usage: COMMAND [OBJECT] [ARGUMENTS]..."

  echo -e "\nOBJECTS"
  printf " %-20s\t%s\n" \
      "device" "An object to handle a block device." \
      "host" "An object to handle a host of shared folders."

  echo -e "\nCOMMANDS"
  printf " %-20s\t%s\n" \
    "list devices" "List any block devices of the system." \
    "list hosts" "Discover any available hosts at the local network." \
    "mount device <path>" "Mount a block device with the given path." \
    "mount host <ip>|<domain> <share>" "Mount a shared folder on host with the given ip or domain." \
    "unmount device <path>" "Unmount a block device with the given path." \
    "unmount host <ip>|<domain> <share>" "Unmount a shared folder on host with the given ip or domain." \
    "help" "Show this help message."
}

main () {
  clear

  while true; do
    prompt

    history -s "$REPLY"
    local CMD=($(echo "$REPLY" | tr ':' '\n'))

    if [ "${CMD[0]}" = "help" ]; then
      help
      continue
    elif [ "${CMD[0]}" = "clear" ]; then
      clear
      continue
    elif [ "${CMD[0]}" = "quit" ]; then
      break
    elif [ -z "${CMD[0]}" ]; then
      continue
    fi

    case "${CMD[0]}" in
      "list")
        case "${CMD[1]}" in
          "devices") list_devices;;
          "hosts") list_hosts;;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      "mount")
        case "${CMD[1]}" in
          "device") mount_device "${CMD[2]}";;
          "host") mount_host "${CMD[2]}" "${CMD[3]}";;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      "unmount")
        case "${CMD[1]}" in
          "device") unmount_device "${CMD[2]}";;
          "host") unmount_host "${CMD[2]}" "${CMD[3]}";;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      *) echo "Unknown or invalid command: '$REPLY'";; 
    esac
  done
}

main "$@"
