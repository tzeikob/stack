#!/bin/bash

set -o pipefail
source /opt/stack/utils

# Returns the list of block devices of the given
# types being in the given status.
# Arguments:
#  type:   a comma-sep list of disk, part, rom or all
#  status: mounted, unmounted or all
# Outputs:
#  A json array list of block device objects.
find_devices () {
  local type="${1}"
  local status="${2}"

  local query='.blockdevices[]'

  if [[ -n "${type}" ]] && [[ "${type}" != "all" ]]; then
    query+="$(echo "${type}" | awk -F',' '{
      criteria=""
      for (i=1; i<=NF; i++) {
        if (i > 1) criteria=criteria " or "
        criteria=criteria "(.type == \"" $i "\")"
      }
      print "|select(" criteria ")"
    }')"
  fi
  
  if [[ "${status}" == "mounted" ]]; then
    query+='|select(.mountpoints != [null])'
  elif [[ "${status}" == "unmounted" ]]; then
    query+='|select(.mountpoints == [null])'
  fi

  query="[${query}]"

  local fields='PATH,TYPE,VENDOR,LABEL,SIZE,MOUNTPOINT,'
  fields+='MOUNTPOINTS,RM,RO,FSTYPE,MODEL'

  lsblk -J -o "${fields}" | jq -cer "${query}" || return 1
}

# Returns the block device with the given path.
# Arguments:
#  path: the path of a block device
# Outputs:
#  A json object of a block device.
find_device () {
  local path="${1}"

  local fields='NAME,PATH,LABEL,UUID,VENDOR,MODEL,REV,'
  fields+='SERIAL,TYPE,TRAN,RM,RO,HOTPLUG,FSTYPE,FSVER,'
  fields+='SIZE,FSAVAIL,FSUSED,FSUSE%,MOUNTPOINT,MOUNTPOINTS,STATE'

  lsblk -J -o "${fields}" "${path}" | jq -cer '.blockdevices[0]' || return 1
}

# Checks if the block device with the given path
# is of the given type or not.
# Arguments:
#  path: the path of a block device
#  type: disk, part or rom
# Returns:
#  0 if it is of type otherwise 1.
is_type_of () {
  local path="${1}"
  local type="${2}"

  local query="if .type == \"${type}\" then true else false end"

  local result=''
  result="$(find_device "${path}" | jq -cr "${query}")"

  if [[ "${result}" == "true" ]]; then
    return 0
  else
    return 1
  fi
}

# Checks if the block device with the given path
# is a removable disk or not.
# Arguments:
#  path: the path of a block device
# Returns:
#  0 if it is a removable disk otherwise 1.
is_removable_disk () {
  local path="${1}"

  local device=''
  device="$(find_device "${path}")" || return 1

  local type=''
  type="$(echo "${device}" | jq -cr '.type')" || return 1

  local is_removable=''
  is_removable="$(echo "${device}" | jq -cr '.rm')" || return 1

  if [[ "${type}" == "disk" ]] && [[ "${is_removable}" == "true" ]]; then
    return 0
  else
    return 1
  fi
}

# Checks if the block device with the given path
# is a disk with system partitions.
# Arguments:
#  path: the path of a block device
# Returns:
#  0 if it is a system disk otherwise 1.
is_system_disk () {
  local path="${1}"

  local query=''
  query+='.children|if . and length>0'
  query+=' then .[]|.mountpoint|'
  query+='  if . then select(.|test("^(/|/home|/boot|/var|/log|/swap)$")) else "" end'
  query+=' else "" end'

  local parts=''
  parts="$(find_device "${path}" | jq -cr "${query}")" || return 1

  if [[ -n "${parts}" ]]; then
    return 0
  else
    return 1
  fi
}

# Unmounts the partition block device with
# the given path.
# Arguments:
#  path: the path of a partition block device
unmount_partition () {
  local path="${1}"

  sync &&
  udisksctl unmount -b "${path}" &> /dev/null || return 1
}

# Unmounts the partitions of a disk with the
# given path.
# Arguments:
#  path: the path of a disk block device
unmount_partitions () {
  local path="${1}"

  # Collect any disk's partitions currently mounted
  local parts=''
  parts="$(grep -sE "${path}.*[0-9]+ " /proc/mounts | awk '{print $1}')"
  
  if [[ -n "${parts}" ]]; then
    local part=''
    while read -r part; do
      unmount_partition "${part}"

      if [[ $? -eq 0 ]]; then
        echo "Partition ${part} unmounted"
      else
        echo "Failed to unmount partition ${part}"
        return 2
      fi
    done <<< "${parts}"
  else
    echo "No mounted partitions found"
  fi
}

# Re-creates the partition table and removes any
# existing partitions on the disk block device with
# the given path.
# Arguments:
#  path: the path of a disk block device
clean_partitions () {
  local path="${1}"

  sudo wipefs --all --force --quiet "${path}" &&
  sudo parted --script -a optimal -- "${path}" mklabel msdos || return 1
}

# Creates a primary partition to the disk block
# device with the given path.
# Arguments:
#  path:    the path of a block disk device
#  fs_type: the fs type of the partition
#  start:   the start of the partition
#  end:     the end of the partition
create_partition () {
  local path="${1}"
  local fs_type="${2}"
  local start="${3}"
  local end="${4}"

  # Use ntfs as fs type for exfat file systems
  [[ "${fs_type}" == "exfat" ]] && fs_type="ntfs"
  
  sudo parted --script -a optimal -- "${path}" mkpart primary "${fs_type}" "${start}" "${end}" &&
  sudo parted --script -- "${path}" align-check optimal 1 || return 1
}

# Formats the i-th partition of the disk block
# device with the given path.
# Arguments:
#  path:    the path of a disk block device
#  index:   the index of the partition to format
#  fs_type: the fs type of the partition
#  label:   the label of the partition
format_partition () {
  local path="${1}"
  local index="${2}"
  local fs_type="${3}"
  local label="${4}"

  # Add path postfix for nvme disks
  if [[ "${path}" =~ ^/dev/nvme ]]; then
    path="${path}p"
  fi

  case "${fs_type}" in
    "ext2") sudo mkfs.ext2 -L "${label}" "${path}${index}" | awk NF;;
    "ext3") sudo mkfs.ext3 -L "${label}" "${path}${index}" | awk NF;;
    "ext4") sudo mkfs.ext4 -L "${label}" "${path}${index}" | awk NF;;
    "ntfs") sudo mkfs.ntfs -f -L "${label}" "${path}${index}" | awk NF;;
    "exfat") sudo mkfs.exfat -L "${label}" "${path}${index}" | awk NF;;
    "fat32") sudo mkfs.fat -F 32 -n "${label}" "${path}${index}" | awk NF;;
    *) return 1;;
  esac

  if [[ $? -ne 0 ]]; then
    return 1
  fi
}

# Returns the list of shared folders of the given
# host available in the local network.
# Arguments:
#  host:      the name or ip of a host
#  username:  the name of the user
#  workgroup: the group of the user
#  password:  the password of the user
# Outputs:
#  A json list of folder objects.
find_shared_folders () {
  local host="${1}"
  local username="${2}"
  local workgroup="${3}"
  local password="${4}"

  local folders=''
  folders="$(smbclient -L "${host}" -U "${username}" -W "${workgroup}" --password="${password}" |
    awk '/Disk/{print "{\"name\":\""$1"\",\"type\":\""$2"\"},"}')" || return 1

  # Remove the extra comma after the last element
  if [[ -n "${folders}" ]]; then
    folders="${folders::-1}"
  fi

  echo "[${folders}]"
}

# Shows a menu asking the user to select one block device,
# where the answer is kept in the global var REPLY.
# Globals:
#  REPLY
# Arguments:
#  type:   a comma-sep list of disk, part, rom or all
#  status: mounted, unmounted or all
# Outputs:
#  A menu of block devices.
pick_device () {
  local type="${1}"
  local status="${2}"

  local devices=''
  devices="$(find_devices "${type}" "${status}")"

  if [[ $? -ne 0 ]]; then
    echo "Unable to find block devices"
    return 2
  fi

  local len=0
  len="$(count "${devices}")" || return 1
  
  if [[ ${len} -eq 0 ]]; then
    echo "No block devices have found"
    return 2
  fi

  local value=''
  value+='\(.path) ['
  value+='\(if .vendor then "\(.vendor|gsub("^\\s+|\\s+$";"")) " else "" end)'
  value+='\(if .label then "\(.label) " else "" end)'
  value+='\(.size)]'

  local query=''
  query="[.[]|{key: .path, value: \"${value}\"}]"

  devices="$(echo "${devices}" | jq -cer "${query}")" || return 1

  pick_one "Select a block device:" "${devices}" "vertical" || return $?
}

# Shows a menu asking the user to select one host, where the
# answer is kept in the global var REPLY.
# Globals:
#  REPLY
# Arguments:
#  None
# Outputs:
#  A menu of host names.
pick_host () {
  echo "Searching hosts in local network..."

  local hosts=''
  hosts="$(find_hosts)"

  if [[ $? -ne 0 ]]; then
    echo "Unable to find hosts"
    return 2
  fi

  local len=0
  len="$(count "${hosts}")" || return 1
  
  if [[ ${len} -eq 0 ]]; then
    echo "No hosts have found"
    return 2
  fi

  local query=''
  query+='key: .ip,'
  query+='value: "\(.ip)\(.name|if . and . != "" then " [\(.)]" else "" end)"'
  query="[.[]|{${query}}]"

  hosts="$(echo "${hosts}" | jq -cer "${query}")" || return 1

  pick_one "Select a host:" "${hosts}" "vertical" || return $?
}

# Shows a menu asking the user to select one file system type,
# where the answer is kept in the global var REPLY.
# Globals:
#  REPLY
# Arguments:
#  None
# Outputs:
#  A menu of file system types.
pick_fs_type () {
  local values=''
  values+='{"key": "ext4", "value": "EXT4"},'
  values+='{"key": "ext3", "value": "EXT3"},'
  values+='{"key": "ext2", "value": "EXT2"},'
  values+='{"key": "ntfs", "value": "NTFS"},'
  values+='{"key": "exfat", "value": "exFAT"},'
  values+='{"key": "fat32", "value": "FAT32"}'
  values="[${values}]"

  pick_one "Select a file system type:" "${values}" "vertical" || return $?
}

# Shows a prompt status and asks user to enter the
# next command, which is kept in the global var REPLY.
# Globals:
#  REPLY
# Arguments:
#  None
# Outputs:
#  A minimal prompt status line.
prompt () {
  local query='.[]|select(.mountpoint == "/")|.path'

  local status=''
  status="$(find_devices "part" "mounted" | jq -cer "${query}")"

  if [[ $? -ne 0 ]]; then
    status='none'
  fi

  read -rep "[disks:${status}] " REPLY
}

# Shows a short status of the disks and filesystem.
# Arguments:
#  None
# Outputs:
#  A list of disks and filesystem data.
show_status () {
  local query='.[]|'
  query+='if .mountpoint '
  query+=' then select(.mountpoint|test("^(/|/home|/boot|/var|/log|/swap)$"))|.path'
  query+=' else "" end'

  local part_paths=''
  part_paths="$(find_devices "part" | jq -cer "${query}")" || return 1

  local query=''
  query+='Partition:    \(.path) [\(.mountpoint)]\n'
  query+='File System:  \(.fstype|ascii_upcase) v\(.fsver)\n'
  query+='Total Size:   \(.size)\n'
  query+='Free Space:   \(.fsavail)\n'
  query+='Used Space:   \(.fsused) [\(."fsuse%")]\n'

  local part_path=''
  while read -r part_path; do
    find_device "${part_path}" | jq -cer "\"${query}\"" || return 1
  done <<< "${part_paths}"

  swapon --noheadings --show | awk -F' ' '{
    printf "%-13s %s\n", "Swap:", $1
    printf "%-13s %s\n", "Type:", $2
    printf "%-13s %s\n", "Used:", $4"/"$3
  }' || return 1

  cat /proc/meminfo | grep -E "Swap.*" | awk -F':' '{
    gsub(/^[ \t]+/,"",$1)
    gsub(/[ \t]+$/,"",$1)
    gsub(/^[ \t]+/,"",$2)
    gsub(/[ \t]+$/,"",$2)
    printf "%-13s %s\n", $1":", $2
  }' || return 1
}

# Shows the data of the block device with the given path.
# Globals:
#  REPLY
# Arguments:
#  type: disk, part or rom
#  path: the path of a block device
# Outputs:
#  A long text of block device data.
show_device () {
  local type="${1}"
  local path="${2}"

  if [[ -z "${path}" ]]; then
    pick_device "${type}" || return $?
    [[ -n "${REPLY}" ]] && path="${REPLY}" || return 0
  fi

  if [[ ! -b "${path}" ]]; then
    echo "Invalid block device"
    return 2
  elif ! is_type_of "${path}" "${type}"; then
    echo "Invalid ${type} block device"
    return 2
  fi

  local parts=''
  parts+='\(.path) \(if .mountpoints != [null] then "\(.mountpoints) " else "" end)'
  parts+='\(.fstype|ascii_upcase) '
  parts+='\(if .label then .label else "" end)'
  parts="Parts:         \([.children[]|\"${parts}\"]|join(\"\n               \"))"

  local query=''
  query+='Name:          \(.name)\n'
  query+='Path:          \(.path)\n'
  query+='Type:          \(.type)\n'
  query+='\(if .fstype then "File System:   \(.fstype|ascii_upcase)\n" else "" end)'
  query+='\(if .fsver then "File Version:  \(.fsver)\n" else "" end)'
  query+='Removable:     \(.rm)\n'
  query+='ReadOnly:      \(.ro)\n'
  query+='\(if .tran then "Transfer:      \(.tran)\n" else "" end)'
  query+='HotPlug:       \(.hotplug)\n'
  query+='Size:          \(.size)'
  query+='\(if .fsavail then "\nFree Space:    \(.fsavail)" else "" end)'
  query+='\(if .fsused then "\nUsed Space:    \(.fsused) [\(."fsuse%")]" else "" end)'
  query+='\(if .label then "\nLabel:         \(.label)" else "" end)'
  query+='\(if .uuid then "\nUUID:          \(.uuid)" else "" end)'
  query+='\(if .vendor then "\nVendor:        \(.vendor)" else "" end)'
  query+='\(if .model then "\nModel:         \(.model)" else "" end)'
  query+='\(if .rev then "\nRevision:      \(.rev)" else "" end)'
  query+='\(if .serial then "\nSerial:        \(.serial)" else "" end)'
  query+='\(if .state then "\nState:         \(.state)" else "" end)'
  query+='\(if .mountpoint then "\nMount:         \(.mountpoint)" else "" end)'
  query+='\(if .mountpoints != [null] then "\nMounts:        \(.mountpoints)" else "" end)'
  query+="\(if .children then \"\n${parts}\" else \"\" end)"

  find_device "${path}" | jq -cer "\"${query}\""

  if [[ $? -ne 0 ]]; then
    echo "Failed to read block device data"
    return 2
  fi
}

# Scans the disk block device with the given path
# for possible SMART data.
# Arguments:
#  path: the path of a disk block device
# Outputs:
#  A long list of health and status data.
scan_disk () {
  local path="${1}"

  if [[ -z "${path}" ]]; then
    pick_device "disk" || return $?
    [[ -n "${REPLY}" ]] && path="${REPLY}" || return 0
  fi

  if [[ ! -b "${path}" ]]; then
    echo "Invalid block device"
    return 2
  elif ! is_type_of "${path}" "disk"; then
    echo "Invalid disk block device"
    return 2
  elif ! sudo smartctl -i "${path}" &> /dev/null; then
    echo "Unable to retrieve SMART data"
    return 2
  fi

  local model=''
  model+='if .model_name'
  model+=' then "\nModel:     \(.model_name) FW.\(.firmware_version)"'
  model+=' else ""'
  model+='end'

  local physicals=''
  physicals+='if .physical_block_size'
  physicals+=' then " P:\(.physical_block_size)"'
  physicals+=' else ""'
  physicals+='end'

  local factor=''
  factor+='if .form_factor.name'
  factor+=' then "\nFactor:    \(.form_factor.name) \(.rotation_rate) rpm"'
  factor+=' else ""'
  factor+='end'

  local sata=''
  sata+='if .sata_version.string'
  sata+=' then "\nSATA:      \(.sata_version.string) at \(.interface_speed.max.string)"'
  sata+=' else ""'
  sata+='end'

  local trim=''
  trim+='if .trim.supported'
  trim+=' then "\nTrim:      \(.trim.supported)"'
  trim+=' else ""'
  trim+='end'

  local passed=''
  passed+='if .smart_status.passed then "passed" else "failed" end'

  local temp=''
  temp+='if .temperature.current'
  temp+=' then "\nTemp:      \(.temperature.current)C"'
  temp+=' else ""'
  temp+='end'

  local attr=''
  attr+='Attr:      \(.id)\n'
  attr+='Name:      \(.name)\n'
  attr+='Raw:       \(.raw.value)\n'
  attr+='Values:    [V\(.value), W\(.worst), T\(.thresh)]\n'
  attr+='Failing:   \(.when_failed)'

  local attrs=''
  attrs+='.ata_smart_attributes.table as $a |'
  attrs+="if \$a then \"\n\n\([\$a[]|\"${attr}\"]|join(\"\n\n\"))\" else \"\" end"

  local query=''
  query+='Device:    \(.device.name)'
  query+="\(${model})"
  query+='\nProtocol:  \(.device.type|ascii_upcase) \(.device.protocol)'
  query+='\nCapacity:  \(.user_capacity.bytes) bytes'
  query+="\nBlocks:    L:\(.logical_block_size)\(${physicals})"
  query+="\(${factor})"
  query+="\(${trim})"
  query+="\(${sata})"
  query+='\nSMART:     \(.smart_support.enabled)'
  query+="\(${temp})"
  query+="\nHealth:    \(${passed})"
  query+="\(${attrs})"

  sudo smartctl -iHj "${path}" | jq -cer "\"${query}\""

  local code="$?"

  if [[ ${code} -ne 0 ]] && [[ ${code} -ne 24 ]]; then
    echo "Failed to read SMART data"
    return 2
  fi
}

# Shows the list of block devices of the given type.
# Arguments:
#  type: disk, part or rom
# Outputs:
#  A list of block devices.
list_devices () {
  local type="${1}"

  if [[ ! "${type}" =~ ^(disk|part|rom)$ ]]; then
    echo "Invalid block device type"
    return 2
  fi

  local devices=''
  devices="$(find_devices "${type}")"

  if [[ $? -ne 0 ]]; then
    echo "Unable to read ${type} block devices"
    return 2
  fi

  local len=0
  len="$(count "${devices}")" || return 1

  if [[ ${len} -eq 0 ]]; then
    echo "No ${type} block devices have found"
    return 0
  fi

  local query=''
  query+='Path:    \(.path)\n'
  query+='Type:    \(.type)\n'
  query+='Size:    \(.size)'
  query+='\(if .vendor then "\nVendor:  \(.vendor)" else "" end)'
  query+='\(if .model then "\nModel:   \(.model)" else "" end)'
  query+='\(if .label then "\nLabel:   \(.label)" else "" end)'
  query="[.[]|\"${query}\"]|join(\"\n\n\")"

  echo "${devices}" | jq -cer "${query}" || return 1
}

# Shows the list of shared folders of the given host.
# Globals:
#  REPLY
# Arguments:
#  host: the name or ip of a host.
# Outputs:
#  A list of shared folders.
list_shares () {
  local host="${1}"

  if [[ -z "${host}" ]]; then
    pick_host || return $?
    [[ -n "${REPLY}" ]] && host="${REPLY}" || return 0
  fi

  ask "Enter the username:" || return $?
  local username="${REPLY}"

  ask "Enter the workgroup [WORKGROUP]:" || return $?
  local workgroup="${REPLY:-"WORKGROUP"}"

  ask_password "Enter the password:" || return $?
  local password="${REPLY}"

  local folders=''
  folders="$(find_shared_folders "${host}" "${username}" "${workgroup}" "${password}")"

  if [[ $? -ne 0 ]]; then
    echo "Unable to retrieve shared folders"
    return 2
  fi

  local len=0
  len="$(count "${folders}")" || return 1

  if [[ ${len} -eq 0 ]]; then
    echo "No shared folders have found"
    return 0
  fi

  local query=''
  query+='Name:  \(.name)\n'
  query+='Type:  \(.type)'

  query="[.[]|\"${query}\"]|join(\"\n\n\")"

  echo "${folders}" | jq -cer "${query}" || return 1
}

# Shows the list of mounted devices and shared folders.
# Globals:
#  UID
# Arguments:
#  None
# Outputs:
#  A list of mounted devices and shared folders.
list_mounts () {
  local devices=''
  devices="$(find_devices "part,rom" "mounted")"

  if [[ $? -ne 0 ]]; then
    echo "Unable to read mounted block devices"
    return 2
  fi

  local folders=''
  folders="$(ls "/run/user/${UID}/gvfs" | awk -v id="${UID}" '{
    match($0, /server=(.*),share=(.*),/, a);
    print "\nDevice:  "a[1]"/"a[2]"\nPoints:  [/run/user/"id"/gvfs/"$0"]"
  }')"

  if [[ $? -ne 0 ]]; then
    echo "Unable to read mounted shared folders"
    return 2
  fi

  local len=0
  len="$(count "${devices}")" || return 1

  if [[ ${len} -eq 0 ]] && [[ -z "${folders}" ]]; then
    echo "No mounts have found"
    return 0
  fi

  if [[ ${len} -gt 0 ]]; then
    local query=''
    query+='Device:  \(.path)\n'
    query+='\(if .label then "Label:   \(.label)\n" else "" end)'
    query+='Points:  \(.mountpoints)'
    query="[.[]|\"${query}\"]|join(\"\n\n\")"

    echo "${devices}" | jq -cer "${query}" || return 1
  fi

  if [[ -n "${folders}" ]]; then
    echo "${folders}"
  fi
}

# Mounts the block device with the given path.
# Globals:
#  REPLY, HOME, USER
# Arguments:
#  path: the path of a block device
mount_device () {
  local path="${1}"

  if [[ -z "${path}" ]]; then
    pick_device 'part,rom' "unmounted" || return $?
    [[ -n "${REPLY}" ]] && path="${REPLY}" || return 0
  fi

  if [[ ! -b "${path}" ]]; then
    echo "Invalid block device"
    return 2
  elif is_type_of "${path}" "disk"; then
    echo "Not mountable block device"
    return 2
  elif grep -qs "${path} " /proc/mounts; then
    echo "Block device ${path} is already mounted"
    return 2
  fi
  
  udisksctl mount -b "${path}" &> /dev/null

  if [[ $? -ne 0 ]]; then
    echo "Failed to mount block device"
    return 2
  fi

  echo "Block device ${path} has been mounted"

  local local_home="${HOME}/mount/local"

  if [[ -d "/run/media/${USER}" ]] && [[ ! -L "${local_home}" ]]; then
    mkdir -p "${local_home}"
    ln -s "/run/media/${USER}" "${local_home}"
  fi
}

# Unmounts the block device with the given path.
# Globals:
#  REPLY, HOME, USER
# Arguments:
#  path: the path of a block device
unmount_device () {
  local path="${1}"

  if [[ -z "${path}" ]]; then
    pick_device 'part,rom' "mounted" || return $?
    [[ -n "${REPLY}" ]] && path="${REPLY}" || return 0
  fi

  if [[ ! -b "${path}" ]]; then
    echo "Invalid block device"
    return 2
  elif is_type_of "${path}" "disk"; then
    echo "Not mountable block device"
    return 2
  elif ! grep -qs "${path} " /proc/mounts; then
    echo "Block device ${path} is not mounted"
    return 2
  fi

  local mountpoint=''
  mountpoint="$(find_device "${path}" | jq -cer '.mountpoint')" || return 1

  if [[ "${mountpoint}" =~ ^(/|/home|/boot|/var|/log|/swap)$ ]]; then
    echo "Cannot unmount system partition ${mountpoint}"
    return 2
  fi

  unmount_partition "${path}"

  if [[ $? -ne 0 ]]; then
    echo "Failed to unmount block device"
    return 2
  fi

  echo "Block device ${path} has been unmounted"
}

# Formats the disk block device with the given path,
# creating a new partition table of a single primary partition.
# Globals:
#  REPLY
# Arguments:
#  path: the path of a block disk device
format_disk () {
  local path="${1}"

  if [[ -z "${path}" ]]; then
    pick_device "disk" || return $?
    [[ -n "${REPLY}" ]] && path="${REPLY}" || return 0
  fi

  if [[ ! -b "${path}" ]]; then
    echo "Invalid block device"
    return 2
  elif ! is_type_of "${path}" "disk"; then
    echo "Not a disk block device"
    return 2
  elif is_system_disk "${path}"; then
    echo "Cannot format the system disk"
    return 2
  fi

  ask "Enter the disk label:" ".+" || return $?
  local label="${REPLY}"

  local fs_type=''
  pick_fs_type || return $?
  [[ -n "${REPLY}" ]] && fs_type="${REPLY}" || return 0

  local model=''
  model="$(find_device "${path}" | jq -cr '"\(.vendor) \(.model) \(.size)"')" || return 1

  echo "ALL DATA in ${model} [${path}],"
  echo "will be irreversibly gone forever!"
  confirm "Do you really want to proceed?" || return $?
  [[ "${REPLY}" != "yes" ]] && return 0

  echo "Unmounting disk partitions..."
  unmount_partitions "${path}" || return 1

  echo "Cleaning disk partitions..."
  clean_partitions "${path}" &&
  echo "Partition table is ready" || return 1

  echo "Creating disk partition..."
  create_partition "${path}" "${fs_type}" "1Mib" "100%" &&
  echo "Primary partition created" || return 1

  echo "Formatting disk partition..."
  format_partition "${path}" "1" "${fs_type}" "${label}"

  if [[ $? -ne 0 ]]; then
    echo "Failed to format disk ${path}"
    return 2
  fi

  echo "disk ${path} has been formated"
}

# Ejects the disk block device with the given path.
# Globals:
#  REPLY
# Arguments:
#  path: the path of a block device
eject_disk () {
  local path="${1}"

  if [[ -z "${path}" ]]; then
    pick_device "disk" || return $?
    [[ -n "${REPLY}" ]] && path="${REPLY}" || return 0
  fi

  if [[ ! -b "${path}" ]]; then
    echo "Invalid block device"
    return 2
  elif is_system_disk "${path}"; then
    echo "Cannot eject a system disk"
    return 2
  elif ! is_type_of "${path}" "disk"; then
    echo "Not a disk block device"
    return 2
  elif ! is_removable_disk "${path}"; then
    echo "Not a removable disk block device"
    return 2
  fi

  echo "Unmounting disk partitions..."

  unmount_partitions "${path}"

  if [[ $? -ne 0 ]]; then
    echo "Failed to unmount disk partitions"
    return 2
  fi

  udisksctl power-off -b "${path}" &> /dev/null

  if [[ $? -ne 0 ]]; then
    echo "Unable to power off disk ${path}"
  fi

  echo "Disk ${path} power set to off"
}

# Creates a bootable archlinux installation drive.
# Globals:
#  REPLY, HOME, PWD
# Arguments:
#  path: the path of a block disk device
create_bootable () {
  local path="${1}"

  if [[ -z "${path}" ]]; then
    pick_device "disk" || return $?
    [[ -n "${REPLY}" ]] && path="${REPLY}" || return 0
  fi

  if [[ ! -b "${path}" ]]; then
    echo "Invalid block device"
    return 2
  elif is_system_disk "${path}"; then
    echo "Cannot create bootable on a system disk"
    return 2
  elif ! is_type_of "${path}" "disk"; then
    echo "Not a disk block device"
    return 2
  elif ! is_removable_disk "${path}"; then
    echo "Not a removable disk block device"
    return 2
  fi

  confirm "Do you want to download the latest iso?" || return $?
  [[ -z "${REPLY}" ]] && return 0

  local iso_file_path=''

  if [[ "${REPLY}" == "yes" ]]; then
    local hosts=''
    hosts+='{"key": "http://arch.phinau.de/iso/latest", "value": "Germany [phinau.de]"},'
    hosts+='{"key": "http://mirrors.acm.wpi.edu/archlinux/iso/latest", "value": "USA [acm.wpi.edu]"},'
    hosts+='{"key": "https://mirror.kamtv.ru/archlinux/iso/latest", "value": "Russia [kamtv.ru]"},'
    hosts+='{"key": "https://mirrors.bfsu.edu.cn/archlinux/iso/latest", "value": "China [bfsu.edu.cn]"},'
    hosts+='{"key": "https://mirror.vishmak.in/archlinux/iso/latest", "value": "India [vishmak.in]"},'
    hosts+='{"key": "http://archlinux.c3sl.ufpr.br/iso/latest", "value": "Brazil [c3sl.ufpr.br]"},'
    hosts+='{"key": "https://mirror.aarnet.edu.au/pub/archlinux/iso/latest", "value": "Australia [aarnet.edu.au]"}'
    hosts="[${hosts}]"

    local host=''
    pick_one "Select a mirror host close to you:" "${hosts}" "vertical" || return $?
    [[ -n "${REPLY}" ]] && host="${REPLY}" || return 0

    local file='archlinux-x86_64.iso'
    local output="${HOME}/downloads"

    local files=(
      "${host}/b2sums.txt"
      "${host}/${file}.sig"
    )

    if [[ -f "${output}/${file}" ]]; then
      echo "An existing iso file is found"
    else
      files+=("${host}/${file}")
    fi

    # Clean up signature and checksum files
    rm -f "${output}/b2sums.txt"
    rm -f "${output}/${file}.sig"

    download "${output}" "${files[@]}"

    if [[ $? -ne 0 ]]; then
      echo "Unable to download archlinux files"
      return 2
    fi

    sq --force wkd get pierre@archlinux.org -o "${output}/release-key.pgp"

    if [[ $? -ne 0 ]]; then
      echo "Unable to fetch the release key"
      return 2
    fi

    echo "Verifying the integrity of files..."

    cd ${output} &&
    b2sum --ignore-missing -c b2sums.txt &&
    sq verify --signer-file release-key.pgp --detached "${file}.sig" "${file}" 2>&1 | awk NF

    if [[ $? -ne 0 ]]; then
      echo "Failed to verify archlinux files"
      return 2
    fi

    echo "Files have been verified successfully"

    iso_file_path="${output}/${file}"
  else
    ask "Enter the path to the iso file:" "^/.+" || return $?
    iso_file_path="${REPLY}"
  fi

  if [[ ! -f "${iso_file_path}" ]]; then
    echo "Invalid or unknown archlinux iso file"
    return 2
  fi

  local model=''
  model="$(find_device "${path}" | jq -cr '"\(.vendor) \(.model) \(.size)"')" || return 1

  echo ""
  echo "ALL DATA in ${model} [${path}],"
  echo "will be irreversibly gone forever!"
  confirm "Do you really want to proceed?" || return $?
  [[ "${REPLY}" != "yes" ]] && return 0

  echo "Unmounting disk partitions..."
  unmount_partitions "${path}" || return 1

  echo "Cleaning disk partitions..."
  clean_partitions "${path}" &&
  echo "Partition table is ready" || return 1

  echo "Creating disk partition..."
  create_partition "${path}" "fat32" "1Mib" "100%" &&
  echo "Primary partition created" || return 1

  echo "Formatting the bootable disk..."
  format_partition "${path}" "1" "fat32" || return 1

  echo "Flashing installation files..."

  sudo dd "if=${iso_file_path}" "of=${path}" bs=4M conv=fsync oflag=direct status=progress

  if [[ $? -ne 0 ]]; then
    echo "Failed to flash installation files"
  fi

  echo "Bootable disk ${path} is ready"
}

# Mounts a shared folder of the given host.
# Globals:
#  REPLY, HOME, UID
# Arguments:
#  host: the name or ip of a host
mount_shared_folder () {
  local host="${1}"

  if [[ -z "${host}" ]]; then
    pick_host || return $?
    [[ -n "${REPLY}" ]] && host="${REPLY}" || return 0
  fi

  ask "Enter a shared folder:" || return $?
  local folder="${REPLY}"

  ask "Enter the username:" || return $?
  local username="${REPLY}"

  ask "Enter the workgroup [WORKGROUP]:" || return $?
  local workgroup="${REPLY:-"WORKGROUP"}"

  local uri="smb://${workgroup};${username}@${host}/${folder,,}"

  if gio mount -l | grep -q "${uri}"; then
    echo "Shared folder is already mounted"
    return 2
  fi

  gio mount "${uri}" 2> /dev/null
  
  if [[ $? -ne 0 ]]; then
    echo "Failed to mount shared folder"
    return 2
  fi

  echo "Shared folder ${folder} mounted"

  local remote_home="${HOME}/mount/remote"

  if [[ -d "/run/user/${UID}/gvfs" ]] && [[ ! -L "${remote_home}/gvfs" ]]; then
    mkdir -p "${remote_home}"
    ln -s "/run/user/${UID}/gvfs" "${remote_home}"
  fi
}

# Unmounts the shared folder with the given uri.
# Globals:
#  REPLY, UID
# Arguments:
#  uri: the uri of the shared folder
unmount_shared_folder () {
  local uri="${1}"

  if [[ -z "${uri}" ]]; then
    local uris=''
    uris="$(ls /run/user/${UID}/gvfs | awk '{
      match($0, /domain=(.*),server=(.*),share=(.*),user=(.*)/, a);
      key="smb://"a[1]";"a[4]"@"a[2]"/"a[3]
      print "{\"key\": \""key"\", \"value\":\""key"\"},"
    }')" || return 1

    # Remove the extra comma after the last element
    if [[ -n "${uris}" ]]; then
      uris="${uris::-1}"
    fi

    uris="[${uris}]"

    local len=0
    len="$(count "${uris}")" || return 1

    if [[ ${len} -eq 0 ]]; then
      echo "No mounted shared folders have been found"
      return 0
    fi

    pick_one "Select a shared folder:" "${uris}" "vertical" || return $?
    [[ -n "${REPLY}" ]] && uri="${REPLY}" || return 0
  fi

  if ! gio mount -l | grep -q "${uri}"; then
    echo "Shared folder is not mounted"
    return 2
  fi

  sync && gio mount -u "${uri}" 2> /dev/null
  
  if [[ $? -ne 0 ]]; then
    echo "Failed to umount shared folder"
    return 2
  fi

  echo "Shared folder ${uri} has been unmounted"
}

# Shows the help message.
# Arguments:
#  None
# Outputs:
#  A long help message.
show_help () {
  echo "Usage: COMMAND [OBJECT] [ARGUMENTS]..."

  echo -e "\nCOMMANDS"
  printf " %-28s %s\n" \
    "help" "Show this help message." \
    "" "" \
    "show status" "Show a report of the file system." \
    "" "" \
    "show disk [<path>]" "Show a disk block device." \
    "show partition [<path>]" "Show a partition block device." \
    "show rom [<path>]" "Show an optical drive block device." \
    "" "" \
    "list disks" "List all disk block devices." \
    "list partitions" "List all partition block devices." \
    "list roms" "List all optical drive block devices." \
    "list shares [<host>]" "List the shared folders of a host." \
    "list mounts" "List all mounting points." \
    "" "" \
    "mount device [<path>]" "Mount a partition or rom block device." \
    "unmount device [<path>]" "Unmount a partition or rom block device." \
    "mount share [<host>]" "Mount a shared folder." \
    "unmount share [<uri>]" "Unmount a shared folder." \
    "" "" \
    "format disk [<path>]" "Format a disk block device." \
    "eject disk [<path>]" "Eject a removable disk block device." \
    "scan disk [<path>]" "Scan a disk block device for SMART data." \
    "" "" \
    "create bootable [<path>]" "Create a bootable archlinux installation drive."
}

loop () {
  clear

  while true; do
    prompt && history -s "${REPLY}"

    set -f
    set_separator "line"
    local cmd=($(xargs -n1 <<< "${REPLY}"))
    restore_separator && set +f

    if [[ "${cmd[0]}" == "help" ]]; then
      show_help
      continue
    elif [[ "${cmd[0]}" == "clear" ]]; then
      clear
      continue
    elif [[ "${cmd[0]}" == "quit" ]]; then
      break
    elif [[ -z "${cmd[0]}" ]]; then
      continue
    fi

    case "${cmd[0]}" in
      "list")
        case "${cmd[1]}" in
          "disks") list_devices "disk";;
          "partitions") list_devices "part";;
          "roms") list_devices "rom";;
          "shares") list_shares "${cmd[2]}";;
          "mounts") list_mounts;;
          *) echo "Invalid or unknown command";;
        esac;;
      "show")
        case "${cmd[1]}" in
          "status") show_status;;
          "disk") show_device "disk" "${cmd[2]}";;
          "partition") show_device "part" "${cmd[2]}";;
          "rom") show_device "rom" "${cmd[2]}";;
          *) echo "Invalid or unknown command";;
        esac;;
      "mount")
        case "${cmd[1]}" in
          "device") mount_device "${cmd[2]}";;
          "share") mount_shared_folder "${cmd[2]}" "${cmd[3]}";;
          *) echo "Invalid or unknown command";;
        esac;;
      "unmount")
        case "${cmd[1]}" in
          "device") unmount_device "${cmd[2]}";;
          "share") unmount_shared_folder "${cmd[2]}";;
          *) echo "Invalid or unknown command";;
        esac;;
      "format")
        case "${cmd[1]}" in
          "disk") format_disk "${cmd[2]}";;
          *) echo "Invalid or unknown command";;
        esac;;
      "eject")
        case "${cmd[1]}" in
          "disk") eject_disk "${cmd[2]}";;
          *) echo "Invalid or unknown command";;
        esac;;
      "scan")
        case "${cmd[1]}" in
          "disk") scan_disk "${cmd[2]}";;
          *) echo "Invalid or unknown command";;
        esac;;
      "create")
        case "${cmd[1]}" in
          "bootable") create_bootable "${cmd[2]}";;
          *) echo "Invalid or unknown command";;
        esac;;
      *) echo "Invalid or unknown command";; 
    esac

    if [[ $? -eq 1 ]]; then
      echo "An unknown error has occurred"
    fi
  done

  clear
}

loop