#!/usr/bin/env bash

source /opt/stack/utils

require "udisks2"
require "glib2"
require "nmap"
require "smbclient"
require "smartmontools"

prompt () {
  local YELLOW=$'\e[0;33m'
  local RS=$'\e[m'
  local FG=$YELLOW

  local DEVICES_COUNTER=$(lsblk -dn | wc -l)

  read -rep "[disks:$FG${DEVICES_COUNTER}$RS] " REPLY
}

list_devices () {
  lsblk -o NAME,PATH,TYPE,RM,SIZE,FSTYPE,LABEL,VENDOR,MODEL
}

list_hosts () {
  local GATEWAY=$(ip route get 1.1.1.1 | awk '/via/{print $3}' | head -n 1)
  local CIDR=$(echo "$GATEWAY" | sed -r 's/(\.[0-9]{1,3}$)/.0\/24/')
  local HOSTS=($(nmap -n -sn "$CIDR" -oG - | awk '/Up$/{print $2}'))
  local LEN=${#HOSTS[@]}

  if [ $LEN -eq 0 ]; then
    echo "No local hosts have been discovered"
    return
  fi

  local FRMT="%-15s\t%s\n"
  printf "$FRMT" "HOST" "NAME"

  local INDEX=0
  while [ $INDEX -lt $LEN ]; do
    nmap "${HOSTS[$INDEX]}" -oG - |
      awk -v f=$FRMT '/Host/{printf f, $2, $3}' |
      head -n 1 |
      tr -d '()'

    INDEX=$((INDEX + 1))
  done
}

list_shares () {
  local HOST=$1
  local USERNAME=$2
  local WORKGROUP=${3:-"WORKGROUP"}

  if [ -z "$HOST" ]; then
    echo "Missing host argument"
    return 1
  fi

  if [ -z "$USERNAME" ]; then
    echo "Missing username argument"
    return 1
  fi

  smbclient -L "$HOST" -U "$USERNAME" -W "$WORKGROUP"
}

list_mounts () {
  local FRMT="%-22s\t%s\n"
  printf "$FRMT" "NAME" "MOUNT POINT"

  lsblk -n -o PATH,MOUNTPOINTS |
    awk -v f=$FRMT '{if ($2 != "") {printf f, $1, $2}}'

  ls /run/user/1000/gvfs |
    awk -v id=$UID -v f=$FRMT 'match($0, /server=(.*),share=(.*)/, a) \
      {printf f, a[1]"/"a[2], "/run/user/"id"/gvfs/"$0}'
}

show_device () {
  local DEVICE=$1

  if [ ! -b "$DEVICE" ]; then
    echo "Invalid block device: $DEVICE"
    return 1
  fi

  local FIELDS=(
    "NAME;Device Name"
    "PATH;Device Path"
    "LABEL;Label"
    "UUID;ID Number"
    "VENDOR;Vendor Name"
    "MODEL;Model Name"
    "REV;Revision"
    "SERIAL;Serial Number"
    "TYPE;Device Type"
    "TRAN;Transfer"
    "RM;Removable"
    "RO;Read Only"
    "HOTPLUG;Hot Plugable"
    "ln"
    "FSTYPE;File Type"
    "FSVER;Version"
    "SIZE;Total Size"
    "FSAVAIL;Free Space"
    "FSUSED;Used Space"
    "FSUSE%;Usage"
    "MOUNTPOINTS;Mount Points"
    "STATE;Device State"
    )
  
  local INDEX=0
  while [ $INDEX -lt ${#FIELDS[@]} ]; do
    local FIELD=${FIELDS[$INDEX]}

    if [ "$FIELD" = "ln" ]; then
      echo
      INDEX=$((INDEX + 1))
      continue
    fi

    local KEY=$(echo "$FIELD" | cut -d ";" -f 1)
    local LABEL=$(echo "$FIELD" | cut -d ";" -f 2)

    local VALUE=$(sudo lsblk -dP -o "$KEY" "$DEVICE" | sed "s/^$KEY=\"\(.*\)\"$/\1/")

    [ -n "$VALUE" ] &&
      printf "%-18s %s\n" "$LABEL:" "$VALUE"

    INDEX=$((INDEX + 1))
  done

  if sudo smartctl -i "$DEVICE" &> /dev/null; then
    echo
    sudo smartctl -i "$DEVICE" | tail -n +5
    sudo smartctl -H "$DEVICE" | tail -n +5
  fi
}

mount_device () {
  local DEVICE="$1"

  if [ ! -b "$DEVICE" ]; then
    echo "Invalid block device: $DEVICE"
    return 1
  elif grep -qs "$DEVICE " /proc/mounts; then
    echo "Block device $DEVICE is already mounted"
    return 1
  fi
  
  udisksctl mount -b "$DEVICE" &&
    echo "Block device $DEVICE mounted successfully" ||
    echo "Failed to mount block device $DEVICE"

  if [ -d "/run/media/$USER" ] && [ ! -L "$HOME/mount/local" ]; then
    mkdir -p "$HOME/mount/local"
    ln -s "/run/media/$USER" "$HOME/mount/local"
  fi
}

unmount_device () {
  local DEVICE="$1"

  if [ ! -b "$DEVICE" ]; then
    echo "Invalid block device: $DEVICE"
    return 1
  elif ! grep -qs "$DEVICE " /proc/mounts; then
    echo "Block device $DEVICE is not mounted"
    return 1
  fi

  sync &&
  udisksctl unmount -b "$DEVICE"

  if [[ "$?" -eq 0 ]]; then
    echo "Block device $DEVICE unmounted successfully"

    udisksctl power-off -b "$DEVICE" &&
      echo "Device power set to off" ||
      echo "Unable to power off the device"
  else
    echo "Failed to unmount block device $DEVICE"
  fi
}

mount_host () {
  local HOST=$1
  local SHARE=$2

  if [ -z "$HOST" ]; then
    echo "Missing host argument"
    return 1
  fi

  if [ -z "$SHARE" ]; then
    echo "Missing shared folder argument"
    return 1
  fi

  local URI="smb://$HOST/$SHARE"

  if gio mount -l | grep -q "$URI"; then
    echo "Host $URI is already mounted"
    return 1
  fi

  gio mount "$URI" &&
    echo "Host $URI mounted successfully" ||
    echo "Failed to mount host: $URI"

  if [ -d "/run/user/${UID}/gvfs" ] && [ ! -L "$HOME/mount/remote/gvfs" ]; then
    mkdir -p "$HOME/mount/remote"
    ln -s "/run/user/${UID}/gvfs" "$HOME/mount/remote"
  fi
}

unmount_host () {
  local HOST=$1
  local SHARE=$2

  if [ -z "$HOST" ]; then
    echo "Missing host argument"
    return 1
  fi

  if [ -z "$SHARE" ]; then
    echo "Missing shared folder argument"
    return 1
  fi

  local URI="smb://$HOST/$SHARE"

  if ! gio mount -l | grep -q "$URI"; then
    echo "Host $URI is not mounted"
    return 1
  fi

  sync &&
  gio mount -u "$URI" &&
    echo "Host $URI unmounted successfully" ||
    echo "Failed to umount host $URI"
}

help () {
  local FRM=" %-35s\t%s\n"

  echo "Usage: COMMAND [OBJECT] [ARGUMENTS]..."

  echo -e "\nCOMMANDS"
  printf "$FRM" \
    "help" "Show this help message." \
    "show device <path>" "Show details of the block device with the given path." \
    "" "" \
    "list devices" "List all the block devices of the system." \
    "list hosts" "Discover all the available hosts at the local network." \
    "list shares <ip> <username> [<group>]" "Fetch any shared folder on the given host." \
    "list mounts" "List all the current mounted devices and shared folders." \
    "" "" \
    "mount device <path>" "Mount a block device with the given path." \
    "mount host <ip> <share>" "Mount a shared folder on host with the given ip or domain." \
    "unmount device <path>" "Unmount a block device with the given path." \
    "unmount host <ip> <share>" "Unmount a shared folder on host with the given ip or domain."

  echo -e "\nOBJECTS"
  printf "$FRM" \
    "device" "A block device." \
    "host" "A local network host sharing folders."
}

loop () {
  clear

  while true; do
    prompt && history -s "$REPLY"

    set -f
    local OLD_IFS=$IFS && IFS=$'\n'
    local CMD=($(xargs -n1 <<< "$REPLY"))
    IFS=$OLD_IFS && set +f

    if [ "${CMD[0]}" = "help" ]; then
      help
      continue
    elif [ "${CMD[0]}" = "clear" ]; then
      clear
      continue
    elif [ "${CMD[0]}" = "quit" ]; then
      break
    elif [ -z "${CMD[0]}" ]; then
      continue
    fi

    case "${CMD[0]}" in
      "list")
        case "${CMD[1]}" in
          "devices") list_devices;;
          "hosts") list_hosts;;
          "shares") list_shares "${CMD[2]}" "${CMD[3]}" "${CMD[4]}";;
          "mounts") list_mounts;;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      "show")
        case "${CMD[1]}" in
          "device") show_device "${CMD[2]}";;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      "mount")
        case "${CMD[1]}" in
          "device") mount_device "${CMD[2]}";;
          "host") mount_host "${CMD[2]}" "${CMD[3]}";;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      "unmount")
        case "${CMD[1]}" in
          "device") unmount_device "${CMD[2]}";;
          "host") unmount_host "${CMD[2]}" "${CMD[3]}";;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      *) echo "Unknown or invalid command: '$REPLY'";; 
    esac
  done

  clear
}

loop
