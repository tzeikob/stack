#!/usr/bin/env bash

source /opt/stack/utils

require "networkmanager"
require "wpa_supplicant"
require "wireless_tools"

prompt () {
  local NETWORKING=$(nmcli networking)
  local STATUS=$(nmcli -g STATE general status)

  local Y=$'\e[0;33m'
  local G=$'\e[0;32m'
  local R=$'\e[0;31m'
  local R=$'\e[m'

  local C=$Y
  if [ "$NETWORKING" = "enabled" ]; then
    if [[ "$STATUS" =~ connected ]]; then
      C=$G
    elif [[ "$STATUS" =~ disconnected ]]; then
      C=$R
    fi
  fi

  read -rep "[network:$C$STATUS$R] " REPLY
}

validate () {
  local OBJECT=$1
  local NAME=$2

  if [[ ! "$OBJECT" =~ ^(device|connection)$ ]]; then
    echo "Missing or invalid object argument: $OBJECT"
    return 1
  fi

  if [ "$OBJECT" = "device" ]; then
    nmcli -f DEVICE device | tail -n +2 | grep -wq "$NAME" ||
      (echo "Invalid or unknown device: $NAME" && return 1)
  elif [ "$OBJECT" = "connection" ]; then
    nmcli -f NAME connection | tail -n +2 | grep -wq "$NAME" ||
      (echo "Invalid or unknown connection: $NAME" && return 1)
  fi
}

show_status () {
  nmcli --colors no general status

  local OLD_IFS=$IFS && IFS=","

  local CONNECTIONS=($(
    nmcli -g DEVICE,TYPE,STATE,CONNECTION device |
      trim |
      awk -v FS=':' -v OFS=':' '{if ($3 == "connected" ) {print $4","}}' |
      no_breaks
  ))

  IFS=$OLD_IFS

  for CONNECTION in "${CONNECTIONS[@]}"; do
    echo
    nmcli --colors no --fields \
      "connection.interface-name, \
      connection.id, \
      connection.uuid, \
      connection.type, \
      connection.autoconnect, \
      802-11-wireless.ssid, \
      802-11-wireless.channel, \
      802-11-wireless.seen-bssids, \
      802-11-wireless-security.key-mgmt, \
      GENERAL.STATE, \
      IP4.ADDRESS, \
      IP4.GATEWAY, \
      IP4.ROUTE, \
      IP4.DNS, \
      IP6.ADDRESS, \
      IP6.GATEWAY, \
      IP6.ROUTE" \
      connection show "$CONNECTION"
  done
}

show_device () {
  local NAME=$1

  validate "device" "$NAME" || return 1

  nmcli --colors no device show "$NAME"
}

show_connection () {
  local NAME=$1

  validate "connection" "$NAME" || return 1

  nmcli --colors no --fields \
    "connection.interface-name, \
    connection.id, \
    connection.uuid, \
    connection.type, \
    connection.autoconnect, \
    802-11-wireless.ssid, \
    802-11-wireless.channel, \
    802-11-wireless.seen-bssids, \
    802-11-wireless-security.key-mgmt, \
    GENERAL.STATE, \
    IP4.ADDRESS, \
    IP4.GATEWAY, \
    IP4.ROUTE, \
    IP4.DNS, \
    IP6.ADDRESS, \
    IP6.GATEWAY, \
    IP6.ROUTE" \
    connection show "$NAME"
}

list_devices () {
  local TYPE=$1
  
  if [ -z "$TYPE" ]; then
    nmcli --colors no device
  else
    nmcli device | awk -v t=$TYPE '{if ($2 == t || $2 == "TYPE") {print}}'
  fi
}

list_connections () {
  local TYPE=$1

  if [ -z "$TYPE" ]; then
    nmcli --colors no connection
  else
    nmcli --color no connection | awk -v t=$TYPE '{if ($3 == t || $3 == "TYPE") {print}}'
  fi
}

scan () {
  local OLD_IFS=$IFS && IFS=","

  local NETWORKS=($(
    nmcli -f SIGNAL,SSID,IN-USE -t device wifi list |
      trim |
      awk -F: '{if ($3 == "*") {print "["$1"] \033[32m"$2"\033[0m,"} \
        else {print "["$1"] \033[35m"$2"\033[0m,"}}' |
      no_breaks
  ))

  IFS=$OLD_IFS

  print 3 40 "${NETWORKS[@]}"
}

up () {
  local OBJECT=$1
  local NAME=$2

  validate "$OBJECT" "$NAME" || return 1

  if [ "$OBJECT" = "device" ]; then
    nmcli device connect "$NAME" && sleep 6
  elif [ "$OBJECT" = "connection" ]; then
    nmcli connection up "$NAME" && sleep 6
  fi
}

down () {
  local OBJECT=$1
  local NAME=$2

  validate "$OBJECT" "$NAME" || return 1

  if [ "$OBJECT" = "device" ]; then
    nmcli device disconnect "$NAME" && sleep 6
  elif [ "$OBJECT" = "connection" ]; then
    nmcli connection down "$NAME" && sleep 6
  fi
}

power () {
  local OBJECT=$1
  local STATUS=$2

  if [[ ! "$OBJECT" =~ ^(network|wifi)$ ]]; then
    echo "Missing or invalid object argument: $OBJECT"
    return 1
  fi

  if [[ ! "$STATUS" =~ ^(on|off)$ ]]; then
    echo "Missing or invalid status argument: $STATUS"
    return 1
  fi

  if [ "$OBJECT" = "network" ]; then
    nmcli networking "$STATUS" &&
      sleep 6 &&
      echo "Network set to $STATUS status" ||
      echo "Unable to power $STATUS the network"
  elif [ "$OBJECT" = "wifi" ]; then
    nmcli radio wifi "$STATUS" &&
      sleep 6 &&
      echo "Wifi set to $STATUS status" ||
      echo "Unable to power $STATUS the wifi"
  fi
}

delete () {
  local OBJECT=$1
  local NAME=$2

  validate "$OBJECT" "$NAME" || return 1

  if [ "$OBJECT" = "device" ]; then
    nmcli device delete "$NAME" && sleep 6
  elif [ "$OBJECT" = "connection" ]; then
    nmcli connection delete "$NAME" && sleep 6
  fi
}

connect () {
  local SSID=$1
  local SECRET_KEY=$2

  if [ -z "$SSID" ]; then
    echo "Missing SSID argument"
    return 1
  fi

  if [ -z "$SECRET_KEY" ]; then
    echo "Missing secret key argument"
    return 1
  fi

  nmcli device wifi connect "$SSID" password "$SECRET_KEY" hidden yes &&
   sleep 6
}

help () {
  echo "Usage: COMMAND [OBJECT] [ARGUMENTS]..."

  echo -e "\nOBJECTS"
  printf " %-35s\t%s\n" \
      "device" "An object to handle network devices" \
      "connection" "An object to handle network connections" \
      "network" "Refers to the networking setup of your system" \
      "wifi" "Refers to the WiFi device of your system"

  echo -e "\nCOMMANDS"
  printf " %-35s\t%s\n" \
    "show status" "Show the current status of system's networking" \
    "show device|connection <name>" "Show the status of the device or connection" \
    "list devices [<type>]" "List network devices of the given type, default is all" \
    "list connections [<type>]" "List network connections of the given type, default is all" \
    "scan" "Scan for wireless networks in your area" \
    "power network on|off" "Power on/off the system networking" \
    "power wifi on|off" "Power on/off the wifi" \
    "connect <ssid> <secret-key>" "Connect to a wireless network with the given ssid" \
    "up device|connection <name>" "Get the given device or connection up" \
    "down device|connection <name>" "Get the given device or connection down" \
    "delete device|connection <name>" "Delete the given device or connection" \
    "help" "Show this help message"
}

loop () {
  clear

  while true; do
    prompt

    history -s "$REPLY"
    local CMD=($(echo "$REPLY" | tr ':' '\n'))

    if [ "${CMD[0]}" = "help" ]; then
      help
      continue
    elif [ "${CMD[0]}" = "clear" ]; then
      clear
      continue
    elif [ "${CMD[0]}" = "quit" ]; then
      break
    elif [ -z "${CMD[0]}" ]; then
      continue
    fi

    case "${CMD[0]}" in
      "show")
        case "${CMD[1]}" in
          "status") show_status;;
          "device") show_device "${CMD[2]}";;
          "connection") show_connection "${CMD[2]}";;
          *) echo "Unknown or invalid command: $REPLY";;
      "list")
        case "${CMD[1]}" in
          "devices") list_devices "${CMD[2]}";;
          "connections") list_connections "${CMD[2]}";;
          *) echo "Unknown or invalid command: $REPLY";;
        esac;;
      "scan") scan;;
      "power") power "${CMD[1]}" "${CMD[2]}";;
      "connect") connect "${CMD[1]}" "${CMD[2]}";; 
      "up") up "${CMD[1]}" "${CMD[2]}";;
      "down") down "${CMD[1]}" "${CMD[2]}";;
      "delete") delete "${CMD[1]}" "${CMD[2]}";;
      *) echo "Unknown or invalid command: $REPLY";; 
    esac
  done

  clear
}

loop
