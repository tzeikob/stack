#!/usr/bin/env bash

source /opt/stack/utils

require "networkmanager"
require "wpa_supplicant"
require "wireless_tools"

prompt () {
  local NETWORKING=$(nmcli networking)
  local STATUS=$(nmcli -g STATE general status)

  local YELLOW=$'\e[0;33m'
  local GREEN=$'\e[0;32m'
  local RED=$'\e[0;31m'
  local RS=$'\e[m'

  local FG=$YELLOW
  if [ "$NETWORKING" = "enabled" ]; then
    if [[ "$STATUS" =~ disconnected ]]; then
      FG=$RED
    elif [[ "$STATUS" =~ connected ]]; then
      FG=$GREEN
    fi
  fi

  local DEVICES=($(nmcli device | awk '{\
    if ( $3 == "connected" && ($2 == "ethernet" || $2 == "wifi")) {print $2":"$1}'}))
  local LEN=${#DEVICES[@]}
  
  local INTERFACE=""
  if [ $LEN -gt 0 ]; then
    INTERFACE="${DEVICES[0]}"
    
    local INDEX=0
    while [ $INDEX -lt $LEN ]; do
      local DEVICE=${DEVICES[$INDEX]}

      [[ "$DEVICE" =~ ^ethernet ]] &&
        INTERFACE="$DEVICE" && break
      
      INDEX=$((INDEX + 1))
    done
  fi

  [ -n "$INTERFACE" ] &&
    STATUS=$(echo "$INTERFACE" | cut -d ":" -f 2)

  read -rep "[networks:$FG${STATUS}$RS] " REPLY
}

wait_progress () {
  local STATUS=$(nmcli -g STATE,CONNECTIVITY general status)
  local SECS_STILL=0

  while true; do
    [ $SECS_STILL -lt 3 ] && sleep 1 || break

    local NEW_STATUS=$(nmcli -g STATE,CONNECTIVITY general status)

    if [ ! "$STATUS" = "$NEW_STATUS" ]; then
      STATUS=$NEW_STATUS
      echo "Network state set to $STATUS"
    else
      SECS_STILL=$((SECS_STILL + 1))
    fi
  done
}

validate () {
  local OBJECT=$1
  local NAME=$2

  if [[ ! "$OBJECT" =~ ^(device|connection)$ ]]; then
    echo "Missing or invalid object argument: $OBJECT"
    return 1
  fi

  if [ "$OBJECT" = "device" ]; then
    nmcli -f DEVICE device | tail -n +2 | grep -wq "$NAME" ||
      (echo "Invalid or unknown device: $NAME" && return 1)
  elif [ "$OBJECT" = "connection" ]; then
    nmcli -f NAME connection | tail -n +2 | grep -wq "$NAME" ||
      (echo "Invalid or unknown connection: $NAME" && return 1)
  fi
}

show_status () {
  nmcli --colors no general status

  local OLD_IFS=$IFS && IFS=","

  local CONNECTIONS=($(
    nmcli -g DEVICE,TYPE,STATE,CONNECTION device |
      trim |
      awk -v FS=':' -v OFS=':' '{if ($3 == "connected" ) {print $4","}}' |
      no_breaks
  ))

  IFS=$OLD_IFS

  for CONNECTION in "${CONNECTIONS[@]}"; do
    echo
    nmcli --colors no --fields \
      "connection.interface-name, \
      connection.id, \
      connection.uuid, \
      connection.type, \
      connection.autoconnect, \
      802-11-wireless.ssid, \
      802-11-wireless.channel, \
      802-11-wireless.seen-bssids, \
      802-11-wireless-security.key-mgmt, \
      GENERAL.STATE, \
      IP4.ADDRESS, \
      IP4.GATEWAY, \
      IP4.ROUTE, \
      IP4.DNS, \
      IP6.ADDRESS, \
      IP6.GATEWAY, \
      IP6.ROUTE" \
      connection show "$CONNECTION"
  done
}

show_device () {
  local NAME=$1

  validate "device" "$NAME" || return 1

  nmcli --colors no device show "$NAME"
}

show_connection () {
  local NAME=$1

  validate "connection" "$NAME" || return 1

  nmcli --colors no --fields \
    "connection.interface-name, \
    connection.id, \
    connection.uuid, \
    connection.type, \
    connection.autoconnect, \
    802-11-wireless.ssid, \
    802-11-wireless.channel, \
    802-11-wireless.seen-bssids, \
    802-11-wireless-security.key-mgmt, \
    GENERAL.STATE, \
    IP4.ADDRESS, \
    IP4.GATEWAY, \
    IP4.ROUTE, \
    IP4.DNS, \
    IP6.ADDRESS, \
    IP6.GATEWAY, \
    IP6.ROUTE" \
    connection show "$NAME"
}

list_devices () {
  local TYPE=$1
  
  if [ -z "$TYPE" ]; then
    nmcli --colors no device
  else
    nmcli device | awk -v t=$TYPE '{if ($2 == t || $2 == "TYPE") {print}}'
  fi
}

list_connections () {
  local TYPE=$1

  if [ -z "$TYPE" ]; then
    nmcli --colors no connection
  else
    nmcli --color no connection | awk -v t=$TYPE '{if ($3 == t || $3 == "TYPE") {print}}'
  fi
}

scan () {
  local OLD_IFS=$IFS && IFS=","

  local NETWORKS=($(
    nmcli -f SIGNAL,SSID,IN-USE -t device wifi list |
      trim |
      awk -F: '{ \
        if ($3 == "*") {printf "[%03d] %s", $1, "\033[32m"$2"\033[0m,"} \
        else {printf "[%03d] %s", $1, "\033[35m"$2"\033[0m,"}}' |
      no_breaks
  ))

  IFS=$OLD_IFS

  print 3 45 "${NETWORKS[@]}"
}

up () {
  local OBJECT=$1
  local NAME=$2

  validate "$OBJECT" "$NAME" || return 1

  if [ "$OBJECT" = "device" ]; then
    nmcli device connect "$NAME" && wait_progress
  elif [ "$OBJECT" = "connection" ]; then
    nmcli connection up "$NAME" && wait_progress
  fi
}

down () {
  local OBJECT=$1
  local NAME=$2

  validate "$OBJECT" "$NAME" || return 1

  if [ "$OBJECT" = "device" ]; then
    nmcli device disconnect "$NAME" && wait_progress
  elif [ "$OBJECT" = "connection" ]; then
    nmcli connection down "$NAME" && wait_progress
  fi
}

power_network () {
  local STATUS=$1

  if [[ ! "$STATUS" =~ ^(on|off)$ ]]; then
    echo "Missing or invalid status argument: $STATUS"
    return 1
  fi

  nmcli networking "$STATUS" && wait_progress &&
    echo "Network has been powered $STATUS" ||
    echo "Something went wrong powering network $STATUS"
}

power_wifi () {
  local STATUS=$1

  if [[ ! "$STATUS" =~ ^(on|off)$ ]]; then
    echo "Missing or invalid status argument: $STATUS"
    return 1
  fi

  nmcli radio wifi "$STATUS" && wait_progress &&
    echo "Wifi has been powered $STATUS" ||
    echo "Something went wrong powering wifi $STATUS"
}

delete () {
  local OBJECT=$1
  local NAME=$2

  validate "$OBJECT" "$NAME" || return 1

  if [ "$OBJECT" = "device" ]; then
    nmcli device delete "$NAME" && wait_progress
  elif [ "$OBJECT" = "connection" ]; then
    nmcli connection delete "$NAME" && wait_progress
  fi
}

connect () {
  local SSID=$1
  local SECRET_KEY=$2

  if [ -z "$SSID" ]; then
    echo "Missing SSID argument"
    return 1
  fi

  if [ -z "$SECRET_KEY" ]; then
    echo "Missing secret key argument"
    return 1
  fi

  nmcli device wifi connect "$SSID" password "$SECRET_KEY" hidden yes &&
   wait_progress
}

help () {
  local FRM=" %-30s\t%s\n"

  echo "Usage: COMMAND [OBJECT] [ARGUMENTS]..."

  echo -e "\nCOMMANDS"
  printf "$FRM" \
    "help" "Show this help message." \
    "show status" "Show the current status of system's networking." \
    "show device <name>" "Show the status of the device." \
    "show connection <name>" "Show the status of the connection." \
    "" "" \
    "list devices [<type>]" "List the network devices of the system." \
    "list connections [<type>]" "List network connections." \
    "scan" "Scan for wireless networks in your area." \
    "" "" \
    "connect <ssid> <secret-key>" "Connect to a wireless network with the given ssid." \
    "up device <name>" "Get the given device up." \
    "up connection <name>" "Get the given connection up." \
    "down device <name>" "Get the given device down." \
    "down connection <name>" "Get the given connection down." \
    "" "" \
    "power network on|off" "Power on/off the system networking." \
    "power wifi on|off" "Power on/off the wifi device." \
    "delete device <name>" "Delete the given device." \
    "delete connection <name>" "Delete the given connection."

  echo -e "\nOBJECTS"
  printf "$FRM" \
    "status" "The status of the system's networking." \
    "device" "A network device." \
    "connection" "A network connection." \
    "network" "The system's networking." \
    "wifi" "The wireless network device."
}

loop () {
  clear

  while true; do
    prompt && history -s "$REPLY"

    set -f
    local OLD_IFS=$IFS && IFS=$'\n'
    local CMD=($(xargs -n1 <<< "$REPLY"))
    IFS=$OLD_IFS && set +f

    if [ "${CMD[0]}" = "help" ]; then
      help
      continue
    elif [ "${CMD[0]}" = "clear" ]; then
      clear
      continue
    elif [ "${CMD[0]}" = "quit" ]; then
      break
    elif [ -z "${CMD[0]}" ]; then
      continue
    fi

    case "${CMD[0]}" in
      "show")
        case "${CMD[1]}" in
          "status") show_status;;
          "device") show_device "${CMD[2]}";;
          "connection") show_connection "${CMD[2]}";;
          *) echo "Unknown or invalid command: $REPLY";;
        esac;;
      "list")
        case "${CMD[1]}" in
          "devices") list_devices "${CMD[2]}";;
          "connections") list_connections "${CMD[2]}";;
          *) echo "Unknown or invalid command: $REPLY";;
        esac;;
      "scan") scan;;
      "power")
        case "${CMD[1]}" in
          "network") power_network "${CMD[2]}";;
          "wifi") power_wifi "${CMD[2]}";;
          *) echo "Unknown or invalid command: $REPLY";;
        esac;;
      "connect") connect "${CMD[1]}" "${CMD[2]}";; 
      "up") up "${CMD[1]}" "${CMD[2]}";;
      "down") down "${CMD[1]}" "${CMD[2]}";;
      "delete") delete "${CMD[1]}" "${CMD[2]}";;
      *) echo "Unknown or invalid command: $REPLY";; 
    esac
  done

  clear
}

loop
