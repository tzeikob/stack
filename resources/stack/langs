#!/bin/bash

set -o pipefail
source /opt/stack/utils

# Shows a prompt status and asks user to enter the
# next command, which is kept in the global var REPLY.
# Globals:
#  REPLY
# Arguments:
#  None
# Outputs:
#  A minimal prompt status line.
prompt () {
  local status=''
  status="$(localectl status | awk -F= '/System Locale/{print $2}')"

  if [[ $? -ne 0 ]]; then
    status='none'
  fi

  read -rep "[langs:${status}] " REPLY
}

# Shows the current status of languages and locales.
# Arguments:
#  None
# Outputs:
#  A verbose list of text data.
show_status () {
  localectl status | awk -F':' '{
    i=index($0,":")
    if (i > 0) {
      l=$1
      gsub(/^[ \t]+|[ \t]+$/, "", l)
      split(l,a," ")
      printf "%-8s %s\n", a[2]":", substr($0, i+1)
    } else {
      gsub(/ /,"")
      printf "%-8s %s\n", "", " "$0
    }
  }'

  local locales=''
  locales="$(locale -a | awk '{ORS=", ";} {print $0}')" || return 1

  # Remove extra comma after the last locale element
  if [[ -n "${locales}" ]]; then
    locales="${locales::-2}"
  fi

  echo "Locales:  ${locales}"
}

# Sets the keymap of the console keyboard to the
# given keymap.
# Globals:
#  REPLY
# Arguments:
#  map: the name of a keymap
set_keymap () {
  local map="${1}"

  if [[ -z "${map}" ]]; then
    local maps=''
    maps="$(localectl --no-pager list-keymaps | awk '{
      print "{\"key\":\""$0"\",\"value\":\""$0"\"},"
    }')" || return 1
    maps="[${maps::-1}]"

    pick_one "Select a keymap:" "${maps}" "vertical" || return $?
    [[ -n "${REPLY}" ]] && map="${REPLY}" || return 0
  fi

  if ! localectl --no-pager list-keymaps | grep -qE "^${map}$"; then
    echo "Invalid keymap value"
    return 2
  fi

  localectl set-keymap --no-convert "${map}"
  
  if [[ $? -ne 0 ]]; then
    echo "Failed to set keymap"
    return 2
  fi

  echo "Keymap set to ${map}"
}

# Sets the system's language to the given language.
# Globals:
#  REPLY
# Arguments:
#  language: a language code
set_language () {
  local language="${1}"

  if [[ -z "${language}" ]]; then
    local languages=''
    languages="$(cat /etc/locale.gen | tail -n +24 | tr -d '#' | trim | awk '{
      print "{\"key\":\""$1"\",\"value\":\""$1"\"},"
    }')" || return 1
    languages="[${languages::-1}]"

    pick_one "Select a language:" "${languages}" "vertical" || return $?
    [[ -n "${REPLY}" ]] && language="${REPLY}" || return 0
  fi

  if [[ ! "${language}" =~ ^[a-zA-Z0-9_.-]+$ ]]; then
    echo "Invalid language value"
    return 2
  elif ! cat /etc/locale.gen | grep -qE "^#?${language} .*$"; then
    echo "Invalid or unknown language"
    return 2
  fi

  sudo sed -i "s/\(LANG=\).*/\1${language}/" /etc/locale.conf &&
   sudo sed -i "s/\(LANGUAGE=\).*/\1${language}:en:C/" /etc/locale.conf &&
   unset "LANG" "LANGUAGE" &&
   source /etc/profile.d/locale.sh

  if [[ $? -ne 0 ]]; then
    echo "Failed to set language"
    return 2
  fi

  echo "Language set to ${language}"
}

# Sets the locale variable with the given name to the
# given locale.
# Globals:
#  REPLY
# Arguments:
#  name:   the name of the locale variable 
#  locale: a locale value
set_locale () {
  local name="${1^^}"
  local locale="${2}"

  local properties=''
  properties+='CTYPE|NUMERIC|TIME|COLLATE|MONETARY|MESSAGES|PAPER|'
  properties+='NAME|ADDRESS|TELEPHONE|MEASUREMENT|IDENTIFICATION'

  if [[ ! "${name}" =~ (${properties}) ]]; then
    echo "Invalid locale variable name"
    return 2
  fi
  
  if [[ -z "${locale}" ]]; then
    local locales=''
    locales="$(cat /etc/locale.gen | tail -n +24 | tr -d '#' | trim | awk '{
      print "{\"key\":\""$1"\",\"value\":\""$1"\"},"
    }')" || return 1
    locales="[${locales::-1}]"

    pick_one "Select a locale:" "${locales}" "vertical" || return $?
    [[ -n "${REPLY}" ]] && locale="${REPLY}" || return 0
  fi

  if [[ ! "${locale}" =~ ^[a-zA-Z0-9_.-]+$ ]]; then
    echo "Invalid locale value"
    return 2
  elif ! cat /etc/locale.gen | grep -qE "^#?${locale} .*$"; then
    echo "Invalid or unknown locale"
    return 2
  fi

  sudo sed -i "s/\(${name}=\).*/\1${locale}/" /etc/locale.conf &&
   unset "${name}" &&
   source /etc/profile.d/locale.sh

  if [[ $? -ne 0 ]]; then
    echo "Failed to set locale variable"
    return 2
  fi

  echo "Locale variable ${name} set to ${locale}"
}

# Sets a keyboard layout options.
# Globals:
#  REPLY
# Arguments:
#  value: a layout options value
set_options () {
  local value="${1}"

  if [[ -z "${value}" ]]; then
    local options=''
    options="$(localectl --no-pager list-x11-keymap-options | awk '{
      print "{\"key\":\""$0"\",\"value\":\""$0"\"},"
    }')" ||  return 1
    options="[${options::-1}]"

    pick_one "Select an options value:" "${options}" "vertical" || return $?
    [[ -n "${REPLY}" ]] && value="${REPLY}" || return 0
  fi
  
  if ! localectl --no-pager list-x11-keymap-options | grep -qw "${value}"; then
    echo "Invalid keyboard options value"
    return 2
  fi

  local layouts=''
  layouts="$(cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbLayout/{print $3}' | tr -d '"')" || return 1

  local model=''
  model="$(cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbModel/{print $3}' | tr -d '"')" || return 1

  localectl --no-convert set-x11-keymap "${layouts}" "${model}" "" "${value}" &&
   setxkbmap -layout "${layouts}" -model "${model}" -option "${value}"

  if [[ $? -ne 0 ]]; then
    echo "Failed to set keyboard options"
    return 2
  fi

  echo "Keyboard options ${value} has set"
}

# Sets the keyboard model to the given model.
# Globals:
#  REPLY
# Arguments:
#  name: the name of the model
set_model () {
  local name="${1}"

  if [[ -z "${name}" ]]; then
    local models=''
    models="$(localectl --no-pager list-x11-keymap-models | awk '{
      print "{\"key\":\""$1"\",\"value\":\""$1"\"},"
    }')" || return 1
    models="[${models::-1}]"

    pick_one "Select a model:" "${models}" "vertical" || return $?
    [[ -n "${REPLY}" ]] && name="${REPLY}" || return 0
  fi
  
  if ! localectl --no-pager list-x11-keymap-models | grep -qw "${name}"; then
    echo "Invalid keyboard model value"
    return 2
  fi

  local layouts=''
  layouts="$(cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbLayout/{print $3}' | tr -d '"')" || return 1

  local options=''
  options="$(cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbOptions/{print $3}' | tr -d '"')" || return 1

  localectl --no-convert set-x11-keymap "${layouts}" "${name}" "" "${options}" &&
   setxkbmap -layout "${layouts}" -model "${value}" -option "${options}"
  
  if [[ $? -ne 0 ]]; then
    echo "Failed to set keyboard model"
    return 2
  fi

  echo "Keyboard model set to ${name}"
}

# Adds a locale to the system locales.
# Globals:
#  REPLY
# Arguments:
#  locale: a locale name
add_locale () {
  local locale="${1}"

  if [[ -z "${locale}" ]]; then
    local locales=''
    locales="$(cat /etc/locale.gen | tail -n +24 | trim | awk '{
      gsub(/#/,"",$0);
      print "{\"key\":\""$0"\",\"value\":\""$0"\"},"
    }')" || return 1
    locales="[${locales::-1}]"

    pick_one "Select a locale:" "${locales}" "vertical" || return $?
    [[ -n "${REPLY}" ]] && locale="${REPLY}"  || return 0
  fi

  if [[ ! "${locale}" =~ ^[a-zA-Z[:blank:]0-9_.-]+$ ]]; then
    echo "Malformed locale value"
    return 2
  elif grep -qE "^\s*${locale}\s*$" /etc/locale.gen; then
    echo "Locale ${locale} is already added"
    return 2
  elif ! grep -qE "^\s*#\s*${locale}\s*$" /etc/locale.gen; then
    echo "Invalid or unknown locale"
    return 2
  fi

  sudo sed -i "s/\s*#\s*\(${locale}\)\s*/\1/" /etc/locale.gen &&
   sudo locale-gen

  if [[ $? -ne 0 ]]; then
    echo "Failed to add locale"
    return 2
  fi

  echo "Locale ${locale} has been added"  
}

# Removes the given locale from the system locales.
# Globals:
#  REPLY
# Arguments:
#  locale: a locale name
remove_locale () {
  local locale="${1}"

  if [[ -z "${locale}" ]]; then
    local locales=''
    locales="$(cat /etc/locale.gen | tail -n +24 | trim | awk '/^\s*[a-zA-Z\s0-9_.-]+/{
      print "{\"key\":\""$0"\",\"value\":\""$0"\"},"
    }')" || return 1
    locales="[${locales::-1}]"

    pick_one "Select a locale:" "${locales}" "vertical" || return $?
    [[ -n "${REPLY}" ]] && locale="${REPLY}" || return 0
  fi

  if [[ ! "${locale}" =~ ^[a-zA-Z[:blank:]0-9_.-]+$ ]]; then
    echo "Malformed locale value"
    return 2
  elif grep -qE "^\s*#\s*${locale}\s*$" /etc/locale.gen; then
    echo "Locale ${locale} is already removed"
    return 2
  elif ! grep -qE "^\s*${locale}\s*$" /etc/locale.gen; then
    echo "Invalid or unknown locale"
    return 2
  elif [[ "${locale}" == "en_US.UTF-8 UTF-8" ]]; then
    echo "Cannot remove the default locale"
    return 2
  fi

  sudo sed -i "s/\s*\(${locale}\)\s*/#\1/" /etc/locale.gen &&
   sudo locale-gen

  if [[ $? -ne 0 ]]; then
    echo "Failed to remove locale"
    return 2
  fi

  echo "Locale ${locale} has been removed"
}

# Adds a new language to keyboard layouts.
# Globals:
#  REPLY
# Arguments:
#  language: a language name
add_layout () {
  local language="${1}"

  if [[ -z "${language}" ]]; then
    local languages=''
    languages="$(localectl --no-pager list-x11-keymap-layouts | awk '{
      print "{\"key\":\""$0"\",\"value\":\""$0"\"},"
    }')" || return 1
    languages="[${languages::-1}]"

    pick_one "Select a language:" "${languages}" "vertical" || return $?
    [[ -n "${REPLY}" ]] && language="${REPLY}" || return 0
  fi

  if [[ ! "${language}" =~ ^[a-z]{2,6}$ ]]; then
    echo "Invalid language value"
    return 2
  elif ! localectl --no-pager list-x11-keymap-layouts | grep -qw "${language}"; then
    echo "Invalid or unknown language"
    return 2
  fi

  local layouts=''
  layouts="$(cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbLayout/{print $3}' | tr -d '"')" || return 1

  if [[ "${layouts}" =~ "${language}" ]]; then
    echo "Language ${language} is already added"
    return 2
  fi

  if [[ -n "${layouts}" ]]; then
    confirm "Want to set it as default?" || return $?
    [[ -z "${REPLY}" ]] && return 0

    if [[ "${REPLY}" == "yes" ]]; then
      layouts="${language},${layouts}"
    else
      layouts="${layouts},${language}"
    fi
  else
    layouts="${language}"
  fi

  local model=''
  model="$(cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbModel/{print $3}' | tr -d '"')" || return 1

  local options=''
  options="$(cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbOptions/{print $3}' | tr -d '"')" || return 1

  localectl --no-convert set-x11-keymap "${layouts}" "${model}" "" "${options}" &&
   setxkbmap -layout "${layouts}" -model "${model}" -option "${options}"

  if [[ $? -ne 0 ]]; then
    echo "Failed to add layout"
    return 2
  fi

  echo "Layout ${language} has been added"
}

# Removes a language from keyboard layouts.
# Globals:
#  REPLY
# Arguments:
#  language: a language name
remove_layout () {
  local language="${1}"

  local layouts=''
  layouts="$(cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbLayout/{print $3}' | tr -d '"')" || return 1

  if [[ -z "${layouts}" ]]; then
    echo "No keyboard layouts have set yet"
    return 0
  fi

  if [[ -z "${language}" ]]; then
    local languages=''
    languages="$(echo "${layouts}" | tr ',' '\n' | awk '{
      print "{\"key\":\""$0"\",\"value\":\""$0"\"},"
    }')" || return 1
    languages="[${languages::-1}]"

    pick_one "Select a language:" "${languages}" "horizontal" || return $?
    [[ -n "${REPLY}" ]] && language="${REPLY}" || return 0
  fi

  if [[ ! "${language}" =~ ^[a-z]{2,6}$ ]]; then
    echo "Invalid language value"
    return 2
  elif ! localectl --no-pager list-x11-keymap-layouts | grep -qw "${language}"; then
    echo "Invalid or unknown language"
    return 2
  elif [[ "${language}" == "us" ]]; then
    echo "Cannot remove the default layout"
    return 2
  elif [[ "${layouts}" == "${language}" ]]; then
    echo "Cannot remove the only keyboard layout"
    return 2
  elif [[ ! "${layouts}" =~ "${language}" ]]; then
    echo "Layout ${language} not found in layouts"
    return 2
  fi

  if [[ "${layouts}" =~ "${language}," ]]; then
    layouts=${layouts//${language},/}
  else
    layouts=${layouts//,${language}/}
  fi

  local model=''
  model="$(cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbModel/{print $3}' | tr -d '"')" || return 1

  local options=''
  options="$(cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbOptions/{print $3}' | tr -d '"')" || return 1

  localectl --no-convert set-x11-keymap "${layouts}" "${model}" "" "${options}" &&
   setxkbmap -layout "${layouts}" -model "${model}" -option "${options}"

  if [[ $? -ne 0 ]]; then
    echo "Failed to remove layout"
    return 2
  fi

  echo "Layout ${language} has been removed"
}

# Asks user to select the layouts so they can be set
# in that order in keyboard layouts.
# Globals:
#  REPLY
# Arguments:
#  None
order_layouts () {
  local layouts=''
  layouts="$(cat /etc/X11/xorg.conf.d/00-keyboard.conf | awk '/XkbLayout/{
    gsub(/"/,"",$0);split($3,a,",");
    output=""
    for (i=1; i<=length(a); i++) {
      output=output"{\"key\":\""a[i]"\",\"value\":\""toupper(a[i])"\"}"
      if (i < length(a)) output=output","
    }
    print "["output"]"
  }')" || return 1
  
  local len=0
  len="$(count "${layouts}")" || return 1

  if [[ ${len} -eq 0 ]]; then
    echo "No keyboard layouts have set yet"
    return 0
  elif [[ ${len} -eq 1 ]]; then
    echo "Only one layout has found"
    return 0
  fi

  pick_many "Pick layouts by order:" "${layouts}" "all" "horizontal" || return $?
  [[ -z "${REPLY}" ]] && return 0

  local ordered=''
  ordered="$(echo "${REPLY}" | jq -cer 'join(",")')" || return 1

  local model=''
  model="$(cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbModel/{print $3}' | tr -d '"')" || return 1

  local options=''
  options="$(cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbOptions/{print $3}' | tr -d '"')" || return 1

  localectl --no-convert set-x11-keymap "${ordered}" "${model}" "" "${options}" &&
   setxkbmap -layout "${ordered}" -model "${model}" -option "${options}"

  if [[ $? -ne 0 ]]; then
    echo "Failed to set layouts order"
    return 2
  fi

  echo "Layouts order set to ${ordered}"
}

# Shows the help message.
# Arguments:
#  None
# Outputs:
#  A long help message.
show_help () {
  echo "Usage: COMMAND [OBJECT] [ARGUMENTS]..."

  echo -e "\nCOMMANDS"
  printf " %-35s %s\n" \
    "help" "Show this help message." \
    "" "" \
    "show status" "Show the system locale and keyboard status." \
    "" "" \
    "set language [<language>]" "Set the system's language." \
    "set keymap [<map>]" "Set the keyboard's virtual console keymap." \
    "set options [<value>]" "Set a keyboard layout options." \
    "set model [<name>]" "Set the model of the keyboard." \
    "" "" \
    "set locale <name> [<locale>]" "Set a locale variable, where name could be" \
    "" "ctype, numeric, time, collate, monetary," \
    "" "messages, paper, name, address, telephone," \
    "" "measurement, identification." \
    "add locale [<locale>]" "Add a locale to the system's locales." \
    "remove locale [<locale>]" "Remove a locale from the system's locales." \
    "" "" \
    "add layout [<language>]" "Add a keyboard layout language." \
    "remove layout [<language>]" "Remove a keyboard layout language." \
    "order layouts" "Set the order of keyboard layouts."
}

loop () {
  clear

  while true; do
    prompt && history -s "${REPLY}"

    set -f
    set_separator "line"
    local cmd=($(xargs -n1 <<< "${REPLY}"))
    restore_separator && set +f

    if [[ "${cmd[0]}" == "help" ]]; then
      show_help
      continue
    elif [[ "${cmd[0]}" == "clear" ]]; then
      clear
      continue
    elif [[ "${cmd[0]}" == "quit" ]]; then
      break
    elif [[ -z "${cmd[0]}" ]]; then
      continue
    fi

    case "${cmd[0]}" in
      "show")
        case "${cmd[1]}" in
          "status") show_status;;
          *) echo "Invalid or unknown command";;
        esac;;
      "set")
        case "${cmd[1]}" in
          "keymap") set_keymap "${cmd[2]}";;
          "language") set_language "${cmd[2]}";;
          "locale") set_locale "${cmd[2]}" "${cmd[3]}";;
          "options") set_options "${cmd[2]}";;
          "model") set_model "${cmd[2]}";;
          *) echo "Invalid or unknown command";;
        esac;;
      "add")
        case "${cmd[1]}" in
          "locale") add_locale "${cmd[2]}";;
          "layout") add_layout "${cmd[2]}";;
          *) echo "Invalid or unknown command";;
        esac;;
      "remove")
        case "${cmd[1]}" in
          "locale") remove_locale "${cmd[2]}";;
          "layout") remove_layout "${cmd[2]}";;
          *) echo "Invalid or unknown command";;
        esac;;
      "order")
        case "${cmd[1]}" in
          "layouts") order_layouts;;
          *) echo "Invalid or unknown command";;
        esac;;
      *) echo "Invalid or unknown command";; 
    esac

    if [[ $? -eq 1 ]]; then
      echo "An unknown error has occurred"
    fi
  done

  clear
}

loop