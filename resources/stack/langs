#!/usr/bin/env bash

source /opt/stack/utils

require "systemd"

prompt () {
  local YELLOW=$'\e[0;33m'
  local RS=$'\e[m'
  local FG=$YELLOW

  local LOCALE=$(localectl status | awk -F= '/System Locale/{print $2}')

  read -rep "[langs:$FG${LOCALE}$RS] " REPLY
}

show_status () {
  localectl status | awk -F: '{ \
    i=index($0,":"); \
    if (i > 0) { \
      l=$1; \
      gsub(/^[ \t]+|[ \t]+$/, "", l); \
      printf "%-12s\t%s\n", l":", substr($0, i+1)} \
    else { \
      gsub(/ /,""); printf "%-12s\t%s\n", "", " "$0} \
    }'
  
  echo -e "\nInstalled Locales:"
  locale -a | awk '{print " "$0}'
}

set_keymap () {
  local KEYMAP=$1

  if ! localectl --no-pager list-keymaps | grep -qE "^${KEYMAP}$"; then
    echo "Invalid keymap value: '$KEYMAP'"
    return 1
  fi

  localectl set-keymap --no-convert "$KEYMAP" &&
    echo "Keyboard keymap set to $KEYMAP" ||
    echo "Something went wrong setting up the keymap"
}

set_language () {
  local LANGUAGE=$1

  if [ -z "$LANGUAGE" ]; then
    echo "Missing language argument"
    return 1
  fi

  sudo sed -i "s/\(LANG=\).*/\1${LANGUAGE}/" /etc/locale.conf &&
  sudo sed -i "s/\(LANGUAGE=\).*/\1${LANGUAGE}:en:C/" /etc/locale.conf &&
    unset "LANG" "LANGUAGE" &&
    source /etc/profile.d/locale.sh &&
    echo "Language has been set to $LANGUAGE" ||
    echo "Something went wrong setting the language"
}

set_locale () {
  local KEY=${1^^}
  local VALUE=$2

  if [ -z "$KEY" ]; then
    echo "Missing locale variable key argument"
    return 1
  elif [[ ! "$KEY" =~ (CTYPE|NUMERIC|TIME|COLLATE|MONETARY|MESSAGES|PAPER| \
    NAME|ADDRESS|TELEPHONE|MEASUREMENT|IDENTIFICATION) ]]; then
    echo "Invalid locale variable key: '$KEY'"
    return 1
  elif [ -z "$VALUE" ]; then
    echo "Missing locale variable value argument"
    return 1
  fi

  sudo sed -i "s/\(${KEY}=\).*/\1${VALUE}/" /etc/locale.conf &&
    unset "$KEY" &&
    source /etc/profile.d/locale.sh &&
    echo "Locale $KEY has been set to $VALUE" ||
    echo "Something went wrong setting the $KEY locale variable"
}

set_options () {
  local OPTIONS=$1

  if [ -z "$OPTIONS" ]; then
    echo "Missing the keyboard options argument"
    return 1
  elif ! localectl --no-pager list-x11-keymap-options | grep -qw "$OPTIONS"; then
    echo "Invalid keyboard options: '$OPTIONS'"
    return 1
  fi

  local LAYOUTS=$(
    cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbLayout/{print $3}' | tr -d '"'
  )

  local MODEL=$(
    cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbModel/{print $3}' | tr -d '"'
  )

  localectl --no-convert set-x11-keymap "$LAYOUTS" "$MODEL" "" "$OPTIONS" &&
    setxkbmap -layout "$LAYOUTS" -model "$MODEL" -option "$OPTIONS" &&
    echo "Keyboard options $OPTIONS have been set" ||
    echo "Something went wrong setting keyboard options"
}

set_model () {
  local MODEL=$1

  if [ -z "$MODEL" ]; then
    echo "Missing the keyboard model argument"
    return 1
  elif ! localectl --no-pager list-x11-keymap-models | grep -qw "$MODEL"; then
    echo "Invalid keyboard model: '$MODEL'"
    return 1
  fi

  local LAYOUTS=$(
    cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbLayout/{print $3}' | tr -d '"'
  )

  local OPTIONS=$(
    cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbOptions/{print $3}' | tr -d '"'
  )

  localectl --no-convert set-x11-keymap "$LAYOUTS" "$MODEL" "" "$OPTIONS" &&
    setxkbmap -layout "$LAYOUTS" -model "$MODEL" -option "$OPTIONS" &&
    echo "Keyboard model $MODEL has been set" ||
    echo "Something went wrong setting keyboard model"
}

add_layout () {
  local LAYOUT=$1
  local ORDER=$2

  if [ -z "$LAYOUT" ]; then
    echo "Missing layout argument"
    return 1
  elif ! localectl --no-pager list-x11-keymap-layouts | grep -qw "$LAYOUT"; then
    echo "Invalid layout argument: '$LAYOUT'"
    return 1
  fi

  if [ -n "$ORDER" ] && [[ ! "$ORDER" =~ ^default$ ]]; then
    echo "Invalid order argument: '$ORDER'"
    return 1
  fi

  local LAYOUTS=$(
    cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbLayout/{print $3}' | tr -d '"'
  )

  if [[ "$LAYOUTS" =~ "$LAYOUT" ]]; then
    echo "Layout $LAYOUT is already in the kayboard layouts"
    return 1
  fi

  if [ -n "$LAYOUTS" ]; then
    [ "$ORDER" = "default" ] &&
      LAYOUTS="$LAYOUT,$LAYOUTS" ||
      LAYOUTS="$LAYOUTS,$LAYOUT"
  else
    LAYOUTS="$LAYOUT"
  fi

  local MODEL=$(
    cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbModel/{print $3}' | tr -d '"'
  )

  local OPTIONS=$(
    cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbOptions/{print $3}' | tr -d '"'
  )

  localectl --no-convert set-x11-keymap "$LAYOUTS" "$MODEL" "" "$OPTIONS" &&
    setxkbmap -layout "$LAYOUTS" -model "$MODEL" -option "$OPTIONS" &&
    echo "Keyboard layout $LAYOUT added" ||
    echo "Something went wrong adding keyboard layout"
}

add_locale () {
  local LOCALE=$1

  if grep -qE "^\s*${LOCALE}\s*$" /etc/locale.gen; then
    echo "Locale is already added"
    return 1
  elif ! grep -qE "^\s*#\s*${LOCALE}\s*$" /etc/locale.gen; then
    echo "Invalid locale argument: '$LOCALE'"
    return 1
  fi

  sudo sed -i "s/\s*#\s*\(${LOCALE}\)\s*/\1/" /etc/locale.gen &&
    sudo locale-gen &&
    echo "Locale $LOCALE generated successfully" ||
    echo "Something went wrong generating locale"
}

remove_layout () {
  local LAYOUT=$1

  if [ -z "$LAYOUT" ]; then
    echo "Missing layout argument"
    return 1
  elif ! localectl --no-pager list-x11-keymap-layouts | grep -qw "$LAYOUT"; then
    echo "Invalid layout argument: '$LAYOUT'"
    return 1
  elif [ "$LAYOUT" = "us" ]; then
    echo "The us layout cannot be removed"
    return 1
  fi

  local LAYOUTS=$(
    cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbLayout/{print $3}' | tr -d '"'
  )

  if [ -z "$LAYOUTS" ]; then
    echo "No keyboard layouts found"
    return 1
  elif [ "$LAYOUTS" = "$LAYOUT" ]; then
    echo "Cannot leave keyboard layouts empty"
    return 1
  elif [[ ! "$LAYOUTS" =~ "$LAYOUT" ]]; then
    echo "Layout $LAYOUT not found in keyboard layouts"
    return 1
  fi

  if [[ "$LAYOUTS" =~ "${LAYOUT}," ]]; then
    LAYOUTS=${LAYOUTS//${LAYOUT},/}
  else
    LAYOUTS=${LAYOUTS//,${LAYOUT}/}
  fi

  local MODEL=$(
    cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbModel/{print $3}' | tr -d '"'
  )

  local OPTIONS=$(
    cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbOptions/{print $3}' | tr -d '"'
  )

  localectl --no-convert set-x11-keymap "$LAYOUTS" "$MODEL" "" "$OPTIONS" &&
    setxkbmap -layout "$LAYOUTS" -model "$MODEL" -option "$OPTIONS" &&
    echo "Keyboard layout $LAYOUT has been removed" ||
    echo "Something went wrong removing keyboard layout"
}

remove_locale () {
  local LOCALE=$1

  if grep -qE "^\s*#\s*${LOCALE}\s*$" /etc/locale.gen; then
    echo "Locale is already removed"
    return 1
  elif ! grep -qE "^\s*${LOCALE}\s*$" /etc/locale.gen; then
    echo "Invalid locale argument: '$LOCALE'"
    return 1
  fi

  sudo sed -i "s/\s*\(${LOCALE}\)\s*/#\1/" /etc/locale.gen &&
    sudo locale-gen &&
    echo "Locale $LOCALE removed successfully" ||
    echo "Something went wrong removing locale"
}

list_layouts () {
  local FILTER=$1

  local LAYOUTS=($(localectl --no-pager list-x11-keymap-layouts | awk "/$FILTER/{print}"))

  print 5 10 "${LAYOUTS[@]}"
}

list_options () {
  local FILTER=$1

  local OPTIONS=($(localectl --no-pager list-x11-keymap-options | awk "/$FILTER/{print}"))

  print 3 34 "${OPTIONS[@]}"
}

list_locales () {
  local LANGUAGE=$1

  local OLD_IFS=$IFS && IFS=","

  local LOCALES=($(
    cat /etc/locale.gen |
    tail -n +24 |
    tr -d '#' |
    awk "/$LANGUAGE/{print}" |
    trim |
    awk '{print $0","}' |
    no_breaks
  ))

  IFS=$OLD_IFS

  print 5 20 "${LOCALES[@]}"
}

list_keymaps () {
  local FILTER=$1

  local KEYMAPS=($(localectl --no-pager list-keymaps | awk "/$FILTER/{print}"))

  print 3 35 "${KEYMAPS[@]}"
}

list_models () {
  local FILTER=$1

  local MODELS=($(localectl --no-pager list-x11-keymap-models | awk "/$FILTER/{print}"))

  print 3 34 "${MODELS[@]}"
}

help () {
  local FRM=" %-33s\t%s\n"

  echo "Usage: COMMAND [OBJECT] [ARGUMENTS]..."

  echo -e "\nCOMMANDS"
  printf "$FRM" \
    "help" "Show this help message." \
    "show status" "Show the system locale and keyboard status." \
    "" "" \
    "set language <language>" "Set the system's language." \
    "set locale <key> <locale>" "Set a locale variable where key could any of:" \
    "" " ctype, numeric, time, collate, monetary, messages, paper," \
    "" " name, address, telephone, measurement, identification" \
    "set keymap <keymap>" "Set the keyboard's virtual console keymap." \
    "set options <options>" "Set the keyboard's layout options." \
    "set model <model>" "Set the keyboard's model." \
    "" "" \
    "add locale <locale>" "Add a locale to the system's locales." \
    "add layout <language> [default]" "Add a language to the keyboard's layouts." \
    "remove locale <locale>" "Remove a locale from the system's locales." \
    "remove layout <language>" "Remove a language from the keyboard's layouts." \
    "" "" \
    "list locales [<filter>]" "Get the list of available locales." \
    "list keymaps [<filter>]" "Get the list of available keyboard keymaps." \
    "list options [<filter>]" "Get the list of available keyboard options." \
    "list layouts [<filter>]" "Get the list of available keyboard layouts." \
    "list models [<filter>]" "Get the list of available keyboard models."

  echo -e "\nOBJECTS"
  printf "$FRM" \
    "status" "The locale and keyboard status." \
    "language" "The language of the system." \
    "locale" "A system's locale or locale variable." \
    "keymap" "The keyboard's virtual console keymap." \
    "options" "The keyboard's layout options." \
    "model" "The keyboard's model." \
    "layout" "A keyboard layout language."
}

loop () {
  clear

  while true; do
    prompt && history -s "$REPLY"

    set -f
    local OLD_IFS=$IFS && IFS=$'\n'
    local CMD=($(xargs -n1 <<< "$REPLY"))
    IFS=$OLD_IFS && set +f

    if [ "${CMD[0]}" = "help" ]; then
      help
      continue
    elif [ "${CMD[0]}" = "clear" ]; then
      clear
      continue
    elif [ "${CMD[0]}" = "quit" ]; then
      break
    elif [ -z "${CMD[0]}" ]; then
      continue
    fi

    case "${CMD[0]}" in
      "show")
        case "${CMD[1]}" in
          "status") show_status;;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      "set")
        case "${CMD[1]}" in
          "keymap") set_keymap "${CMD[2]}";;
          "language") set_language "${CMD[2]}";;
          "locale") set_locale "${CMD[2]}" "${CMD[3]}";;
          "options") set_options "${CMD[2]}";;
          "model") set_model "${CMD[2]}";;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      "add")
        case "${CMD[1]}" in
          "layout") add_layout "${CMD[2]}" "${CMD[3]}";;
          "locale") add_locale "${CMD[2]}";;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      "remove")
        case "${CMD[1]}" in
          "layout") remove_layout "${CMD[2]}";;
          "locale") remove_locale "${CMD[2]}";;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      "list")
        case "${CMD[1]}" in
          "layouts") list_layouts "${CMD[2]}";;
          "options") list_options "${CMD[2]}";;
          "locales") list_locales "${CMD[2]}";;
          "keymaps") list_keymaps "${CMD[2]}";;
          "models") list_models "${CMD[2]}";;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      *) echo "Unknown or invalid command: '$REPLY'";; 
    esac
  done

  clear
}

loop
