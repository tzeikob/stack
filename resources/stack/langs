#!/usr/bin/env bash

set -f

source /opt/stack/utils

require "systemd"

prompt () {
  local YELLOW=$'\e[0;33m'
  local RS=$'\e[m'
  local FG=$YELLOW

  local LOCALE=$(localectl status | awk -F= '/System Locale/{print $2}')

  read -rep "[langs:$FG${LOCALE}$RS] " REPLY
}

show_status () {
  localectl status | awk -F: '{ \
    i=index($0,":"); \
    if (i > 0) { \
      l=$1; \
      gsub(/^[ \t]+|[ \t]+$/, "", l); \
      printf "%-12s\t%s\n", l":", substr($0, i+1)} \
    else { \
      gsub(/ /,""); printf "%-12s\t%s\n", "", " "$0} \
    }'
  
  echo -e "\nInstalled Locales:"
  locale -a | awk '{print " "$0}'
}

set_keymap () {
  local KEYMAP=$1

  if ! localectl list-keymaps | grep -qE "^${KEYMAP}$"; then
    echo "Invalid keymap value: '$KEYMAP'"
    return 1
  fi

  localectl set-keymap --no-convert "$KEYMAP" &&
    echo "Keyboard keymap set to $KEYMAP" ||
    echo "Something went wrong setting up the keymap"
}

set_language () {
  local LANGUAGE=$1

  if [ -z "$LANGUAGE" ]; then
    echo "Missing language argument"
    return 1
  fi

  sudo sed -i "s/\(LANG=\).*/\1${LANGUAGE}/" /etc/locale.conf &&
  sudo sed -i "s/\(LANGUAGE=\).*/\1${LANGUAGE}:en:C/" /etc/locale.conf &&
    unset "LANG" "LANGUAGE" &&
    source /etc/profile.d/locale.sh &&
    echo "Language has been set to $LANGUAGE" ||
    echo "Something went wrong setting the language"
}

set_locale () {
  local KEY=${1^^}
  local VALUE=$2

  if [ -z "$KEY" ]; then
    echo "Missing locale variable key argument"
    return 1
  elif [[ ! "$KEY" =~ (CTYPE|NUMERIC|TIME|COLLATE|MONETARY|MESSAGES|PAPER| \
    NAME|ADDRESS|TELEPHONE|MEASUREMENT|IDENTIFICATION) ]]; then
    echo "Invalid locale variable key: '$KEY'"
    return 1
  elif [ -z "$VALUE" ]; then
    echo "Missing locale variable value argument"
    return 1
  fi

  sudo sed -i "s/\(${KEY}=\).*/\1${VALUE}/" /etc/locale.conf &&
    unset "$KEY" &&
    source /etc/profile.d/locale.sh &&
    echo "Locale $KEY has been set to $VALUE" ||
    echo "Something went wrong setting the $KEY locale variable"
}

add_locale () {
  local LOCALE=$1

  if grep -qE "^\s*${LOCALE}\s*$" /etc/locale.gen; then
    echo "Locale is already added"
    return 1
  elif ! grep -qE "^\s*#\s*${LOCALE}\s*$" /etc/locale.gen; then
    echo "Invalid locale argument: '$LOCALE'"
    return 1
  fi

  sudo sed -i "s/\s*#\s*\(${LOCALE}\)\s*/\1/" /etc/locale.gen &&
    sudo locale-gen &&
    echo "Locale $LOCALE generated successfully" ||
    echo "Something went wrong generating locale"
}

remove_locale () {
  local LOCALE=$1

  if grep -qE "^\s*#\s*${LOCALE}\s*$" /etc/locale.gen; then
    echo "Locale is already removed"
    return 1
  elif ! grep -qE "^\s*${LOCALE}\s*$" /etc/locale.gen; then
    echo "Invalid locale argument: '$LOCALE'"
    return 1
  fi

  sudo sed -i "s/\s*\(${LOCALE}\)\s*/#\1/" /etc/locale.gen &&
    sudo locale-gen &&
    echo "Locale $LOCALE removed successfully" ||
    echo "Something went wrong removing locale"
}

list_locales () {
  local LANGUAGE=$1

  local OLD_IFS=$IFS && IFS=","

  local LOCALES=($(
    cat /etc/locale.gen |
    tail -n +24 |
    tr -d '#' |
    awk "/^$LANGUAGE/{print}" |
    trim |
    awk '{print $0","}' |
    no_breaks
  ))

  IFS=$OLD_IFS

  print 5 20 "${LOCALES[@]}"
}

list_keymaps () {
  local FILTER=$1

  local KEYMAPS=($(localectl --no-pager list-keymaps | awk "/$FILTER/{print}"))

  print 3 35 "${KEYMAPS[@]}"
}

help () {
  echo "Usage: COMMAND [OBJECT] [ARGUMENTS]..."

  echo -e "\nOBJECTS"
  printf " %-25s\t%s\n" \
      "keymap" "An object to handle the keyboard keymap." \
      "locale" "An object to manage system locales."

  echo -e "\nCOMMANDS"
  printf " %-25s\t%s\n" \
    "show status" "Show the locale and languages status of the system." \
    "set keymap <keymap>" "Set the keyboard's console keymap." \
    "set language <language>" "Set the system language." \
    "set locale <key> <value>" "Set the locale variable with the given key name" \
    "" "where key could be anything from the following values:" \
    "" "  ctype, numeric, time, collate, monetary, messages, paper," \
    "" "  name, address, telephone, measurement, identification." \
    "add locale <locale>" "Add and generate the given locale." \
    "remove locale <locale>" "Remove the given locale from the system." \
    "list locales [<language>]" "List all the available locales for the given language," \
    "" "default is all the available locales." \
    "list keymaps [<filter>]" "List all the available keymaps filtered by the given term," \
    "" "default is all the keymaps." \
    "help" "Show this help message."
}

loop () {
  clear

  while true; do
    prompt && history -s "$REPLY"

    local OLD_IFS=$IFS && IFS=$'\n'
    local CMD=($(xargs -n1 <<< "$REPLY"))
    IFS=$OLD_IFS

    if [ "${CMD[0]}" = "help" ]; then
      help
      continue
    elif [ "${CMD[0]}" = "clear" ]; then
      clear
      continue
    elif [ "${CMD[0]}" = "quit" ]; then
      break
    elif [ -z "${CMD[0]}" ]; then
      continue
    fi

    case "${CMD[0]}" in
      "show")
        case "${CMD[1]}" in
          "status") show_status;;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      "set")
        case "${CMD[1]}" in
          "keymap") set_keymap "${CMD[2]}";;
          "language") set_language "${CMD[2]}";;
          "locale") set_locale "${CMD[2]}" "${CMD[3]}";;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      "add")
        case "${CMD[1]}" in
          "locale") add_locale "${CMD[2]}";;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      "remove")
        case "${CMD[1]}" in
          "locale") remove_locale "${CMD[2]}";;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      "list")
        case "${CMD[1]}" in
          "locales") list_locales "${CMD[2]}";;
          "keymaps") list_keymaps "${CMD[2]}";;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      *) echo "Unknown or invalid command: '$REPLY'";; 
    esac
  done

  clear
}

loop
