#!/bin/bash

set -o pipefail
source /opt/stack/utils

SETTINGS_FILE="${CONFIG_HOME}/power.json"

# Finds the ac power adapter data.
# Arguments:
#  None
# Outputs:
#  A json object of ac power data.
find_adapter () {
  acpi -a | jc --acpi | jq -cer '.[0]' || return 1
}

# Finds the battery power data.
# Arguments:
#  None
# Outputs:
#  A json object of battery power data.
find_battery () {
  local query=''
  query+='if length > 0 then .[0] else "" end'

  acpi -b -i | jc --acpi | jq -cer "${query}" || return 1
}

# Shows a prompt status and asks user to enter the
# next command, which is kept in the global var REPLY.
# Globals:
#  REPLY
# Arguments:
#  None
# Outputs:
#  A minimal prompt status line.
prompt () {
  local query=''
  query+='."on-line"|if . then "adapter" else "battery" end'

  local status=''
  status="$(find_adapter | jq -cer "${query}")"

  if [[ $? -ne 0 ]]; then
    status='none'
  fi

  read -rep "[power:${status}] " REPLY
}

# Shows the current status of the system's power.
# Arguments:
#  None
# Outputs:
#  A verbose list of text data.
show_status () {
  local query=''
  query+='"Adapter:      \(."on-line"|if . then "on" else "off" end)"'

  find_adapter | jq -cer "${query}" || return 1

  local battery=''
  battery="$(find_battery)" || return 1

  if [[ -n "${battery}" ]]; then
    local query=''
    query+='Battery:      yes\n'
    query+='State:        \(.state|ascii_downcase)\n'
    query+='Charge:       \(.charge_percent)%'
    query+="\(.design_capacity_mah|if . then \"\nCapacity:     \(.)mAh\" else \"\" end)"
    query="\"${query}\""

    echo "${battery}" | jq -cer "${query}" || return 1
  else
    echo "Battery:      no"
  fi

  if [[ -f '/sys/class/power_supply/BAT0/current_now' ]]; then
    local current_now="$(< /sys/class/power_supply/BAT0/current_now)"
    echo "Current:      ${current_now}mAh"
  fi

  if [[ -f '/sys/class/power_supply/BAT0/charge_now' ]]; then
    local charge_now="$(< /sys/class/power_supply/BAT0/charge_now)"
    echo "Load:         ${charge_now}mAh"
  fi

  local query='.[]|select(.unit == "acpid.service")|"ACPID:        \(.active)"'

  local acpid_status=''
  acpid_status="$(systemctl -a | jc --systemctl | jq -cr "${query}")" || return 1

  if [[ -n "${acpid_status}" ]]; then
    echo "${acpid_status}"
  fi

  local query='.[]|select(.unit == "tlp.service")|"TLP:          \(.active)"'

  local tlp_status=''
  tlp_status="$(systemctl -a | jc --systemctl | jq -cr "${query}")" || return 1

  if [[ -n "${tlp_status}" ]]; then
    echo "${tlp_status}"
  fi

  local locker_process=''
  locker_process="$(ps ax -o "command" | jc --ps |
    jq '.[]|select(.command|test("^xautolock"))|.command')" || return 1
  
  if [[ -n "${locker_process}" ]]; then
    echo "${locker_process}" | awk '{
      match($0,/.* -time(.*) -corners.*/,a)
      print "Locker:      "a[1]" mins"
    }'
  else
    echo "Locker:      off"
  fi

  local query='.screensaver.interval|if . then . else "" end'

  local screensaver=''
  screensaver="$(jq -cr "${query}" "${SETTINGS_FILE}")" || return 1
  
  if [[ -n "${screensaver}" ]] && [[ ${screensaver} -gt 0 ]]; then
    echo "Screensaver:  ${screensaver} mins"
  else
    echo "Screensaver:  off"
  fi

  loginctl show-session | awk '{
    match($0,/(.*)=(.*)/,a)

    if (a[1] == "Docked") {
      a[1]="Docked"
    } else if (a[1] == "LidClosed") {
      a[1]="Lid Down"
    } else {
      next
    }

    printf  "%-12s  %s\n", a[1]":", a[2]
  }' || return 1

  echo ""

  loginctl show-session | awk '{
    match($0,/(.*)=(.*)/,a)

    if (a[1] == "HandlePowerKey") {
      a[1]="On Power"
    } else if (a[1] == "HandleRebootKey") {
      a[1]="On Reboot"
    } else if (a[1] == "HandleSuspendKey") {
      a[1]="On Suspend"
    } else if (a[1] == "HandleHibernateKey") {
      a[1]="On Hibernate"
    } else if (a[1] == "HandleLidSwitch") {
      a[1]="On Lid Down"
    } else if (a[1] == "HandleLidSwitchDocked") {
      a[1]="On Docked"
    } else if (a[1] == "IdleAction") {
      a[1]="On Idle"
    } else {
      next
    }

    printf  "%-13s  %s\n", a[1]":", a[2]
  }' || return 1
}

# Sets the action of the hander with the given name.
# Globals:
#  REPLY
# Arguments:
#  handler: power, reboot, suspend, lid or docked
#  action:  poweroff, reboot, suspend or ignore
set_action () {
  local handler="${1}"
  local action="${2}"

  if [[ -z "${handler}" ]]; then
    local handlers=''
    handlers+='{"key":"power", "value":"power"},'
    handlers+='{"key":"reboot", "value":"reboot"},'
    handlers+='{"key":"suspend", "value":"suspend"},'
    handlers+='{"key":"lid", "value":"lid"},'
    handlers+='{"key":"docked", "value":"docked"}'
    handlers="[${handlers}]"

    pick_one "Select a power handler:" "${handlers}" "vertical" || return $?
    [[ -n "${REPLY}" ]] && handler="${REPLY}" || return 0
  fi

  if [[ ! "${handler}" =~ ^(power|reboot|suspend|lid|docked)$ ]]; then
    echo "Invalid power handler"
    return 2
  fi

  if [[ -z "${action}" ]]; then
    local actions=''
    actions+='{"key":"poweroff", "value":"poweroff"},'
    actions+='{"key":"reboot", "value":"reboot"},'
    actions+='{"key":"suspend", "value":"suspend"},'
    actions+='{"key":"ignore", "value":"ignore"}'
    actions="[${actions}]"

    pick_one "Select an action:" "${actions}" "vertical" || return $?
    [[ -n "${REPLY}" ]] && action="${REPLY}" || return 0
  fi

  if [[ ! "${action}" =~ ^(poweroff|reboot|suspend|ignore)$ ]]; then
    echo "Invalid power action"
    return 2
  fi

  local option=''
  if [[ "${handler}" == "power" ]]; then
    option='HandlePowerKey'
  elif [[ "${handler}" == "reboot" ]]; then
    option='HandleRebootKey'
  elif [[ "${handler}" == "suspend" ]]; then
    option='HandleSuspendKey'
  elif [[ "${handler}" == "lid" ]]; then
    option='HandleLidSwitch'
  elif [[ "${handler}" == "docked" ]]; then
    option='HandleLidSwitchDocked'
  else
    echo "Invalid power handler"
    return 2
  fi

  local config_file='/etc/systemd/logind.conf.d/00-main.conf'

  # Copy the default config file if not yet created
  if [[ ! -f "${config_file}" ]]; then
    sudo mkdir -p /etc/systemd/logind.conf.d
    sudo cp /etc/systemd/logind.conf "${config_file}"
  fi

  if grep -qE "^${option}=" "${config_file}"; then
    sudo sed -i "s/^\(${option}=\).*/\1${action}/" "${config_file}"
  else
    echo "${option}=${action}" | sudo tee -a "${config_file}" > /dev/null
  fi

  systemctl kill -s HUP systemd-logind

  if [[ $? -ne 0 ]]; then
    echo "Failed to set ${handler} action"
    return 2
  fi

  echo "Action ${handler} set to ${action}"
}

# Resets the action of all power handlers.
# Arguments:
#  None
reset_actions () {
  local config_file='/etc/systemd/logind.conf.d/00-main.conf'

  if [[ ! -f "${config_file}" ]]; then
    echo "Power actions are already set to defaults"
    return 0
  fi

  sudo sed -i "/^HandlePowerKey=.*/d" "${config_file}"
  sudo sed -i "/^HandleRebootKey=.*/d" "${config_file}"
  sudo sed -i "/^HandleSuspendKey=.*/d" "${config_file}"
  sudo sed -i "/^HandleLidSwitch=.*/d" "${config_file}"
  sudo sed -i "/^HandleLidSwitchDocked=.*/d" "${config_file}"

  systemctl kill -s HUP systemd-logind

  if [[ $? -ne 0 ]]; then
    echo "Failed to reset power actions"
    return 2
  fi

  echo "Power actions have been reset"
}

# Sets the interval time of the screen locker, where
# 0 means deactivate the locker.
# Arguments:
#  mins:    an integer interval in mins or 0
#  persist: save or nosave, default is save
set_locker () {
  local mins="${1}"
  local persist="${2:-"save"}"

  if [[ -z "${mins}" ]]; then
    echo "Missing the interval time"
    return 2
  elif [[ ! "${mins}" =~ ^[0-9]{,2}$ ]]; then
    echo "Invalid interval time"
    return 2
  elif [[ ${mins} -lt 0 ]] || [[ ${mins} -gt 60 ]]; then
    echo "Interval time out of range [0,60]"
    return 2
  fi

  # Exit possibly running locker instance
  xautolock -exit &> /dev/null
  sleep 1

  if [[ ${mins} -gt 0 ]]; then
    xautolock -locker 'power lock' -nowlocker 'power lock' -time "${mins}" -corners 0-00 -detectsleep &
    echo "Screen locker set to ${mins} mins"
  else
    echo "Screen locker has been disabled"
  fi

  # Save locker interval into settings file
  if [[ "${persist}" == "save" ]]; then
    local settings='{}'
    local locker="{\"interval\": \"${mins}\"}"

    if [[ -f "${SETTINGS_FILE}" ]]; then
      settings="$(jq -e ".locker = ${locker} " "${SETTINGS_FILE}")" || return 1
    else
      settings="$(echo "{\"locker\": ${locker}}" | jq -e '.')" || return 1
    fi

    mkdir -p "${CONFIG_HOME}"
    echo "${settings}" > "${SETTINGS_FILE}"
  fi
}

# Initializes the screen locker to settings being set
# in the settings file.
# Globals:
#  SETTINGS_FILE
# Arguments:
#  None
init_locker () {
  if [[ ! -f "${SETTINGS_FILE}" ]]; then
    echo "No locker settings found"
    return 0
  fi

  local locker=''
  locker="$(jq '.locker|if . then . else empty end' "${SETTINGS_FILE}")"

  if [[ -z "${locker}" ]]; then
    echo "No locker settings found"
    return 0
  fi

  local interval=''
  interval="$(get "${locker}" '.interval')" || return 1

  set_locker "${interval}" "nosave"

  if [[ $? -ne 0 ]]; then
    echo "Failed to set locker"
    return 2
  fi

  echo "Locker has been set"
}

# Sets the interval time of the screen saver, where
# 0 means deactivate the screensaver.
# Arguments:
#  mins:    an integer interval in mins or 0
#  persist: save or nosave, default is save
set_screensaver () {
  local mins="${1}"
  local persist="${2:-"save"}"

  if [[ -z "${mins}" ]]; then
    echo "Missing the interval time"
    return 2
  elif [[ ! "${mins}" =~ ^[0-9]{,2}$ ]]; then
    echo "Invalid interval time"
    return 2
  elif [[ ${mins} -lt 0 ]] || [[ ${mins} -gt 60 ]]; then
    echo "Interval time out of range [0,60]"
    return 2
  fi

  if [[ ${mins} -gt 0 ]]; then
    local secs=$((mins*60))
    xset s "${secs}" "${secs}" &> /dev/null

    if [[ $? -ne 0 ]]; then
      echo "Failed to set the screen saver"
      return 2
    fi

    echo "Screen saver set to ${mins} mins"
  else
    xset s off &> /dev/null

    if [[ $? -ne 0 ]]; then
      echo "Failed to disable screen saver"
      return 2
    fi

    echo "Screen saver has been disabled"
  fi

  # Save screen saver interval into settings file
  if [[ "${persist}" == "save" ]]; then
    local settings='{}'
    local screensaver="{\"interval\": \"${mins}\"}"

    if [[ -f "${SETTINGS_FILE}" ]]; then
      settings="$(jq -e ".screensaver = ${screensaver} " "${SETTINGS_FILE}")" || return 1
    else
      settings="$(echo "{\"screensaver\": ${screensaver}}" | jq -e '.')" || return 1
    fi

    mkdir -p "${CONFIG_HOME}"
    echo "${settings}" > "${SETTINGS_FILE}"
  fi
}

# Initializes the screen saver to settings being set
# in the settings file.
# Globals:
#  SETTINGS_FILE
# Arguments:
#  None
init_screensaver () {
  if [[ ! -f "${SETTINGS_FILE}" ]]; then
    echo "No screensaver settings found"
    return 0
  fi

  local screensaver=''
  screensaver="$(jq '.screensaver|if . then . else empty end' "${SETTINGS_FILE}")"

  if [[ -z "${screensaver}" ]]; then
    echo "No screensaver settings found"
    return 0
  fi

  local interval=''
  interval="$(get "${screensaver}" '.interval')" || return 1

  set_screensaver "${interval}" "nosave"

  if [[ $? -ne 0 ]]; then
    echo "Failed to set screensaver"
    return 2
  fi

  echo "Screensaver has been set"
}

# Enables or disables power saving mode via the tlp service.
# Arguments:
#  status: on or off
set_tlp () {
  local status="${1}"

  if [[ -z "${status}" ]]; then
    echo "Missing the tlp status"
    return 2
  elif [[ ! "${status}" =~ ^(on|off)$ ]]; then
    echo "Invalid tlp status"
    return 2
  fi

  if [[ "${status}" == "on" ]]; then
    sudo systemctl stop acpid.service &> /dev/null &&
    sudo systemctl disable acpid.service &> /dev/null &&
    sudo systemctl enable tlp.service &> /dev/null &&
    sudo systemctl start tlp.service &> /dev/null &&
    sudo systemctl daemon-reload
  else
    sudo systemctl stop tlp.service &> /dev/null &&
    sudo systemctl disable tlp.service &> /dev/null &&
    sudo systemctl enable acpid.service &> /dev/null &&
    sudo systemctl start acpid.service &> /dev/null &&
    sudo systemctl daemon-reload
  fi

  if [[ $? -ne 0 ]]; then
    echo "Failed to set tlp to ${status}"
    return 2
  fi

  echo "TLP has been set to ${status}"
}

# Sets the battery charge start/stop threshold to the given
# percentage limit.
# Arguments:
#  action:    start or stop
#  threshold: a percentage value between [0,100]
set_charge () {
  local action="${1}"
  local threshold="${2}"

  if [[ -z "${action}" ]]; then
    echo "Missing the charge action"
    return 2
  elif [[ ! "${action}" =~ ^(start|stop)$ ]]; then
    echo "Invalid charge action"
    return 2
  fi

  if [[ -z "${threshold}" ]]; then
    echo "Missing the threshold value"
    return 2
  elif [[ ! "${threshold}" =~ ^[0-9]{1,3}$ ]]; then
    echo "Invalid threshold value"
    return 2
  elif [[ ${threshold} -lt 0 ]] || [[ ${threshold} -gt 100 ]]; then
    echo "Threshold value out of range"
    return 2
  fi

  local config_file='/etc/tlp.d/00-main.conf'

  if [[ ! -f "${config_file}" ]]; then
    sudo rm -f /etc/tlp.d/00-template.conf
    sudo touch "${config_file}"
  fi

  local option=''

  if [[ "${action}" == "start" ]]; then
    option='START_CHARGE_THRESH_BAT'
  else
    option='STOP_CHARGE_THRESH_BAT'
  fi

  local index=0
  for index in 0 1; do
    if grep -qE "^${option}${index}=" "${config_file}"; then
      sudo sed -i "s/^\(${option}${index}=\).*/\1${threshold}/" "${config_file}"
    else
      echo "${option}${index}=${threshold}" | sudo tee -a "${config_file}" > /dev/null
    fi
  done

  # Restart TLP only if it is enabled
  local query='.[]|select(.unit == "tlp.service")'

  local tlp_process=''
  tlp_process="$(systemctl -a | jc --systemctl | jq -cr "${query}")" || return 1

  if [[ -n "${tlp_process}" ]]; then
    sudo systemctl restart tlp.service &> /dev/null || return 1
  fi

  echo "Charge ${action} threshold set to ${threshold}%"
}

# Shuts the system power down.
# Arguments:
#  None
shutdown_system () {
  systemctl poweroff

  if [[ $? -ne 0 ]]; then
    echo "Unable to shutdown the system"
    return 2
  fi
}

# Reboots the system.
# Arguments:
#  None
reboot_system () {
  systemctl reboot

  if [[ $? -ne 0 ]]; then
    echo "Unable to reboot the system"
    return 2
  fi
}

# Sets system in suspend mode.
# Arguments:
#  None
suspend_system () {
  systemctl suspend

  if [[ $? -ne 0 ]]; then
    echo "Unable to suspend the system"
    return 2
  fi
}

# Locks the screen making sure notifications stream is muted
# before lock and resets it back to it's previous state
# after user unlocks the screen.
# Arguments:
#  None
lock_screen () {
  local is_paused=''
  is_paused="$(notifications get state | jq -cr '.is_paused')"

  if [[ "${is_paused}" == "false" ]]; then
    notifications mute all
  fi

  slock

  if [[ $? -ne 0 ]]; then
    echo "Unable to lock the screen"
    return 2
  fi

  # Reset notifications stream to previous state
  if [[ "${is_paused}" == "false" ]]; then
    notifications unmute all
  fi
}

# Logs the user out, terminating the current xorg session.
# Arguments:
#  None
logout_user () {
  bspc quit

  if [[ $? -ne 0 ]]; then
    echo "Unable to log the user out"
    return 2
  fi
}

# Shows the help message.
# Arguments:
#  mode: once or none
# Outputs:
#  A long help message.
show_help () {
  if [[ "${1}" == "once" ]]; then
    echo "Usage: power COMMAND [OBJECT] [ARGUMENTS]..."

    echo -e "\nCOMMANDS"
    printf " %-20s %s\n" \
      "help" "Show this help message." \
      "" "" \
      "init locker" "Initialize the screen locker." \
      "init screensaver" "Initialize the screen saver." \
      "" "" \
      "shutdown" "Shut the system down." \
      "reboot" "Reboot the system." \
      "suspend" "Set system in suspend mode." \
      "lock" "Lock the screen." \
      "logout" "Log the user out."

    return 0
  fi

  echo "Usage: COMMAND [OBJECT] [ARGUMENTS]..."

  echo -e "\nCOMMANDS"
  printf " %-36s %s\n" \
    "help" "Show this help message." \
    "" "" \
    "show status" "Show the status of the system power." \
    "" "" \
    "set action [<handler> [<action>]]" "Set the action of a power handler to" \
    "" "poweroff, reboot, suspend or ignore." \
    "reset actions" "Reset to default action for all power handlers." \
    "" "" \
    "set locker <mins>" "Set the interval of the screen locker," \
    "" "where 0 means deactivate the locker." \
    "set screensaver <mins>" "Set the interval of the screen saver," \
    "" "where 0 means deactivate the screensaver." \
    "" "" \
    "set tlp on|off" "Enable or disable power saving mode." \
    "set charge start|stop <percent>" "Set the battery charge thresholds."
}

loop () {
  clear

  while true; do
    prompt && history -s "${REPLY}"

    set -f
    set_separator "line"
    local cmd=($(xargs -n1 <<< "${REPLY}"))
    restore_separator && set +f

    if [[ "${cmd[0]}" == "help" ]]; then
      show_help
      continue
    elif [[ "${cmd[0]}" == "clear" ]]; then
      clear
      continue
    elif [[ "${cmd[0]}" == "quit" ]]; then
      break
    elif [[ -z "${cmd[0]}" ]]; then
      continue
    fi

    case "${cmd[0]}" in
      "show")
        case "${cmd[1]}" in
          "status") show_status;;
          *) echo "Invalid or unknown command";;
        esac;;
      "set")
        case "${cmd[1]}" in
          "action") set_action "${cmd[2]}" "${cmd[3]}";;
          "locker") set_locker "${cmd[2]}";;
          "screensaver") set_screensaver "${cmd[2]}";;
          "tlp") set_tlp "${cmd[2]}";;
          "charge") set_charge "${cmd[2]}" "${cmd[3]}";;
          *) echo "Invalid or unknown command";;
        esac;;
      "reset")
        case "${cmd[1]}" in
          "actions") reset_actions;;
          *) echo "Invalid or unknown command";;
        esac;;
      *) echo "Invalid or unknown command";; 
    esac
    
    if [[ $? -eq 1 ]]; then
      echo "An unknown error has occurred"
    fi
  done

  clear
}

once () {
  case "${1}" in
    "help") show_help "once";;
    "init")
      case "${2}" in
        "locker") init_locker || abort;;
        "screensaver") init_screensaver || abort;;
        *) abort "Invalid or unknown command";;
      esac;;
    "shutdown") shutdown_system;;
    "reboot") reboot_system;;
    "suspend") suspend_system;;
    "lock") lock_screen;;
    "logout") logout_user;;
    *) abort "Invalid or unknown command";;
  esac

  if [[ $? -ne 0 ]]; then
    abort
  fi
}

if [[ $# -eq 0 ]]; then
  loop
else
  once "$@"
fi