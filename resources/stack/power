#!/bin/bash

set -o pipefail
source /opt/stack/utils

# Finds the ac power adapter data.
# Arguments:
#  None
# Outputs:
#  A json object of ac power data.
find_adapter () {
  acpi -a | jc --acpi | jq -cer '.[0]' || return 1
}

# Finds the battery power data.
# Arguments:
#  None
# Outputs:
#  A json object of battery power data.
find_battery () {
  local query=''
  query+='if length > 0 then .[0] else "" end'

  acpi -b -i | jc --acpi | jq -cer "${query}" || return 1
}

# Shows a prompt status and asks user to enter the
# next command, which is kept in the global var REPLY.
# Globals:
#  REPLY
# Arguments:
#  None
# Outputs:
#  A minimal prompt status line.
prompt () {
  local query=''
  query+='."on-line"|if . then "adapter" else "battery" end'

  local status=''
  status="$(find_adapter | jq -cer "${query}")"

  if [[ $? -ne 0 ]]; then
    status='none'
  fi

  read -rep "[power:${status}] " REPLY
}

# Shows the current status of the system's power.
# Arguments:
#  None
# Outputs:
#  A verbose list of text data.
show_status () {
  local query=''
  query+='"Adapter:   \(."on-line"|if . then "on" else "off" end)"'

  find_adapter | jq -cer "${query}" || return 1

  local battery=''
  battery="$(find_battery)" || return 1

  if [[ -n "${battery}" ]]; then
    local query=''
    query+='Battery:   yes\n'
    query+='State:     \(.state|ascii_downcase)\n'
    query+='Charge:    \(.charge_percent)%'
    query+="\(.design_capacity_mah|if . then \"\nCapacity:  \(.)mAh\" else \"\" end)"
    query="\"${query}\""

    echo "${battery}" | jq -cer "${query}" || return 1
  else
    echo "Battery:   no"
  fi
}

# Sets the action of the hander with the given name.
# Globals:
#  REPLY
# Arguments:
#  handler: power, reboot, suspend, lid, lid-powered or lid-docked
#  action:  poweroff, reboot, suspend or ignore
set_action () {
  local handler="${1}"
  local action="${2}"

  if [[ -z "${handler}" ]]; then
    local handlers=''
    handlers+='{"key":"power", "value":"power"},'
    handlers+='{"key":"reboot", "value":"reboot"},'
    handlers+='{"key":"suspend", "value":"suspend"},'
    handlers+='{"key":"lid", "value":"lid"},'
    handlers+='{"key":"lid-powered", "value":"lid-powered"},'
    handlers+='{"key":"lid-docked", "value":"lid-docked"}'
    handlers="[${handlers}]"

    pick_one "Select a power handler:" "${handlers}" "vertical" || return $?
    [[ -n "${REPLY}" ]] && handler="${REPLY}" || return 0
  fi

  if [[ ! "${handler}" =~ ^(power|reboot|suspend|lid|lid-powered|lid-docked)$ ]]; then
    echo "Invalid power handler"
    return 2
  fi

  if [[ -z "${action}" ]]; then
    local actions=''
    actions+='{"key":"poweroff", "value":"poweroff"},'
    actions+='{"key":"reboot", "value":"reboot"},'
    actions+='{"key":"suspend", "value":"suspend"},'
    actions+='{"key":"ignore", "value":"ignore"}'
    actions="[${actions}]"

    pick_one "Select an action:" "${actions}" "vertical" || return $?
    [[ -n "${REPLY}" ]] && action="${REPLY}" || return 0
  fi

  if [[ ! "${action}" =~ ^(poweroff|reboot|suspend|ignore)$ ]]; then
    echo "Invalid power action"
    return 2
  fi

  local option=''
  if [[ "${handler}" == "power" ]]; then
    option='HandlePowerKey'
  elif [[ "${handler}" == "reboot" ]]; then
    option='HandleRebootKey'
  elif [[ "${handler}" == "suspend" ]]; then
    option='HandleSuspendKey'
  elif [[ "${handler}" == "lid" ]]; then
    option='HandleLidSwitch'
  elif [[ "${handler}" == "lid-powered" ]]; then
    option='HandleLidSwitchExternalPower'
  else
    option='HandleLidSwitchDocked'
  fi

  local config_file='/etc/systemd/logind.conf'

  if grep -qE "^${option}=" "${config_file}"; then
    sudo sed -i "s/\(${option}=\).*/\1${action}/" "${config_file}"
  else
    echo "${option}=${action}" | sudo tee -a "${config_file}" > /dev/null
  fi

  systemctl kill -s HUP systemd-logind

  if [[ $? -ne 0 ]]; then
    echo "Failed to set ${handler} action"
    return 2
  fi

  echo "Action ${handler} set to ${action}"
}

# Resets the action of all power handers.
# Arguments:
#  None
reset_actions () {
  local config_file='/etc/systemd/logind.conf'

  sudo sed -i "/^HandlePowerKey=.*/d" "${config_file}"
  sudo sed -i "/^HandleRebootKey=.*/d" "${config_file}"
  sudo sed -i "/^HandleSuspendKey=.*/d" "${config_file}"
  sudo sed -i "/^HandleLidSwitch=.*/d" "${config_file}"
  sudo sed -i "/^HandleLidSwitchExternalPower=.*/d" "${config_file}"
  sudo sed -i "/^HandleLidSwitchDocked=.*/d" "${config_file}"

  systemctl kill -s HUP systemd-logind

  if [[ $? -ne 0 ]]; then
    echo "Failed to reset power actions"
    return 2
  fi

  echo "Power actions have been reset"
}

# Shows the help message.
# Arguments:
#  None
# Outputs:
#  A long help message.
show_help () {
  echo "Usage: COMMAND [OBJECT] [ARGUMENTS]..."

  echo -e "\nCOMMANDS"
  printf " %-36s %s\n" \
    "help" "Show this help message." \
    "" "" \
    "show status" "Show the status of the system power." \
    "" "" \
    "set action [<handler> [<action>]]" "Set the action of a power handler to" \
    "" "poweroff, reboot, suspend or ignore." \
    "reset actions" "Reset to default action for all power handlers."
}

loop () {
  clear

  while true; do
    prompt && history -s "${REPLY}"

    set -f
    set_separator "line"
    local cmd=($(xargs -n1 <<< "${REPLY}"))
    restore_separator && set +f

    if [[ "${cmd[0]}" == "help" ]]; then
      show_help
      continue
    elif [[ "${cmd[0]}" == "clear" ]]; then
      clear
      continue
    elif [[ "${cmd[0]}" == "quit" ]]; then
      break
    elif [[ -z "${cmd[0]}" ]]; then
      continue
    fi

    case "${cmd[0]}" in
      "show")
        case "${cmd[1]}" in
          "status") show_status;;
          *) echo "Invalid or unknown command";;
        esac;;
      "set")
        case "${cmd[1]}" in
          "action") set_action "${cmd[2]}" "${cmd[3]}";;
          *) echo "Invalid or unknown command";;
        esac;;
      "reset")
        case "${cmd[1]}" in
          "actions") reset_actions;;
          *) echo "Invalid or unknown command";;
        esac;;
      *) echo "Invalid or unknown command";; 
    esac
    
    if [[ $? -eq 1 ]]; then
      echo "An unknown error has occurred"
    fi
  done

  clear
}

loop