#!/usr/bin/env bash

set -o pipefail
source /opt/stack/utils

CONFIG_HOME="$HOME/.config/stack/theme"
WALLPAPERS_HOME="$CONFIG_HOME/wallpapers"
WALLPAPER_CONFIG="$CONFIG_HOME/wallpaper"

WALLPAPER_TYPES='jpg|jpeg|png'
WALLPAPER_MODES='center|fill|max|scale|tile'

require "feh"

prompt () {
  read -rep "[theme:${YE}ready$RS] " REPLY
}

set_wallpaper () {
  local IMAGE=$1
  local MODE=$2

  if [ -z "$IMAGE" ]; then
    local IMAGES="$(ls -1 "$WALLPAPERS_HOME" | awk '{ORS="'$AES'";} /.+\.('$WALLPAPER_TYPES')$/{print}')"
    local LEN=$(count "$IMAGES")

    if [ $LEN = 0 ]; then
      echo "No wallpaper images have found"
      return
    fi

    pick_one "Select an image file:" "$IMAGES" "vertical-6" || return 1
    [ -z "$REPLY" ] && return

    IMAGE="$WALLPAPERS_HOME/$(value "$REPLY")"
  fi

  if [[ ! "$IMAGE" =~ ^/ ]]; then
    echo "File path should be an absolute path"
    return 1
  elif [ ! -f "$IMAGE" ]; then
    echo "Invalid or unknown file path"
    return 1
  elif [[ ! "$IMAGE" =~ .+\.($WALLPAPER_TYPES)$ ]]; then
    echo "Only jpeg or png files are supported"
    return 1
  fi

  if [ -z "$MODE" ]; then
    local MODES="$(echo "$WALLPAPER_MODES" | awk -F'|' '{
      out="";
      for (i=1; i<NF; i++) {out=out $i "'${AES}'"};
      print out
    }')"

    pick_one "Select a mode:" "$MODES" "horizontal" || return 1
    [ -z "$REPLY" ] && return

    MODE="$(value "$REPLY")"
  elif [[ ! "$MODE" =~ ^${WALLPAPER_MODES}$ ]]; then
    echo "Invalid wallpaper mode"
    return 1
  fi

  local IMAGE_NAME="$(basename "$IMAGE")"

  if [ ! "$IMAGE" = "$WALLPAPERS_HOME/$IMAGE_NAME" ]; then
    while [ -f "$WALLPAPERS_HOME/$IMAGE_NAME" ]; do
      IMAGE_NAME="copy_${IMAGE_NAME}"
    done

    cp "$IMAGE" "$WALLPAPERS_HOME/$IMAGE_NAME"
    IMAGE="$WALLPAPERS_HOME/$IMAGE_NAME"
  fi

  printf "%s\n" \
    "file=$IMAGE" \
    "mode=$MODE" > "$WALLPAPER_CONFIG"

  load_wallpaper
}

remove_wallpaper () {
  local IMAGE=$1

  if [ -z "$IMAGE" ]; then
    local IMAGES="$(ls -1 "$WALLPAPERS_HOME" | awk '{ORS="'$AES'";} /.+\.('$WALLPAPER_TYPES')$/{print}')"
    local LEN=$(count "$IMAGES")

    if [ $LEN = 0 ]; then
      echo "No wallpaper images have found"
      return
    fi

    pick_one "Select an image file:" "$IMAGES" "vertical-6" || return 1
    [ -z "$REPLY" ] && return

    IMAGE="$(value "$REPLY")"
  fi

  IMAGE="$WALLPAPERS_HOME/$IMAGE"

  if [ ! -f "$IMAGE" ]; then
    echo "No wallpaper $IMAGE has found"
    return 1
  elif grep -qE "^file=$IMAGE" "$WALLPAPER_CONFIG"; then
    echo "Cannot delete the active wallpaper"
    return 1
  fi

  rm -f "$IMAGE" &&
    echo "Wallpaper $IMAGE has been removed" ||
    echo "Failed to remove wallpaper"
}

load_wallpaper () {
  if [ ! -f "$WALLPAPER_CONFIG" ]; then
    echo "No wallpaper config file found"
    return 1
  fi

  local FILE="$(cat "$WALLPAPER_CONFIG" | awk -F'=' '/^file=/{print $2}')"

  if [[ ! "$FILE" =~ ^/ ]]; then
    echo "File path should be an absolute path"
    return 1
  elif [ ! -f "$FILE" ]; then
    echo "Invalid or unknown file path"
    return 1
  elif [[ ! "$FILE" =~ .+\.($WALLPAPER_TYPES)$ ]]; then
    echo "Only jpeg or png files are supported"
    return 1
  fi

  local MODE="$(cat "$WALLPAPER_CONFIG" | awk -F'=' '/^mode=/{print $2}')"

  if [[ ! "$MODE" =~ ^${WALLPAPER_MODES}$ ]]; then
    echo "Invalid wallpaper mode"
    return 1
  fi

  feh --no-fehbg --bg-$MODE "$FILE"

  if [ ! $? -eq 0 ]; then
    echo "Failed to load the wallpaper"
    return 1
  fi

  echo "Wallpaper has been loaded"
}

help () {
  if [ "$1" = "once" ]; then
    echo "Usage: theme COMMAND [OBJECT] [ARGUMENTS]..."

    echo -e "\nCOMMANDS"
    printf " %-16s %s\n" \
      "help" "Show this help message." \
      "" "" \
      "load wallpaper" "Load the desktop wallpaper."

    return
  fi

  echo "Usage: COMMAND [OBJECT] [ARGUMENTS]..."

  echo -e "\nCOMMANDS"
  printf " %-34s %s\n" \
    "help" "Show this help message." \
    "" "" \
    "set wallpaper [<image> [<mode>]]" "Set the desktop wallpaper, where mode" \
    "" "could be center, fill, scale, max or tile." \
    "remove wallpaper [<image>]" "Remove a wallpaper."
}

loop () {
  clear

  while true; do
    prompt && history -s "$REPLY"

    set -f
    set_separator "line"
    local CMD=($(xargs -n1 <<< "$REPLY"))
    restore_separator && set +f

    if [ "${CMD[0]}" = "help" ]; then
      help
      continue
    elif [ "${CMD[0]}" = "clear" ]; then
      clear
      continue
    elif [ "${CMD[0]}" = "quit" ]; then
      break
    elif [ -z "${CMD[0]}" ]; then
      continue
    fi

    case "${CMD[0]}" in
      "set")
        case "${CMD[1]}" in
          "wallpaper") set_wallpaper "${CMD[2]}" "${CMD[3]}";;
          *) echo "Unknown or invalid command";;
        esac;;
      "remove")
        case "${CMD[1]}" in
          "wallpaper") remove_wallpaper "${CMD[2]}";;
          *) echo "Unknown or invalid command";;
        esac;;
      *) echo "Unknown or invalid command";; 
    esac
  done

  clear
}

once () {
  case "$1" in
    "help") help once;;
    "load")
      case "$2" in
        "wallpaper") load_wallpaper || abort;;
        *) abort "Invalid or unknown command";;
      esac;;
    *) abort "Invalid or unknown command";;
  esac
}

if [ $# = 0 ]; then
  loop
else
  once "$@"
fi