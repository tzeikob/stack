#!/usr/bin/env bash

set -o pipefail
source /opt/stack/utils

CONFIG_HOME="$HOME/.config/stack/theme"
WALLPAPERS_HOME="$CONFIG_HOME/wallpapers"

SETTINGS="$CONFIG_HOME/.settings"

WALLPAPER_TYPES='jpg|jpeg|png'
WALLPAPER_MODES='center|fill|max|scale|tile'

require "feh"

prompt () {
  read -rep "[theme:${YE}ready$RS] " REPLY
}

wallpapers () {
  if [ ! -d  "$WALLPAPERS_HOME" ]; then
    return 1
  fi

  ls -1 "$WALLPAPERS_HOME" | awk '{ORS="'$AES'";} /.+\.('$WALLPAPER_TYPES')$/{print}'
}

pick_wallpaper () {
  local NAMES="$(wallpapers || echo "err:$?")"

  if [[ "$NAMES" =~ ^err: ]]; then
    echo "Unable to find wallpapers"
    return 1
  fi

  if [ $(count "$NAMES") = 0 ]; then
    echo "No wallpapers have found"
    return 1
  fi

  pick_one "Select a wallpaper:" "$NAMES" "vertical-6"
}

list_wallpapers () {
  local NAMES="$(wallpapers || echo "err:$?")"

  if [[ "$NAMES" =~ ^err: ]]; then
    echo "Unable to find wallpapers"
    return 1
  fi

  local LEN=$(count "$NAMES")

  if [ $LEN = 0 ]; then
    echo "No wallpapers have found"
    return 1
  fi

  local I=0
  for ((I=0; I<$LEN; I++)); do
    local NAME="$(element "$NAMES" "$I" | value)"

    [ $I -gt 0 ] && echo
    echo "Name: ${NAME}"
    echo "Size: $(du -h "$WALLPAPERS_HOME/$NAME" | awk '{print $1}')"
  done
}

set_wallpaper () {
  local NAME=$1
  local MODE=$2

  if [ -z "$NAME" ]; then
    pick_wallpaper || return 1
    [ -z "$REPLY" ] && return

    NAME="$(value "$REPLY")"
  fi

  if [[ "$NAME" =~ /+ ]]; then
    echo "Invalid name argument"
    return 1
  fi

  NAME="$(basename "$NAME")"
  local WALLPAPER="$WALLPAPERS_HOME/$NAME"

  if [[ ! "$WALLPAPER" =~ .+\.($WALLPAPER_TYPES)$ ]]; then
    echo "Invalid wallpaper file type"
    return 1
  elif [ ! -f "$WALLPAPER" ]; then
    echo "No wallpaper found with name $NAME"
    return 1
  fi

  if [ -z "$MODE" ]; then
    local MODES="$(echo "$WALLPAPER_MODES" | awk -F'|' '{
      out="";
      for (i=1; i<NF; i++) {out=out $i "'${AES}'"};
      print out
    }')"

    pick_one "Select a mode:" "$MODES" "horizontal" || return 1
    [ -z "$REPLY" ] && return

    MODE="$(value "$REPLY")"
  elif [[ ! "$MODE" =~ ^${WALLPAPER_MODES}$ ]]; then
    echo "Invalid wallpaper mode"
    return 1
  fi

  feh --no-fehbg --bg-$MODE "$WALLPAPER"

  if [ ! $? = 0 ]; then
    echo "Failed to set wallpaper"
    return 1
  fi

  echo "Wallpaper has been set to $NAME"

  if [ -f "$SETTINGS" ]; then
    set_prop '.wallpaper.file' "$NAME" "$SETTINGS"
    set_prop '.wallpaper.mode' "$MODE" "$SETTINGS"
  else
    echo '{"wallpaper": {"file": "'$NAME'", "mode": "'$MODE'"}}' > "$SETTINGS"
  fi
}

add_wallpaper () {
  local IMAGE=$1

  if [ -z "$IMAGE" ]; then
    echo "Missing image file argument"
    return 1
  elif [[ ! "$IMAGE" =~ ^/ ]]; then
    echo "File path should be an absolute path"
    return 1
  elif [[ ! "$IMAGE" =~ .+\.($WALLPAPER_TYPES)$ ]]; then
    echo "Invalid image file type"
    return 1
  elif [ ! -f "$IMAGE" ]; then
    echo "No image found with path $IMAGE"
    return 1
  fi

  local IMAGE_NAME="$(basename "$IMAGE")"

  if [ "$IMAGE" = "$WALLPAPERS_HOME/$IMAGE_NAME" ]; then
   echo "Image file is already in wallpapers"
   return 1
  fi

  while [ -f "$WALLPAPERS_HOME/$IMAGE_NAME" ]; do
    IMAGE_NAME="copy_${IMAGE_NAME}"
  done

  mkdir -p "$WALLPAPERS_HOME"
  cp "$IMAGE" "$WALLPAPERS_HOME/$IMAGE_NAME" &&
    echo "Image has been added to wallpapers"

  confirm "Want to set this as wallpaper?" || return 1
  [ -z "$REPLY" ] && return
  [ "$(value "$REPLY")" = "no" ] && return

  set_wallpaper "$IMAGE_NAME"
}

remove_wallpaper () {
  local NAME=$1

  if [ -z "$NAME" ]; then
    pick_wallpaper || return 1
    [ -z "$REPLY" ] && return

    NAME="$(value "$REPLY")"
  fi

  if [[ "$NAME" =~ /+ ]]; then
    echo "Invalid name argument"
    return 1
  fi

  NAME="$(basename "$NAME")"
  local WALLPAPER="$WALLPAPERS_HOME/$NAME"

  if [[ ! "$WALLPAPER" =~ .+\.($WALLPAPER_TYPES)$ ]]; then
    echo "Invalid wallpaper file type"
    return 1
  elif [ ! -f "$WALLPAPER" ]; then
    echo "No wallpaper found with name $NAME"
    return 1
  fi
  
  if [ -f "$SETTINGS" ]; then
    local ACTIVE="$(get_prop '.wallpaper.file' "$SETTINGS")"

    if [ "$WALLPAPER" = "$WALLPAPERS_HOME/$ACTIVE" ]; then
      echo "Cannot delete the active wallpaper"
      return 1
    fi
  fi

  rm "$WALLPAPER" &&
    echo "Wallpaper $NAME has been removed" ||
    echo "Failed to remove wallpaper"
}

load_wallpaper () {
  if [ ! -f "$SETTINGS" ]; then
    echo "Unable to find wallpaper configuration"
    return 1
  fi

  local FILE="$(get_prop '.wallpaper.file' "$SETTINGS")"

  if [ -z "$FILE" ]; then
    echo "Missing wallpaper file"
    return 1
  elif [[ "$FILE" =~ /+ ]]; then
    echo "Invalid wallpaper file name"
    return 1
  elif [[ ! "$FILE" =~ .+\.($WALLPAPER_TYPES)$ ]]; then
    echo "Invalid wallpaper file type"
    return 1
  elif [ ! -f "$WALLPAPERS_HOME/$FILE" ]; then
    echo "Wallpaper $FILE does not exists"
    return 1
  fi

  local MODE="$(get_prop '.wallpaper.mode' "$SETTINGS")"

  if [ -z "$MODE" ]; then
    echo "Missing wallpaper mode"
    return 1
  elif [[ ! "$MODE" =~ ^${WALLPAPER_MODES}$ ]]; then
    echo "Invalid wallpaper mode"
    return 1
  fi

  set_wallpaper "$FILE" "$MODE"

  if [ ! $? -eq 0 ]; then
    echo "Failed to load the wallpaper"
    return 1
  fi

  echo "Wallpaper has been loaded"
}

help () {
  if [ "$1" = "once" ]; then
    echo "Usage: theme COMMAND [OBJECT] [ARGUMENTS]..."

    echo -e "\nCOMMANDS"
    printf " %-16s %s\n" \
      "help" "Show this help message." \
      "" "" \
      "load wallpaper" "Load the desktop wallpaper."

    return
  fi

  echo "Usage: COMMAND [OBJECT] [ARGUMENTS]..."

  echo -e "\nCOMMANDS"
  printf " %-34s %s\n" \
    "help" "Show this help message." \
    "" "" \
    "list wallpapers" "List all the wallapers." \
    "set wallpaper [<name> [<mode>]]" "Set the desktop wallpaper, where mode" \
    "" "could be center, fill, scale, max or tile." \
    "add wallpaper <image>" "Add an image to the wallpapers set." \
    "remove wallpaper [<name>]" "Remove a wallpaper from the wallpapers set."
}

loop () {
  clear

  while true; do
    prompt && history -s "$REPLY"

    set -f
    set_separator "line"
    local CMD=($(xargs -n1 <<< "$REPLY"))
    restore_separator && set +f

    if [ "${CMD[0]}" = "help" ]; then
      help
      continue
    elif [ "${CMD[0]}" = "clear" ]; then
      clear
      continue
    elif [ "${CMD[0]}" = "quit" ]; then
      break
    elif [ -z "${CMD[0]}" ]; then
      continue
    fi

    case "${CMD[0]}" in
      "set")
        case "${CMD[1]}" in
          "wallpaper") set_wallpaper "${CMD[2]}" "${CMD[3]}";;
          *) echo "Unknown or invalid command";;
        esac;;
      "list")
        case "${CMD[1]}" in
          "wallpapers") list_wallpapers;;
          *) echo "Unknown or invalid command";;
        esac;;
      "add")
        case "${CMD[1]}" in
          "wallpaper") add_wallpaper "${CMD[2]}";;
          *) echo "Unknown or invalid command";;
        esac;;
      "remove")
        case "${CMD[1]}" in
          "wallpaper") remove_wallpaper "${CMD[2]}";;
          *) echo "Unknown or invalid command";;
        esac;;
      *) echo "Unknown or invalid command";; 
    esac
  done

  clear
}

once () {
  case "$1" in
    "help") help once;;
    "load")
      case "$2" in
        "wallpaper") load_wallpaper || abort;;
        *) abort "Invalid or unknown command";;
      esac;;
    *) abort "Invalid or unknown command";;
  esac
}

if [ $# = 0 ]; then
  loop
else
  once "$@"
fi