#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/printers/helpers

# Shows a short status of cups service and printers.
# Arguments:
#  None
# Outputs:
#  A list of cups and printer data.
show_status () {
  systemctl status --lines 0 --no-pager cups.service | awk '{
    if ($0 ~ / *Active/) {
      l = "Service"
      v = $2" "$3
    } else l = ""

    if (l) printf "%-10s %s\n",l":",v
  }' || return 1

  echo "Cups:      $(cups-config --version)"
  echo "API:       $(cups-config --api-version)"
  echo "Dir:       $(cups-config --datadir)"

  find_jobs | jq -cer "\"Jobs:      \(length)\"" || return 1

  local destinations=''
  destinations="$(find_destinations |
    jq -cer 'if .|length>0 then .[]|.name else "" end')" || return 1

  if [[ -n "${destinations}" ]]; then
    local query=''
    query+='Printer:   \(.name) \(if .is_shared == "true" then "[shared]" else "" end)\n'
    query+='URI:       \(.uri)\n'
    query+='Model:     \(.model)\n'
    query+='Desc:      \(.description)\n'
    query+='Location:  \(.location)'
    query="\"${query}\""

    local destination=''
    while read -r destination; do
      echo ""
      find_destination "${destination}" | jq -cer "${query}" || return 1
    done <<< "${destinations}"
  fi
}

# Shows the list of all printers.
# Arguments:
#  None
# Outputs:
#  A list of printers.
list_printers () {
  local destinations=''
  destinations="$(find_destinations)"

  if [[ $? -ne 0 ]]; then
    echo "Unable to read print destinations"
    return 2
  fi

  local len=0
  len="$(count "${destinations}")" || return 1

  if [[ ${len} -eq 0 ]]; then
    echo "No printers have found"
    return 0
  fi

  local query=''
  query+='Name:  \(.name)\n'
  query+='URI:   \(.uri)'
  query="[.[]|\"${query}\"]|join(\"\n\n\")"

  echo "${destinations}" | jq -cer "${query}" || return 1
}

# Shows the data of the printer with the given
# print destination name.
# Arguments:
#  name: the name of a print destination
# Outputs:
#  A long list of printer data.
show_printer () {
  local name="${1}"

  if [[ -z "${name}" ]]; then
    pick_printer || return $?
    [[ -n "${REPLY}" ]] && name="${REPLY}" || return 0
  fi

  if ! exists_destination "${name}"; then
    echo "Cannot find printer ${name}"
    return 2
  fi

  local query=''
  query+='Name:       \(.name)\n'
  query+='URI:        \(.uri)\n'
  query+='Model:      \(.model)\n'
  query+='Desc:       \(.description)\n'
  query+='Location:   \(.location)\n'
  query+='Protocol:   \(.protocol)\n'
  query+='State:      \(.state)\n'
  query+='Accepts:    \(.accepting_jobs)\n'
  query+='Shared:     \(.is_shared)\n'
  query+='Temporary:  \(.is_temp)\n'
  query+='Color:      \(.ColorModel) [\(.color)]\n'
  query+='Quality:    \(.Quality)\n'
  query+='Toner:      \(.TonerSaveMode)\n'
  query+='Page:       \(.PageSize)\n'
  query+='Paper:      \(.MediaType)'
  query="\"${query}\""

  find_destination "${name}" | jq -cer "${query}" || return 1
}

# Adds the printer with the given uri.
# Arguments:
#  name: the name of print destination
#  uri:  the uri of a print destination
add_printer () {
  local name="${1}"
  local uri="${2}"

  if [[ -z "${name}" ]]; then
    echo "Missing the name value"
    return 2
  elif exists_destination "${name}"; then
    echo "Printer with name ${name} already exists"
    return 2
  fi

  if [[ -z "${uri}" ]]; then
    echo "Discovering print destinations..."

    local query=''
    query+='{key: .uri, value: "\(.uri)\(.name|if (. and . != "") then " [\(.)]" else "" end)"}'
    query="[.[]|${query}]"

    local destinations=''
    destinations="$(discover_destinations | jq -cer "${query}")" || return 1

    local len=0
    len="$(count "${destinations}")" || return 1

    if [[ ${len} -eq 0 ]]; then
      echo "No printers have been discovered"
      return 0
    fi

    pick_one "Select a printer:" "${destinations}" "vertical" || return $?
    [[ -n "${REPLY}" ]] && uri="${REPLY}" || return 0
  fi

  ask "Enter a description:" ".+" || return $?
  local desc="${REPLY}"

  ask "Enter a location name:" ".+" || return $?
  local loc="${REPLY}"

  local driver=''
  pick_driver || return $?
  [[ -n "${REPLY}" ]] && driver="${REPLY}" || return 0

  lpadmin -p "${name}" -E \
    -o printer-is-shared=false \
    -D "${desc}" -L "${loc}" -v "${uri}" -m "${driver}" &> /dev/null

  if [[ $? -ne 0 ]]; then
    echo "Failed to add printer ${uri}"
    return 2
  fi

  local is_default=''
  confirm "Want to set this printer as default?" || return $?
  [[ -n "${REPLY}" ]] && is_default="${REPLY}" || return 0

  if [[ "${is_default}" == "yes" ]]; then
    lpoptions -d "${name}" &> /dev/null ||
      echo "Failed to set printer as default"
  fi

  echo "Printer ${uri} has been added"
}

# Removes the printer destination with the
# given name.
# Arguments:
#  name: the name of a print destination
remove_printer () {
  local name="${1}"

  if [[ -z "${name}" ]]; then
    pick_printer || return $?
    [[ -n "${REPLY}" ]] && name="${REPLY}" || return 0
  fi

  if ! exists_destination "${name}"; then
    echo "Cannot find printer ${name}"
    return 2
  fi

  lpadmin -x "${name}" &> /dev/null

  if [[ $? -ne 0 ]]; then
    echo "Failed to remove printer ${name}"
    return 2
  fi

  echo "Printer ${name} has been removed"
}

# Shares the printer with the given name
# to the local network.
# Arguments:
#  name: the name of a print destination
share_printer () {
  local name="${1}"

  if [[ -z "${name}" ]]; then
    pick_printer || return $?
    [[ -n "${REPLY}" ]] && name="${REPLY}" || return 0
  fi

  if ! exists_destination "${name}"; then
    echo "Cannot find printer ${name}"
    return 2
  fi

  lpadmin -p "${name}" -o printer-is-shared=true &> /dev/null

  if [[ $? -ne 0 ]]; then
    echo "Failed to share printer ${name}"
    return 2
  fi

  echo "Printer ${name} has been shared"
}

# Unshares the printer with the given name
# of the local network.
# Arguments:
#  name: the name of a print destination
unshare_printer () {
  local name="${1}"

  if [[ -z "${name}" ]]; then
    pick_printer || return $?
    [[ -n "${REPLY}" ]] && name="${REPLY}" || return 0
  fi

  if ! exists_destination "${name}"; then
    echo "Cannot find printer ${name}"
    return 2
  fi

  lpadmin -p "${name}" -o printer-is-shared=false &> /dev/null

  if [[ $? -ne 0 ]]; then
    echo "Failed to unshare printer ${name}"
    return 2
  fi

  echo "Printer ${name} has been unshared"
}

# Sets the given option to the printer with
# the given name.
# Arguments:
#  name:  the name of a print destination
#  key:   the key name of the option
#  value: the value of the option
set_option () {
  local name="${1}"
  local key="${2}"
  local value="${3}"

  if [[ -z "${name}" ]]; then
    pick_printer || return $?
    [[ -n "${REPLY}" ]] && name="${REPLY}" || return 0
  fi

  if ! exists_destination "${name}"; then
    echo "Cannot find printer ${name}"
    return 2
  fi

  if [[ -z "${key}" ]]; then
    echo "Missing the option key value"
    return 2
  elif [[ ! "${key}" =~ ^(Quality|PageSize|MediaType|TonerSaveMode|printer-error-policy)$ ]]; then
    echo "Option ${key} is not supported"
    return 2
  fi

  if [[ -z "${value}" ]]; then
    case "${key}" in
      "Quality") pick_quality || return $?;;
      "PageSize") pick_page_size || return $?;;
      "MediaType") pick_paper_type || return $?;;
      "TonerSaveMode") pick_toner_mode || return $?;;
      "printer-error-policy") pick_error_policy || return $?;;
      *) echo "Unknown or invalid printer option" && return 2;;
    esac

    [[ -n "${REPLY}" ]] && value="${REPLY}" || return 0
  fi

  local re=''
  re+='600dpi|1200dpi|'
  re+='Letter|Legal|A4|A5|Executive|Folio|JB5|B5-ISO|COM10|Monarch|DL|C5|Oficio_S|PCard4x6|'
  re+='Save|Standard|'
  re+='None|Plain|Thick|Thin|Bond|Color|Card|Labels|Preprinted|Cotton|Archive|Recycled|Envelope|'
  re+='abort-job|retry-current-job|retry-job|stop-printer'

  if [[ ! "${value,,}" =~ ^(${re,,})$ ]]; then
    echo "Invalid option value"
    return 2
  fi

  lpadmin -p "${name}" -o "${key}"="${value}"

  if [[ $? -ne 0 ]]; then
    echo "Failed to set printer option ${key}"
    return 2
  fi

  echo "Printer ${key} set to ${value}"
}

# Sets the printer with the given name as default
# print destination.
# Arguments:
#  name: the name of a print destination
set_default () {
  local name="${1}"

  if [[ -z "${name}" ]]; then
    pick_printer || return $?
    [[ -n "${REPLY}" ]] && name="${REPLY}" || return 0
  fi

  if ! exists_destination "${name}"; then
    echo "Cannot find printer ${name}"
    return 2
  fi

  lpoptions -d "${name}" &> /dev/null

  if [[ $? -ne 0 ]]; then
    echo "Failed to set ${name} as default printer"
    return 2
  fi

  echo "Printer ${name} set as default"
}

# Shows the list of all queued print jobs.
# Arguments:
#  None
# Outputs:
#  A list of print jobs.
list_jobs () {
  local jobs=''
  jobs="$(find_jobs)"

  if [[ $? -ne 0 ]]; then
    echo "Unable to read print jobs"
    return 2
  fi

  local len=0
  len="$(count "${jobs}")" || return 1

  if [[ ${len} -eq 0 ]]; then
    echo "No active print jobs have found"
    return 0
  fi

  local query=''
  query+='ID:    \(.id)\n'
  query+='Rank:  \(.rank)\n'
  query+='File:  \(.file)\n'
  query+='Size:  \(.size)'
  query="[.[]|\"${query}\"]|join(\"\n\n\")"

  echo "${jobs}" | jq -cer "${query}" || return 1
}

# Cancels the queued job with the given id.
# Arguments:
#  id: the id of a print job
cancel_job () {
  local id="${1}"

  if [[ -z "${id}" ]]; then
    pick_job || return $?
    [[ -n "${REPLY}" ]] && id="${REPLY}" || return 0
  fi

  if ! exists_job "${id}"; then
    echo "Cannot find print job ${id}"
    return 2
  fi

  cancel -x "${id}"

  if [[ $? -ne 0 ]]; then
    echo "Failed to cancel print job ${id}"
    return 2
  fi

  echo "Print job ${id} has been canceled"
}

# Restarts the cup service.
# Arguments:
#  None
restart () {
  sudo echo "Restarting the cups service..."

  sudo systemctl restart cups.service

  if [[ $? -ne 0 ]]; then
    echo "Failed to restart cups service"
    return 2
  fi

  echo "Cups service has been restarted"
}

