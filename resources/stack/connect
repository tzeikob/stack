#!/usr/bin/env bash

source ~/.config/stack/utils

require "networkmanager"
require "wpa_supplicant"
require "wireless_tools"

show_status () {
  nmcli --colors no general status

  local OLD_IFS=$IFS && IFS=","

  local CONNECTIONS=($(
    nmcli -g DEVICE,TYPE,STATE,CONNECTION device |
      trim |
      awk -v FS=':' -v OFS=':' '{if ($3 == "connected" ) {print $4","}}' |
      no_breaks
  ))

  IFS=$OLD_IFS

  for CONNECTION in "${CONNECTIONS[@]}"; do
    echo
    nmcli --colors no --fields \
      "connection.interface-name, \
      connection.id, \
      connection.uuid, \
      connection.type, \
      connection.interface-name, \
      connection.autoconnect, \
      802-11-wireless.ssid, \
      802-11-wireless.mode, \
      802-11-wireless.band, \
      802-11-wireless.channel, \
      802-11-wireless.seen-bssids, \
      802-11-wireless-security.key-mgmt, \
      ipv4.method, \
      ipv6.method, \
      proxy.method, \
      GENERAL.STATE, \
      IP4.ADDRESS, \
      IP4.GATEWAY, \
      IP4.ROUTE, \
      IP4.DNS, \
      IP6.ADDRESS, \
      IP6.GATEWAY, \
      IP6.ROUTE" \
      connection show "$CONNECTION"
  done
}

power () {
  local OBJECT=$1
  local STATUS=${2:-"on"}

  if [ "$OBJECT" = "network" ]; then
    echo "Powering network $STATUS..."
    nmcli networking "$STATUS" &&
      sleep 6 &&
      echo "Network set to $STATUS status" ||
      echo "Unable to power $STATUS the network"
  elif [ "$OBJECT" = "wifi" ]; then
    echo "Powering wifi $STATUS..."
    nmcli radio wifi "$STATUS" &&
      sleep 6 &&
      echo "Wifi set to $STATUS status" ||
      echo "Unable to power $STATUS the wifi"
  else
    echo "Unknown or invalid object: $OBJECT"
  fi
}

show_devices () {
  local TYPE=$1
  
  if [ -z "$TYPE" ]; then
    nmcli --colors no device
  else
    nmcli device | awk -v t=$TYPE '{if ($2 == t || $2 == "TYPE") {print}}'
  fi
}

show_connections () {
  local TYPE=$1

  if [ -z "$TYPE" ]; then
    nmcli --colors no connection
  else
    nmcli --color no connection | awk -v t=$TYPE '{if ($3 == t || $3 == "TYPE") {print}}'
  fi
}

scan_networks () {
  local OLD_IFS=$IFS && IFS=","

  local NETWORKS=($(
    nmcli -f SIGNAL,SSID,IN-USE -t device wifi list |
      trim |
      awk -F: '{if ($3 == "*") {print "["$1"] \033[32m"$2"\033[0m,"} \
        else {print "["$1"] \033[35m"$2"\033[0m,"}}' |
      no_breaks
  ))

  IFS=$OLD_IFS

  print 3 40 "${NETWORKS[@]}"
}

select_object () {
  local OBJECT=$1
  local NAME=$2

  if [ "$OBJECT" = "device" ]; then
    SEL_DEVICE=$NAME
    SEL_CONNECTION=""
    SEL=$SEL_DEVICE
  elif [ "$OBJECT" = "connection" ]; then
    SEL_DEVICE=""
    SEL_CONNECTION=$NAME
    SEL=$SEL_CONNECTION
  else
    echo "Unknown or invalid object: $OBJECT"
  fi
}

deselect () {
  SEL_DEVICE=""
  SEL_CONNECTION=""
  SEL=""
}

show () {
  local OBJECT=$1
  local NAME=$2

  if [ "$OBJECT" = "device" ]; then
    nmcli --colors no device show "$NAME"
  elif [ "$OBJECT" = "connection" ]; then
    nmcli --colors no --fields \
      "connection.interface-name, \
      connection.id, \
      connection.uuid, \
      connection.type, \
      connection.interface-name, \
      connection.autoconnect, \
      802-11-wireless.ssid, \
      802-11-wireless.mode, \
      802-11-wireless.band, \
      802-11-wireless.channel, \
      802-11-wireless.seen-bssids, \
      802-11-wireless-security.key-mgmt, \
      ipv4.method, \
      ipv6.method, \
      proxy.method, \
      GENERAL.STATE, \
      IP4.ADDRESS, \
      IP4.GATEWAY, \
      IP4.ROUTE, \
      IP4.DNS, \
      IP6.ADDRESS, \
      IP6.GATEWAY, \
      IP6.ROUTE" \
      connection show "$NAME"
  else
    echo "Unknown or invalid object: $OBJECT"
  fi
}

up () {
  local OBJECT=$1
  local NAME=$2

  if [ "$OBJECT" = "device" ]; then
    nmcli device connect "$NAME"
  elif [ "$OBJECT" = "connection" ]; then
    nmcli connection up "$NAME"
  else
    echo "Unknown or invalid object: $OBJECT"
  fi
}

down () {
  local OBJECT=$1
  local NAME=$2

  if [ "$OBJECT" = "device" ]; then
    nmcli device disconnect "$NAME"
  elif [ "$OBJECT" = "connection" ]; then
    nmcli connection down "$NAME"
  else
    echo "Unknown or invalid object: $OBJECT"
  fi
}

connect_wireless () {
  askme "Do you want to create a new connection?" "yes" "no"

  if [ "$REPLY" = "yes" ]; then
    echo
    scan_wireless

    askme "Enter the SSID of the network:" ".*"
    local SSID=$REPLY

    askme "Enter the secret key:" ".*"
    local SECRET=$REPLY

    nmcli device wifi connect "$SSID" password "$SECRET" hidden yes
  else
    echo
    nmcli connection show | awk '{if ($3 == "wifi" || $3 == "TYPE") {print}}'

    askme "Enter the name of the connection to enable?" ".*"

    nmcli connection up "$REPLY"
  fi
}

disconnect_wireless () {
  echo
  nmcli device | awk '{if ($2 == "wifi" || $2 == "TYPE") {print}}'

  askme "Enter the network interface (wlxxx):" ".*"

  nmcli device disconnect "$REPLY"
}

set_wireless () {
  local STATUS=$1

  echo "Setting wifi device power to $STATUS..."

  nmcli radio wifi $STATUS

  echo "Wifi device power set to $STATUS"
}

while true; do
  if [ -z "$SEL" ]; then
    NETWORKING=$(nmcli networking)
    STATUS=$(nmcli -g STATE,CONNECTIVITY general status)

    FOREGROUND=$WHITE
    if [ "$NETWORKING" = "enabled" ]; then
      if [[ "$STATUS" =~ ^connected ]]; then
        FOREGROUND=$GREEN
      elif [[ "$STATUS" =~ ^disconnected ]]; then
        FOREGROUND=$RED
      else
        FOREGROUND=$YELLOW
      fi
    fi

    prompt "$STATUS" "$FOREGROUND"
  else
    prompt "$SEL" "$YELLOW"
  fi

  history -s "$REPLY"
  CMD=($(echo "$REPLY" | tr ':' '\n'))

  if [ "${CMD[0]}" = "quit" ]; then
    break
  elif [ "${CMD[0]}" = "clear" ]; then
    clear
    continue
  fi

  if [ -z "$SEL" ]; then
    if [ "${CMD[0]}" = "status" ]; then
      show_status
    elif [ "${CMD[0]}" = "power" ]; then
      power "${CMD[@]:1}"
    elif [ "${CMD[0]}" = "devices" ]; then
      show_devices "${CMD[@]:1}"
    elif [ "${CMD[0]}" = "connections" ]; then
      show_connections "${CMD[@]:1}"
    elif [ "${CMD[0]}" = "scan" ]; then
      scan_networks
    elif [ "${CMD[0]}" = "select" ]; then
      if [ "${CMD[1]}" = "device" ]; then
        select_object device "${CMD[*]:2}"
      elif [ "${CMD[1]}" = "connection" ]; then
        select_object connection "${CMD[*]:2}"
      else
        echo "Unknown or invalid command: $REPLY"
      fi
    elif [ ! -z "$REPLY" ]; then
      echo "Unknown or invalid command: $REPLY"
    fi
  else
    if [ "${CMD[0]}" = "status" ]; then
      if [ ! -z "$SEL_DEVICE" ]; then
        show device "$SEL_DEVICE"
      elif [ ! -z "$SEL_CONNECTION" ]; then
        show connection "$SEL_CONNECTION"
      fi
    elif [ "${CMD[0]}" = "connect" ]; then
      if [ ! -z "$SEL_DEVICE" ]; then
        up device "$SEL_DEVICE" 
      elif [ ! -z "$SEL_CONNECTION" ]; then
        up connection "$SEL_CONNECTION"
      fi
    elif [ "${CMD[0]}" = "disconnect" ]; then
      if [ ! -z "$SEL_DEVICE" ]; then
        down device "$SEL_DEVICE" 
      elif [ ! -z "$SEL_CONNECTION" ]; then
        down connection "$SEL_CONNECTION"
      fi
    elif [ "${CMD[0]}" = "deselect" ]; then
      deselect
    elif [ ! -z "$REPLY" ]; then
      echo "Unknown or invalid command: $REPLY"
    fi
  fi
done
