#!/usr/bin/env bash

set -o pipefail

source /opt/stack/utils

require "libpulse"
require "jq"

prompt () {
  local CARDS=$(pactl --format=json list short cards | jq -cer '.|length' || echo "err:$?")

  [[ "$CARDS" =~ ^err: ]] &&
    echo "Unable to find audio cards" &&
    read -rep "[audio:${RE}failed$RS] " REPLY &&
    return 1
  
  [ ! $CARDS -gt 0 ] &&
    read -rep "[audio:${YE}none$RS] " REPLY &&
    return 1

  local DEFAULT=$(pactl --format=json info | jq -cer '.default_sink_name' || echo "err:$?")

  [[ "$DEFAULT" =~ ^err: ]] &&
    echo "Unable to resolve default output" &&
    read -rep "[audio:${RE}failed$RS] " REPLY &&
    return 1

  local QUERY='.[] | select(.name == "'$DEFAULT'")'
  local SINK=$(pactl --format=json list sinks | jq -cer "$QUERY" || echo "err:$?")

  [[ "$SINK" =~ ^err: ]] &&
    echo "Unable to retrieve default output data" &&
    read -rep "[audio:${RE}failed$RS] " REPLY &&
    return 1

  local PORT=$(echo "$SINK" | jq -cr '.active_port')
  local MUTE=$(echo "$SINK" | jq -cr '.mute')
  local DB=$(echo "$SINK" | jq -cr '.volume | keys[0] as $k | .[$k].db' | awk '{print $1$2}')

  local STATUS="$YE${PORT}$RS"

  if [ "$MUTE" = "true" ]; then
    STATUS+=" ${MA}muted$RS"
  elif [[ "$DB" =~ ^(-|0.00) ]]; then
    STATUS+=" $GR${DB}$RS"
  else
    STATUS+=" $MA${DB}$RS"
  fi

  read -rep "[audio:${STATUS}] " REPLY
}

show_status () {
  local QUERY='("'
  QUERY+='Server:    \(.server_name)\n'
  QUERY+='Path:      \(.server_string)\n'
  QUERY+='Version:   \(.server_version)\n'
  QUERY+='Local:     \(.is_local)\n'
  QUERY+='Client:    \(.client_index)\n'
  QUERY+='Sample:    \(.default_sample_specification)\n'
  QUERY+='Channels:  \(.default_channel_map)\n'
  QUERY+='Sink:      \(.default_sink_name)\n'
  QUERY+='Sources:   \(.default_source_name)\n'
  QUERY+='Cookie:    \(.cookie)\n")'

  pactl --format=json info | jq -cer "$QUERY" ||
    echo -e "Unable to retrieve audio server info\n"
  
  QUERY='.[] | ("'
  QUERY+='Card:      \(.index)\n'
  QUERY+='Name:      \(.name)\n'
  QUERY+='Model:     \(.properties."device.nick")\n'
  QUERY+='Vendor:    \(.properties."device.vendor.name")\n'
  QUERY+='Product:   \(.properties."device.product.name")\n'
  QUERY+='Driver:    \(.driver)\n'
  QUERY+='Form:      \(.properties."device.form_factor")\n'
  QUERY+='Bus:       \(.properties."device.bus")\n'
  QUERY+='Profile:   \(.active_profile)\n")'

  pactl --format=json list cards | jq -cer "$QUERY" | head -n -1 ||
    echo "Unable to retrieve audio cards"
}

show_card () {
  local CARD=$1

  if [ -z "$CARD" ]; then
    echo "Missing the card argument"
    return 1
  fi

  local KEY="index"
  local VALUE=$CARD

  if [[ ! "$CARD" =~ ^[0-9]+$ ]]; then
    KEY="name"
    VALUE="\"${CARD}\""
  fi

  local QUERY=".[] | select(.${KEY}==${VALUE})"
  CARD=$(pactl --format=json list cards | jq -cer "$QUERY" || echo "err:$?")

  [[ "$CARD" =~ ^err: ]] &&
    echo "Unable to get data for the given card" &&
    return 1

  QUERY='("ID:                 \(.index)\n'
  QUERY+='Name:               \(.name)\n'
  QUERY+='Driver:             \(.driver)\n'
  QUERY+='Owner:              \(.owner_module)\n'
  QUERY+='Enum API:           \(.properties."device.enum.api")\n'
  QUERY+='Device API:         \(.properties."device.api")\n'
  QUERY+='Media Class:        \(.properties."media.class")\n'
  QUERY+='API Alsa Path:      \(.properties."api.alsa.path")\n'
  QUERY+='API Alsa Card:      \(.properties."api.alsa.card")\n'
  QUERY+='API Alsa Card Name: \(.properties."api.alsa.card.name")\n'
  QUERY+='Card Long Name:     \(.properties."api.alsa.card.longname")\n'
  QUERY+='Usec:               \(.properties."device.plugged.usec")\n'
  QUERY+='Bus Path:           \(.properties."device.bus_path")\n'
  QUERY+='SysFS Path:         \(.properties."sysfs.path")\n'
  QUERY+='Bus:                \(.properties."device.bus")\n'
  QUERY+='Subsystem:          \(.properties."device.subsystem")\n'
  QUERY+='Vendor ID:          \(.properties."device.vendor.id")\n'
  QUERY+='Vendor Name:        \(.properties."device.vendor.name")\n'
  QUERY+='Product ID:         \(.properties."device.product.id")\n'
  QUERY+='Product Name:       \(.properties."device.product.name")\n'
  QUERY+='Form Factor:        \(.properties."device.form_factor")\n'
  QUERY+='Device Name:        \(.properties."device.name")\n'
  QUERY+='Description:        \(.properties."device.description")\n'
  QUERY+='Model:              \(.properties."device.nick")\n'
  QUERY+='Use ACP:            \(.properties."api.alsa.use-acp")\n'
  QUERY+='Auto Profile:       \(.properties."api.acp.auto-profile")\n'
  QUERY+='Auto Port:          \(.properties."api.acp.auto-port")\n'
  QUERY+='Reserve Devicel:    \(.properties."api.dbus.ReserveDevice1")\n'
  QUERY+='Factory:            \(.properties."factory.id")\n'
  QUERY+='Client ID:          \(.properties."client.id")\n'
  QUERY+='Object ID:          \(.properties."object.id")\n'
  QUERY+='Object Serial:      \(.properties."object.serial")\n'
  QUERY+='Object Path:        \(.properties."object.path")\n'
  QUERY+='Alsa Card:          \(.properties."alsa.card")\n'
  QUERY+='Active Profile:     \(.active_profile)")'

  echo "$CARD" | jq -cr "$QUERY"

  echo -e "\nProfiles:"
  echo "$CARD" | jq -cer '.profiles | " \(keys[])"' ||
    echo " Unable to resolve audio profiles"

  echo -e "\nPorts:"
  echo "$CARD" | jq -cer '.ports | to_entries[] | " \(.key) [\(.value.type)]"' ||
    echo " Unable to resolve audio ports"
}

list_cards () {
  local CARDS=$(pactl --format=json list cards || echo "err:$?")

  [[ "$CARDS" =~ ^err: ]] &&
    echo "Unable to retieve audio cards" &&
    return 1

  local COUNT=$(echo "$CARDS" | jq -cer ".|length" || echo "err:$?")

  [[ "$COUNT" =~ ^err: ]] &&
    echo "Unable to count audio cards" &&
    return 1
  
  [ ! $COUNT -gt 0 ] &&
    echo "No audio cards have found" &&
    return 1

  local QUERY='.[] | ("\n'
  QUERY+='ID:      \(.index)\n'
  QUERY+='Name:    \(.name)\n'
  QUERY+='Model:   \(.properties."device.nick")\n'
  QUERY+='Vendor:  \(.properties."device.vendor.name")\n'
  QUERY+='Bus:     \(.properties."device.bus")")'

  CARDS=$(echo "$CARDS" | jq -cer "$QUERY" || echo "err:$?")

  [[ "$CARDS" =~ ^err: ]] &&
    echo "Unable to retieve audio card data" &&
    return 1

  echo "$CARDS" | tail -n +2
}

list_profiles () {
  local CARD=$1

  if [ -z "$CARD" ]; then
    echo "Missing the card argument"
    return 1
  fi

  local KEY="index"
  local VALUE=$CARD

  if [[ ! "$CARD" =~ ^[0-9]+$ ]]; then
    KEY="name"
    VALUE="\"${CARD}\""
  fi

  local QUERY=".[] | select(.${KEY}==${VALUE})"
  CARD=$(pactl --format=json list cards | jq -cer "$QUERY" || echo "err:$?")

  [[ "$CARD" =~ ^err: ]] &&
    echo "Unable to find the given card" &&
    return 1
  
  QUERY='.profiles | length'
  local PROFILES=$(echo "$CARD" | jq -cer "$QUERY" || echo "err:$?")

  [[ "$PROFILES" =~ ^err: ]] &&
    echo "Unable to resolve audio profiles" &&
    return 1

  [ $PROFILES -gt 0 ] &&
    echo "$CARD" | jq -cr '.profiles | keys[]' ||
    echo "No audio profiles have found"
}

list_ports () {
  local TYPE=$1

  if [[ ! "$TYPE" =~ ^(sinks|sources)$ ]]; then
    echo "Invalid module type argument"
    return 1
  fi

  local MODULES=$(pactl --format=json list "$TYPE" || echo "err:$?")

  [[ "$MODULES" =~ ^err: ]] &&
    echo "Unable to retieve audio modules" &&
    return 1

  local COUNT=$(echo "$MODULES" | jq -cer ".|length" || echo "err:$?")

  [[ "$COUNT" =~ ^err: ]] &&
    echo "Unable to count audio modules" &&
    return 1

  [ ! $COUNT -gt 0 ] &&
    echo "No audio modules have found" &&
    return 1

  local QUERY='.[] |= . + {"module_name": .name} |'
  QUERY+='map((.ports[] + {index, module_name, mute, properties})) |'
  QUERY+='.[] | ("\n'
  QUERY+='ID:      \(.index)\n'
  QUERY+='Name:    \(.module_name)\n'
  QUERY+='Handle:  \(.name)\n'
  QUERY+='Type:    \(.type)\n'
  QUERY+='Model:   \(.properties."device.nick")\n'
  QUERY+='Mute:    \(.mute)\n'
  QUERY+='Status:  \(.availability)")'

  local PORTS=$(echo "$MODULES" | jq -cer "$QUERY" || echo "err:$?")

  [[ "$PORTS" =~ ^err: ]] &&
    echo "Unable to retieve audio port data" &&
    return 1
  
  echo "$PORTS" | tail -n +2
}

list_playbacks () {
  local NAME=$1

  local SINK_INPUTS=$(pactl --format=json list sink-inputs || echo "err:$?")

  [[ "$SINK_INPUTS" =~ ^err: ]] &&
    echo "Unable to retieve audio playbacks" &&
    return 1

  local QUERY='[.[] | select(.properties."application.name"|test("'${NAME}'"; "i"))]'
  local COUNT=$(echo "$SINK_INPUTS" | jq -cr "$QUERY | length" || echo "err:$?")

  [[ "$COUNT" =~ ^err: ]] &&
    echo "Unable to COUNT audio playbacks" &&
    return 1

  [ ! $COUNT -gt 0 ] &&
    echo "No audio playbacks have found" &&
    return 1

  QUERY+='|.[]|("\n'
  QUERY+='Sink:     \(.index)\n'
  QUERY+='Process:  \(.properties."application.process.id")\n'
  QUERY+='Name:     \(.properties."application.name")\n'
  QUERY+='Media:    \(.properties."media.name")\n'
  QUERY+='Mute:     \(.mute)")'

  SINK_INPUTS=$(echo "$SINK_INPUTS" | jq -cr "$QUERY" || echo "err:$?")

  [[ "$SINK_INPUTS" =~ ^err: ]] &&
    echo "Unable to retieve audio playback data" &&
    return 1

  echo "$SINK_INPUTS" | tail -n +2
}

set_profile () {
  local CARD=$1
  local PROFILE=$2

  if [ -z "$CARD" ]; then
    echo "Missing the card argument"
    return 1
  fi

  if [ -z "$PROFILE" ]; then
    echo "Missing the profile argument"
    return 1
  fi

  pactl set-card-profile "$CARD" "$PROFILE" && sleep 0.1 &&
    echo "Audio profile has been set to $PROFILE" ||
    echo "Unable to set the audio profile"
}

set_default () {
  local TYPE=$1
  local MODULE=$2

  if [[ ! "$TYPE" =~ ^(sink|source)$ ]]; then
    echo "Invalid module type argument"
    return 1
  fi

  if [ -z "$MODULE" ]; then
    echo "Missing the module argument"
    return 1
  fi

  pactl set-default-$TYPE "$MODULE" && sleep 0.1 &&
    echo "Default $TYPE set to $MODULE" ||
    echo "Unable to set the default $TYPE"
}

turn_default () {
  local TYPE=$1
  local TO=$2

  if [[ ! "$TYPE" =~ ^(sink|source)$ ]]; then
    echo "Invalid module type argument"
    return 1
  fi

  if [[ ! "$TO" =~ ^(up|down|[0-9]+)$ ]]; then
    echo "Invalid volume argument: '$TO'"
    return 1
  elif [[ "$TO" =~ ^[0-9]+$ ]] && ! (($TO >= 0 && $TO <= 150)); then
    echo "Volume is out of the valid range: '$TO'"
    return 1
  fi

  local MODULE=$(pactl get-default-$TYPE || echo "err:$?")

  [[ "$MODULE" =~ ^err: ]] &&
    echo "Unable to resolve the current module" &&
    return 1

  local VOLUME=$TO

  if [[ "$TO" =~ ^(up|down)$ ]]; then
    local QUERY='.[] | select(.name=="'${MODULE}'")'
    QUERY+='|.volume."front-left".value_percent'

    VOLUME=$(pactl --format=json list ${TYPE}s | jq -cer "$QUERY" | cut -d "%" -f 1 || echo "err:$?")

    [[ "$VOLUME" =~ ^err: ]] &&
      echo "Unable to resolve the current volume" &&
      return 1
    
    if [ "$TO" = "up" ]; then
      VOLUME=$((VOLUME + 5))
    else
      VOLUME=$((VOLUME - 5))
    fi
  fi

  [ $VOLUME -lt 0 ] && VOLUME=0
  [ $VOLUME -gt 150 ] && VOLUME=150

  pactl set-${TYPE}-mute "$MODULE" 0 &&
  pactl set-${TYPE}-volume "$MODULE" "${VOLUME}%" && sleep 0.1 &&
    echo "Module volume set to ${VOLUME}%" ||
    echo "Unable to set the module volume"
}

set_mute () {
  local SUBJECT=$1
  local MUTE=$2

  if [ -z "$SUBJECT" ]; then
    echo "Missing the subject argument"
    return 1
  elif [[ ! "$SUBJECT" =~ ^(all|outputs|inputs)$ ]]; then
    echo "Invalid subject argument: '$SUBJECT'"
    return 1
  fi

  if [ -z "$MUTE" ]; then
    echo "Missing the mute argument"
    return 1
  elif [[ ! "$MUTE" =~ ^(1|0)$ ]]; then
    echo "Invalid mute argument: '$MUTE'"
    return 1
  fi

  if [[ "$SUBJECT" =~ (all|outputs) ]]; then
    local SINKS=$(pactl --format=json list sinks | jq -cer '.[].name' || echo "err:$?")

    if [[ ! "$SINKS" =~ ^err: ]]; then
      SINKS=($SINKS)

      local INDEX=0
      while [ $INDEX -lt ${#SINKS[@]} ]; do
        local SINK=${SINKS[INDEX]}
        pactl set-sink-mute "$SINK" "$MUTE" && sleep 0.1 &&
          echo "Output $SINK set mute to $MUTE" ||
          echo "Unable to set mute for output $SINK"

        INDEX=$((INDEX + 1))
      done
    else
      echo "Unable to retieve audio outputs"
    fi
  fi

  if [[ "$SUBJECT" =~ (all|inputs) ]]; then
    local SOURCES=$(pactl --format=json list sources | jq -cer '.[].name' || echo "err:$?")

    if [[ ! "$SOURCES" =~ ^err: ]]; then
      SOURCES=($SOURCES)

      local INDEX=0
      while [ $INDEX -lt ${#SOURCES[@]} ]; do
        local SOURCE=${SOURCES[INDEX]}
        pactl set-source-mute "$SOURCE" "$MUTE" && sleep 0.1 &&
          echo "Output $SOURCE set mute to $MUTE" ||
          echo "Unable to set mute for input $SOURCE"

        INDEX=$((INDEX + 1))
      done
    else
      echo "Unable to retieve audio inputs"
    fi
  fi
}

help () {
  local FRM=" %-32s\t%s\n"

  if [ "$1" = "once" ]; then
    echo "Usage: audio COMMAND"

    echo -e "\nCOMMANDS"
    printf "$FRM" \
      "help" "Show this message." \
      "mute" "Mute all output audio streams." \
      "unmute" "Unmute all output audio streams."
    
    return
  fi

  echo "Usage: COMMAND [OBJECT] [ARGUMENTS]..."

  echo -e "\nCOMMANDS"
  printf "$FRM" \
    "help" "Show this help message." \
    "show status" "Show an overall report of the audio." \
    "show card <card>" "Show the data of the given card." \
    "" "" \
    "list cards" "List the cards plugged to the system." \
    "list profiles <card>" "List the profiles of the given card." \
    "list outputs" "List the ports of output modules." \
    "list inputs" "List the ports of input modules." \
    "list playbacks [<name>]" "List all active playbacks or those" \
    "" "which contain the given name filter." \
    "" "" \
    "set profile <card> <profile>" "Set the profile of the given card." \
    "set output <output>" "Set current output to the given output." \
    "set input <input>" "Set current input to the given input." \
    "" "" \
    "turn output up|down|<volume>" "Turn the volume of the current output." \
    "turn input up|down|<volume>" "Turn the volume of the current input." \
    "" "" \
    "mute all|outputs|inputs" "Mute all, output or input audio modules." \
    "unmute all|outputs|inputs" "Unmute all, output or input audio modules."

  echo -e "\nOBJECTS"
  printf "$FRM" \
    "status" "The status of the system's audio." \
    "card" "An audio card." \
    "profile" "An audio profile of a card." \
    "output" "An output audio port (speaker)." \
    "input" "An input audio port (microphone)." \
    "playback" "An application or process streaming audio."
}

loop () {
  clear

  while true; do
    prompt && history -s "$REPLY"

    set -f
    local OLD_IFS=$IFS && IFS=$'\n'
    local CMD=($(xargs -n1 <<< "$REPLY"))
    IFS=$OLD_IFS && set +f

    if [ "${CMD[0]}" = "help" ]; then
      help
      continue
    elif [ "${CMD[0]}" = "clear" ]; then
      clear
      continue
    elif [ "${CMD[0]}" = "quit" ]; then
      break
    elif [ -z "${CMD[0]}" ]; then
      continue
    fi

    case "${CMD[0]}" in
      "show")
        case "${CMD[1]}" in
          "status") show_status;;
          "card") show_card "${CMD[2]}";;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      "list")
        case "${CMD[1]}" in
          "cards") list_cards;;
          "profiles") list_profiles "${CMD[2]}";;
          "outputs") list_ports "sinks";;
          "inputs") list_ports "sources";;
          "playbacks") list_playbacks "${CMD[2]}";;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      "set")
        case "${CMD[1]}" in
          "profile") set_profile "${CMD[2]}" "${CMD[3]}";;
          "output") set_default "sink" "${CMD[2]}";;
          "input") set_default "source" "${CMD[2]}";;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      "turn")
        case "${CMD[1]}" in
          "output") turn_default "sink" "${CMD[2]}";;
          "input") turn_default "source" "${CMD[2]}";;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      "mute")
        case "${CMD[1]}" in
          "all") set_mute "all" 1;;
          "outputs") set_mute "outputs" 1;;
          "inputs") set_mute "inputs" 1;;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      "unmute")
        case "${CMD[1]}" in
          "all") set_mute "all" 0;;
          "outputs") set_mute "outputs" 0;;
          "inputs") set_mute "inputs" 0;;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      *) echo "Unknown or invalid command: '$REPLY'";; 
    esac
  done

  clear
}

once () {
  local CMD=$1

  case "$CMD" in
    "help") help "once";;
    "mute") set_mute "outputs" 1;;
    "unmute") set_mute "outputs" 0;;
    *) abort "Unknown or invalid command: '$1'";; 
  esac
}

if [ $# = 0 ]; then
  loop
else
  once "$@"
fi
