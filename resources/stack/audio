#!/usr/bin/env bash

set -f

source /opt/stack/utils

require "libpulse"
require "jq"

prompt () {
  local YELLOW=$'\e[0;33m'
  local RS=$'\e[m'
  local FG=$YELLOW

  local SINK=$(pactl info | awk -F: '/Default Sink/{print $2}')

  read -rep "[audio:$FG${SINK}$RS] " REPLY
}

show_status () {
  pactl info | awk -F: '{printf "%-32s\t%s\n", $1":", $2}'
  pactl stat | awk -F: '{printf "%-32s\t%s\n", $1":", $2}'
}

list_cards () {
  printf "%-5s\t%-35s\t%s\n" \
    "INDEX" "NAME" "DRIVER"

  pactl list short cards | awk '{printf "%-5s\t%-35s\t%s\n",$1,$2,$3}'
}

list_profiles () {
  local CARD=$(pactl --format=json list cards | jq '.[0]')
  local PROFILES=($(echo "$CARD" | jq '.profiles | keys[]'))
  
  printf "%-45s\t%s\n" "NAME" "DESCIPTION"

  local INDEX=0
  while [ $INDEX -lt ${#PROFILES[@]} ]; do
    local NAME=${PROFILES[$INDEX]}
    local DESC=$(echo "$CARD" | jq -r ".profiles.${NAME}.description")
    NAME=$(echo "$NAME" | tr -d "\"")

    printf "%-45s\t%s\n" "$NAME" "$DESC"
    INDEX=$((INDEX + 1))
  done
}

set_profile () {
  local CARD=$1
  local PROFILE=$2

  if [ -z "$CARD" ]; then
    echo "Missing the card argument"
    return 1
  fi

  if [ -z "$PROFILE" ]; then
    echo "Missing the profile argument"
    return 1
  fi

  pactl set-card-profile "$CARD" "$PROFILE" &&
    echo "Audio profile has be set to $PROFILE" ||
    echo "Something went wrong setting the audio profile"
}

help () {
  echo "Usage: COMMAND [OBJECT] [ARGUMENTS]..."

  echo -e "\nCOMMANDS"
  printf " %-15s\t%s\n" \
    "help" "Show this help message." \
    "show status" "Show an overall report of the system's audio." \
    "" "" \
    "list cards" "List all the audio cards plugged to the system." \
    "list profiles" "List the profiles of the active audio card." \
    "" "" \
    "set profile <card> <profile>" "Set the audio profile of the given card."

  echo -e "\nOBJECTS"
  printf " %-15s\t%s\n" \
    "status" "The status of the system's audio." \
    "card" "An audio card." \
    "profile" "An audio profile of a card."
}

loop () {
  clear

  while true; do
    prompt && history -s "$REPLY"

    local OLD_IFS=$IFS && IFS=$'\n'
    local CMD=($(xargs -n1 <<< "$REPLY"))
    IFS=$OLD_IFS

    if [ "${CMD[0]}" = "help" ]; then
      help
      continue
    elif [ "${CMD[0]}" = "clear" ]; then
      clear
      continue
    elif [ "${CMD[0]}" = "quit" ]; then
      break
    elif [ -z "${CMD[0]}" ]; then
      continue
    fi

    case "${CMD[0]}" in
      "show")
        case "${CMD[1]}" in
          "status") show_status;;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      "list")
        case "${CMD[1]}" in
          "cards") list_cards;;
          "profiles") list_profiles;;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      "set")
        case "${CMD[1]}" in
          "profile") set_profile "${CMD[2]}" "${CMD[3]}";;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      *) echo "Unknown or invalid command: '$REPLY'";; 
    esac
  done

  clear
}

loop
