#!/usr/bin/env bash

source /opt/stack/utils

require "libpulse"
require "jq"

prompt () {
  local YELLOW=$'\e[0;33m'
  local GREEN=$'\e[0;32m'
  local MAGENTA=$'\e[0;35m'
  local RS=$'\e[m'
  local FG=$YELLOW

  local SINK=$(pactl --format=json list sinks | jq -r -M ".[0].active_port")
  local MUTE=$(pactl --format=json list sinks | jq -r -M ".[0].mute")

  local VOLUME=""
  if [ "$MUTE" = "true" ]; then
    VOLUME="muted"
  else
    VOLUME=$(pactl --format=json list sinks |
      jq -r -M '.[0].volume | keys[0] as $k | (.[$k].db)' | awk '{print $1$2}')
  fi
  
  local SC="$MAGENTA"
  [[ "$VOLUME" =~ ^(-|0.00) ]] && SC="$GREEN"

  read -rep "[audio:$FG${SINK}$RS $SC${VOLUME}$RS] " REPLY
}

show_status () {
  local FRM="%-32s\t%s\n"

  pactl info | awk -v f="$FRM" -F: '{printf f, $1":", $2}'
  pactl stat | awk -v f="$FRM" -F: '{printf f, $1":", $2}'
}

show_card () {
  local CARD=$1

  if [ -z "$CARD" ]; then
    echo "Missing card name or id argument"
    return 1
  fi

  local FIELD="name"
  local VALUE="\"${CARD}\""

  if [[ "$CARD" =~ ^[0-9]+$ ]]; then
    FIELD="index"
    VALUE=$CARD
  fi

  local QUERY=".[] | select(.${FIELD}==${VALUE})"

  pactl --format=json list cards | jq -e -M "$QUERY" ||
    echo "Cannot find audio card with $FIELD $CARD"
}

list_cards () {
  local FRM="%-3s %-35s %-4s %-15s %s\n"
  printf "$FRM" "ID" "NAME" "BUS" "MODEL" "VENDOR"

  local QUERY='.[]|"\(.index),'
  QUERY+='\(.name),'
  QUERY+='\(.properties."device.bus"),'
  QUERY+='\(.properties."device.nick"),'
  QUERY+='\(.properties."device.vendor.name")"'

  pactl --format=json list cards | jq -r "$QUERY" |
    awk -v f="$FRM" -F, '{printf f,$1,$2,$3,$4,$5}'
}

list_profiles () {
  local CARD=$1

  if [ -z "$CARD" ]; then
    echo "Missing card name or id argument"
    return 1
  fi

  local FIELD="name"
  local VALUE="\"${CARD}\""

  if [[ "$CARD" =~ ^[0-9]+$ ]]; then
    FIELD="index"
    VALUE=$CARD
  fi

  local QUERY=".[] | select(.${FIELD}==${VALUE})"

  if pactl --format=json list cards | jq -e "$QUERY" > /dev/null; then
    QUERY+='| .profiles'
    QUERY+='| to_entries[]'
    QUERY+='| "\(.key),\(.value.description)"'

    local FRM="%-46s %s\n"
    printf "$FRM" "KEY" "DESCRIPTION"

    pactl --format=json list cards | jq -M -r "$QUERY" |
      awk -v f="$FRM" -F, '{printf f,$1,$2}'
  else
    echo "Cannot find audio card with $FIELD $CARD"
  fi
}

list_outputs () {
  local QUERY='map((.ports[] + {index, mute, properties})) |'
  QUERY+='.[] |'
  QUERY+='"\(.index),'
  QUERY+='\(.name),'
  QUERY+='\(.type),'
  QUERY+='\(.properties."device.nick"),'
  QUERY+='\(.mute),'
  QUERY+='\(.availability)"'

  local OUTPUTS="$(pactl --format=json list sinks | jq -r -M "$QUERY")"

  if [ -n "$OUTPUTS" ]; then
    local FRM="%-4s %-28s %-15s %-20s %-6s %s\n"
    printf "$FRM" "ID" "NAME" "TYPE" "MODEL" "MUTE" "AVAILABILITY"
    echo "$OUTPUTS" | awk -v f="$FRM" -F, '{printf f,$1,$2,$3,$4,$5,$6,$7}'
  else
    echo "No outputs have been found"
  fi
}

list_clients () {
  local FILTER=$1

  local QUERY='.[] |'
  QUERY+='select(.properties."application.name"|test("'$FILTER'"; "i")) |'
  QUERY+='"\(.index),'
  QUERY+='\(.properties."application.name"),'
  QUERY+='\(.properties."application.process.id"),'
  QUERY+='\(.properties."media.name"),'
  QUERY+='\(.mute)"'

  local CLIENTS="$(pactl --format=json list sink-inputs | jq -r -M "$QUERY")"

  if [ -n "$CLIENTS" ]; then
    local FRM="%-4s %-18s %-8s %-10s %s\n"
    printf "$FRM" "ID" "NAME" "PROCESS" "MEDIA" "MUTE"
    echo "$CLIENTS" | awk -v f="$FRM" -F, '{printf f,$1,$2,$3,$4,$5}'
  else
    echo "No clients have been found"
  fi
}

set_profile () {
  local CARD=$1
  local PROFILE=$2

  if [ -z "$CARD" ]; then
    echo "Missing the card argument"
    return 1
  fi

  if [ -z "$PROFILE" ]; then
    echo "Missing the profile argument"
    return 1
  fi

  pactl set-card-profile "$CARD" "$PROFILE" &> /dev/null &&
    echo "Audio profile has been set to $PROFILE" ||
    echo "Something went wrong setting the audio profile"
}

set_mute () {
  local SUBJECT=$1
  local MUTE=$2

  if [ -z "$SUBJECT" ]; then
    echo "Missing subject argument"
    return 1
  elif [[ ! "$SUBJECT" =~ ^(all|outputs|input)$ ]]; then
    echo "Invalid subject argument: '$SUBJECT'"
    return 1
  fi

  if [ -z "$MUTE" ]; then
    echo "Missing mute argument"
    return 1
  elif [[ ! "$MUTE" =~ ^(1|0)$ ]]; then
    echo "Invalid mute argument: '$MUTE'"
    return 1
  fi

  if [[ "$SUBJECT" =~ (all|outputs) ]]; then
    local SINKS=($(pactl --format=json list sinks | jq -r .[].name))

    local INDEX=0
    while [ $INDEX -lt ${#SINKS[@]} ]; do
      pactl set-sink-mute "${SINKS[INDEX]}" "$MUTE"
      INDEX=$((INDEX + 1))
    done
  fi

  if [[ "$SUBJECT" =~ (all|input) ]]; then
    local SOURCES=($(pactl --format=json list sources | jq -r .[].name))

    local INDEX=0
    while [ $INDEX -lt ${#SOURCES[@]} ]; do
      pactl set-source-mute ${SOURCES[INDEX]} "$MUTE"
      INDEX=$((INDEX + 1))
    done
  fi
}

help () {
  local FRM=" %-28s\t%s\n"

  echo "Usage: COMMAND [OBJECT] [ARGUMENTS]..."

  echo -e "\nCOMMANDS"
  printf "$FRM" \
    "help" "Show this help message." \
    "show status" "Show an overall report of the system's audio." \
    "show card <name|id>" "Show data for the card with the given name or id." \
    "" "" \
    "list cards" "List all the audio cards plugged to the system." \
    "list profiles <name|id>" "List the profiles of the given audio card." \
    "list outputs" "List all output audio streams." \
    "list clients [<filter>]" "List any active audio clients." \
    "" "" \
    "set profile <card> <profile>" "Set the audio profile of the given card." \
    "mute all" "Mute all audio streams." \
    "unmute all" "Unmute all audio streams." \
    "mute outputs|input" "Mute all output or input audio streams." \
    "unmute outputs|input" "Unmute all output or input audio streams."

  echo -e "\nOBJECTS"
  printf "$FRM" \
    "status" "The status of the system's audio." \
    "card" "An audio card." \
    "profile" "An audio profile of a card." \
    "output" "An output audio stream (speaker)." \
    "input" "An input audio stream (microphone)." \
    "client" "An application or process connected to the audio server."
}

loop () {
  clear

  while true; do
    prompt && history -s "$REPLY"

    set -f
    local OLD_IFS=$IFS && IFS=$'\n'
    local CMD=($(xargs -n1 <<< "$REPLY"))
    IFS=$OLD_IFS && set +f

    if [ "${CMD[0]}" = "help" ]; then
      help
      continue
    elif [ "${CMD[0]}" = "clear" ]; then
      clear
      continue
    elif [ "${CMD[0]}" = "quit" ]; then
      break
    elif [ -z "${CMD[0]}" ]; then
      continue
    fi

    case "${CMD[0]}" in
      "show")
        case "${CMD[1]}" in
          "status") show_status;;
          "card") show_card "${CMD[2]}";;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      "list")
        case "${CMD[1]}" in
          "cards") list_cards;;
          "profiles") list_profiles "${CMD[2]}";;
          "outputs") list_outputs;;
          "clients") list_clients "${CMD[2]}";;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      "set")
        case "${CMD[1]}" in
          "profile") set_profile "${CMD[2]}" "${CMD[3]}";;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      "mute")
        case "${CMD[1]}" in
          "all") set_mute "all" 1;;
          "outputs") set_mute "outputs" 1;;
          "input") set_mute "input" 1;;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      "unmute")
        case "${CMD[1]}" in
          "all") set_mute "all" 0;;
          "outputs") set_mute "outputs" 0;;
          "input") set_mute "input" 0;;
          *) echo "Unknown or invalid command: '$REPLY'";;
        esac;;
      *) echo "Unknown or invalid command: '$REPLY'";; 
    esac
  done

  clear
}

loop
