#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/bluetooth/commands

# Shows the help message.
# Arguments:
#  mode: loop or once
# Outputs:
#  A long help message.
show_help () {
  local mode="${1:-"once"}"

  if equals "${mode}" 'once'; then
    echo 'Usage: bluetooth [OPTIONS] COMMAND [OBJECT] [ARGUMENTS]...'
    
    echo -e '\nOPTIONS'
    printf ' %-8s %s\n' \
      '-h' 'Show this help message.' \
      '-q' 'Do not play beep sounds.' \
      '-s' 'Run on script mode.'

    echo -e '\nCOMMANDS'
  else
    echo 'Usage: COMMAND [OBJECT] [ARGUMENTS]...'

    echo -e '\nCOMMANDS'
    printf ' %-30s %s\n' \
      'help' 'Show this help message.' \
      '' ''
  fi

  printf ' %-30s %s\n' \
    'show status' 'Show a report of the bluetooth service.' \
    'show logs' 'Show the last logs of the bluetooth service.' \
    '' '' \
    'show controller <address>' 'Show the data of a controller.' \
    'show device <address>' 'Show the data of a device.' \
    '' '' \
    'list controllers' 'List the available controllers.' \
    'list devices <status>' 'List all devices or only those having status' \
    '' 'paired, connected, trusted or bonded.' \
    '' '' \
    'set controller <address>' 'Set the default controller.' \
    'set power on|off' 'Set the default controller power to on or off.' \
    'set scan on|off' 'Set the default controller scan mode to on or off.' \
    'set discoverable on|off' 'Set the default controller to be discoverable.' \
    'set pairable on|off' 'Set the default controller to be pairable.' \
    '' '' \
    'connect device <address>' 'Connect a bluetooth device.' \
    'disconnect device <address>' 'Disconnect a bluetooth device.' \
    'remove device <address>' 'Removes a bluetooth device.' \
    '' '' \
    'restart' 'Restart the bluetooth service.'
}

run () {
  local opt=''

  while getopts ':hqs' opt; do
    case "${opt}" in
     'h')
        show_help once
        return 0;;
     'q') QUIET='true';;
     's') ON_SCRIPT_MODE='true';;
     *)
      echo "Ooops, invalid or unknown option -${OPTARG}!"
      $(exit 2) || beep
      return $?;;
    esac
  done

  shift $((OPTIND-1))

  local mode='once'
  if is_true "$# = 0"; then
    mode='loop'
    clear
  fi

  while true; do
    if equals "${mode}" 'loop'; then
      prompt bluetooth
    else
      REPLY="$@"
    fi

    set -f
    set_separator line
    local args=($(xargs -n1 <<< "${REPLY}"))
    restore_separator && set +f
    REPLY=''

    local cmd="${args[0]}"
    local obj="${args[1]}"

    if equals "${mode}" 'loop'; then
      case "${cmd}${obj:+ ${obj}}" in
        'help') clear && show_help loop && continue;;
        'clear') clear && continue;;
        'quit') break;;
        '') continue;;
      esac
    fi

    case "${cmd}${obj:+ ${obj}}" in
      'show status') show_status;;
      'show logs') show_logs;;
      'show controller') show_controller "${args[2]}";;
      'show device') show_device "${args[2]}";;
      'list controllers') list_controllers;;
      'list devices') list_devices "${args[2]}";;
      'set controller') set_controller "${args[2]}" && beep;;
      'set power') set_power "${args[2]}" && beep;;
      'set scan') set_scan "${args[2]}" && beep;;
      'set discoverable') set_discoverable "${args[2]}" && beep;;
      'set pairable') set_pairable "${args[2]}" && beep;;
      'connect device') connect_device "${args[2]}" && beep;;
      'disconnect device') disconnect_device "${args[2]}" && beep;;
      'remove device') remove_device "${args[2]}" && beep;;
      'restart') restart_bluetooth && beep;;
      *)
        echo 'Ooops, invalid or unknown command!'
        $(return 2);;
    esac || beep

    local exit_code=$?
    if equals "${mode}" 'once'; then
      return ${exit_code}
    fi
  done

  clear
}

run "$@"

