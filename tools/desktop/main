#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/desktop/commands

# Shows the help message.
# Arguments:
#  mode: loop or once
# Outputs:
#  A long help message.
show_help () {
  local mode="${1}"

  if equals "${mode}" 'once'; then
    echo 'Usage: desktop [OPTIONS] COMMAND [OBJECT] [ARGUMENTS]...'
    
    echo -e '\nOPTIONS'
    printf ' %-8s %s\n' \
      '-h' 'Show this help message.' \
      '-q' 'Do not play beep sounds.' \
      '-s' 'Run on script mode.'
  
    echo -e '\nCOMMANDS'
  else
    echo 'Usage: COMMAND [OBJECT] [ARGUMENTS]...'

    echo -e '\nCOMMANDS'
    printf ' %-35s %s\n' \
      'help' 'Show this help message.' \
      '' ''
  fi

  printf ' %-35s %s\n' \
    'show status' 'Show the status of the desktop environment.' \
    'show pointer <name>' 'Show a pointing device.' \
    'show tablet <name>' 'Show a tablet device.' \
    '' '' \
    'list wallpapers' 'List the available wallapers.' \
    'list pointers' 'List the available pointing devices.' \
    'list tablets' 'List the connected tablets.' \
    '' '' \
    'set wallpaper <name> <mode>' 'Set the desktop wallpaper on center,' \
    '' 'fill, scale, max or tile mode.' \
    'init wallpaper' 'Initialize the desktop wallpaper.' \
    '' '' \
    'speed pointer <factor>' 'Set the pointer speed to a factor between' \
    '' '[0, 1] where 0 means slow and 1 fast.' \
    'init pointer' 'Initialize the pointer.' \
    '' '' \
    'scale tablet <name> <factor>' 'Scale down the tablet area in range [0.1-1],' \
    '' 'where factor 1 means remove scaling.' \
    'map tablet <name> <display>' 'Map a tablet to a screen display' \
    '' 'or just use desktop to reset mapping.' \
    'init tablets' 'Initialize any connected tablets.'
}

run () {
  local opt=''

  while getopts ':hqs' opt; do
    case "${opt}" in
     'h')
        set_quiet_mode 'on'
        show_help once
        return 0;;
     'q') set_quiet_mode 'on';;
     's') set_script_mode 'on';;
     *)
      echo "Ooops, invalid or unknown option -${OPTARG}!"
      beep 2
      return $?;;
    esac
  done

  shift $((OPTIND-1))

  local mode='once'
  if is_true "$# = 0"; then
    mode='loop'
    clear
  fi

  while true; do
    if equals "${mode}" 'loop'; then
      prompt desktop
    else
      REPLY="$@"
    fi

    set -f
    set_separator line
    local args=($(xargs -n1 <<< "${REPLY}"))
    restore_separator && set +f
    REPLY=''

    local cmd="${args[0]}"
    local obj="${args[1]}"

    if equals "${mode}" 'loop'; then
      case "${cmd}${obj:+ ${obj}}" in
        'help') clear && show_help && continue;;
        'clear') clear && continue;;
        'quit') break;;
        '') continue;;
      esac
    fi

    case "${cmd}${obj:+ ${obj}}" in
      'show status') show_status;;
      'show pointer') show_pointer "${args[2]}";;
      'show tablet') show_tablet "${args[2]}";;
      'set wallpaper') set_wallpaper "${args[2]}" "${args[3]}";;
      'speed pointer') set_pointer_speed "${args[2]}";;
      'scale tablet') scale_tablet "${args[2]}" "${args[3]}";;
      'map tablet') map_tablet "${args[2]}" "${args[3]}";;
      'list wallpapers') list_wallpapers;;
      'list pointers') list_pointers;;
      'list tablets') list_tablets;;
      'init pointer') init_pointer;;
      'init tablets') init_tablets;;
      'init wallpaper') init_wallpaper;;
      *)
        echo 'Ooops, invalid or unknown command!'
        $(return 2);;
    esac

    # Save exit status code of the last executed cmd
    local exit_code=$?
  
    if is_true "${exit_code} = 1"; then
      echo 'Ooops, an unknwon error occurred!'
    fi

    on_loud_mode && beep "${exit_code}"

    if equals "${mode}" 'once'; then
      return ${exit_code}
    fi
  done

  clear
}

run "$@"

