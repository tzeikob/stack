#!/bin/bash

set -o pipefail

source /opt/tools/utils
source /opt/tools/desktop/helpers
source /opt/tools/displays/helpers

# Shows the current status of the desktop environment.
# Outputs:
#  A verbose list of text data.
show_status () {
  local status=''

  local server=''
  server="$(xdpyinfo -display "${DISPLAY}" | awk -F': ' '{
    ORS=""
    gsub(/^[ \t]+/,"",$2)
    gsub(/[ \t]+$/,"",$2)
    switch ($1) {
      case "version number": print $2; break
      case "X.Org version": print "/"$2")"; break
      default: break
    }
  }')" || return 1
  status+="\"server\": \"Xorg ${server::-1}\","

  local compositor=''
  compositor="$(pacman -Qi picom | grep -Po '^Version\s*: \K.+')" || return 1
  status+="\"compositor\": \"Picom ${compositor}\","

  local wm=''
  wm="$(bspwm -v)" || return 1
  status+="\"wm\": \"BSPWM ${wm}\","

  local bars=''
  bars="$(polybar -v | head -n +1 | cut -d ' ' -f 2)" || return 1
  status+="\"bars\": \"Polybar ${bars}\","

  if file_exists "${DESKTOP_SETTINGS}"; then
    local query='.wallpaper|if . then "\(.name) [\(.mode|ascii_upcase)]" else "none" end'
    local wallpaper=''
    wallpaper="$(jq -cr "${query}" "${DESKTOP_SETTINGS}")" || return 1
    status+="\"wallpaper\": \"${wallpaper}\","
  fi

  local fields='OS|Kernel|Shell|Theme|Icons'
  status+="$(neofetch --off --stdout |
    awk -F':' '/^('"${fields}"')/{
      gsub(/^[ \t]+/,"",$2)
      gsub(/[ \t]+$/,"",$2)
      printf "\"%s\":\"%s\",",tolower($1),$2
    }'
  )" || return 1

  # Remove the last extra comma after the last field
  status="${status:+${status::-1}}"

  status="{${status}}"

  local query=''
  query+='System:      \(.os)\n'
  query+='Kernel:      \(.kernel)\n'
  query+='Shell:       \(.shell)\n'
  query+='Graphics:    \(.server)\n'
  query+='Compositor:  \(.compositor)\n'
  query+='Windows:     \(.wm)\n'
  query+='Bars:        \(.bars)\n\n'
  query+='Theme:       \(.theme)\n'
  query+='Icons:       \(.icons)\n'
  query+='Wallpaper:   \(if .wallpaper then .wallpaper else "none" end)'

  echo "${status}" | jq -cer "\"${query}\"" || return 1
}

# Shows the list of all the wallpapers found under
# the wallpapers home.
# Outputs:
#  A list of wallpaper data.
list_wallpapers () {
  local wallpapers=''
  wallpapers="$(find_wallpapers)" || return 1

  local len=0
  len="$(count "${wallpapers}")" || return 1

  if is_true "${len} = 0"; then
    echo 'No wallpaper files found'
    return 0
  fi

  local query=''
  query+='Name:        \(.name)\n'
  query+='Resolution:  \(.resolution)\n'
  query+='Size:        \(.size)'
  query="[.[]|\"${query}\"]|join(\"\n\n\")"

  echo "${wallpapers}" | jq -cer "${query}" || return 1
}

# Sets the desktop wallpaper to the wallpaper with the given
# file name and scale mode.
# Arguments:
#  name: the filename of the wallpaper
#  mode: center, fill, max, scale or tile
set_wallpaper () {
  local name="${1}"
  local mode="${2}"

  if is_not_given "${name}"; then
    on_script_mode &&
      echo 'Missing the wallpaper file name' && return 2

    pick_wallpaper || return $?
    is_empty "${REPLY}" && echo 'Wallpaper file name required' && return 2
    name="${REPLY}"
  fi

  if is_not_wallpaper_file "${name}"; then
    echo 'Invalid or unknown wallpaper file'
    return 2
  fi

  if is_not_given "${mode}"; then
    on_script_mode &&
      echo 'Missing the alignment mode' && return 2

    pick_alignment_mode || return $?
    is_empty "${REPLY}" && echo 'Alignment mode is required' && return 2
    mode="${REPLY}"
  fi
  
  if is_not_wallpaper_mode "${mode}"; then
    echo 'Invalid alignment mode'
    return 2
  fi

  feh --no-fehbg --bg-"${mode}" "${WALLPAPERS_HOME}/${name}"

  if has_failed; then
    echo 'Failed to set wallpaper'
    return 2
  fi

  echo "Wallpaper set to ${name}"

  save_wallpaper_to_settings "${name}" "${mode}" ||
    echo 'Failed to save wallpaper into settings'
}

# Shows the data of the pointing device with the
# given name.
# Arguments:
#  name: the name of the pointing device
# Outputs:
#  A long list of pointing device data.
show_pointer () {
  local name="${1}"

  if is_not_given "${name}"; then
    on_script_mode &&
      echo 'Missing pointer name' && return 2

    pick_pointer || return $?
    is_empty "${REPLY}" && echo 'Pointer name is required' && return 2
    name="${REPLY}"
  fi

  local pointer=''
  pointer="$(find_pointer "${name}")"

  if has_failed; then
    echo "Pointer ${name} not found"
    return 2
  fi

  local query=''
  query+='ID:        \(.id)\n'
  query+='Name:      \(.name)'
  query+='\(.node|if . then "\nNode:      \(.)" else "" end)'
  query+='\(.enabled|if . then "\nEnabled:   \(.)" else "" end)'
  query+='\(.accel_speed|if . then "\nSpeed:     \(.)" else "" end)'
  query+='\(.accel|if . then "\nAccel:     \(.)" else "" end)'
  query+='\(.velocity|if . then "\nVelocity:  \(.)" else "" end)'
  query+='\(if .const_decel then "\nDecel:     \(.const_decel) \(.adapt_decel)" else "" end)'

  echo "${pointer}" | jq -cer "\"${query}\"" || return 1
}

# Shows the list of pointing devices currently
# connected to the system.
# Outputs:
#  A list of pointing devices.
list_pointers () {
  local pointers=''
  pointers="$(find_pointers)" || return 1

  local len=0
  len="$(count "${pointers}")" || return 1

  if is_true "${len} = 0"; then
    echo 'No pointers have found'
    return 0
  fi

  local query=''
  query+='ID:    \(.id)\n'
  query+='Name:  \(.name)'
  query="[.[]|\"${query}\"]|join(\"\n\n\")"

  echo "${pointers}" | jq -cer "${query}" || return 1
}

# Sets the acceleration speed of every pointing device
# to the given speed factor, where 0 means slow and 1
# means fast.
# Arguments:
#  factor: a speed factor between [0,1]
set_pointer_speed () {
  local factor="${1}"

  if is_not_given "${factor}"; then
    echo 'Missing speed factor'
    return 2
  elif is_not_valid_pointer_speed "${factor}"; then
    echo 'Invalid speed factor'
    return 2
  fi

  # Convert factor to acceleration speed [-1,1]
  local speed=0
  speed="$(calc "(2 * ${factor}) - 1")" || return 1

  # Convert factor to velocity [0.001,10]
  local velocity=0.001
  if is_true "${factor} > 0"; then
    velocity="$(calc "10 * ${factor}")" || return 1
  fi

  local devices=''
  devices="$(xinput --list | awk '{
    if ($0 ~ "Virtual core pointer") {
      next
    } else if ($0 ~ "Virtual core keyboard") {
      exit
    }

    match($0, ".*id=([0-9]+).*", a)
    print a[1]
  }')" || return 1

  local succeed='false'
  local device=''

  while read -r device; do
    # Assume this is a mouse device and set its acceleration speed
    xinput --set-prop "${device}" 'libinput Accel Speed' "${speed}" &> /dev/null &&
    succeed='true' && continue

    # Otherwise assume this is a touch device and set its velocity
    xinput --set-prop "${device}" 'Device Accel Constant Deceleration' 1 &> /dev/null &&
    xinput --set-prop "${device}" 'Device Accel Adaptive Deceleration' 1 &> /dev/null &&
    xinput --set-prop "${device}" 'Device Accel Velocity Scaling' "${velocity}" &> /dev/null &&
    succeed='true'
  done <<< "${devices}"

  if is_false "${succeed}"; then
    echo 'Failed to set pointer speed'
    return 2
  fi

  echo "Pointer speed set to ${factor}"

  save_pointer_speed_to_settings "${factor}" ||
    echo 'Failed to save pointer speed factor into settings'
}

# Shows the data of the tablet device with the
# given name.
# Arguments:
#  name: the name of a tablet device
# Outputs:
#  A long list of tablet device data.
show_tablet () {
  local name="${1}"

  if is_not_given "${name}"; then
    on_script_mode &&
      echo 'Missing the table name' && return 2

    pick_tablet || return $?
    is_empty "${REPLY}" && echo 'Tablet name is required' && return 2
    name="${REPLY}"
  fi

  local tablet=''
  tablet="$(find_tablet "${name}")"

  if has_failed; then
    echo "Tablet ${name} not found"
    return 2
  fi

  local query=''
  query+='ID:           \(.id)\n'
  query+='Name:         \(.name)\n'
  query+='Type:         \(.type)\n'
  query+='Vendor:       \(.vendor)'
  query+='\(.Area|if . then "\nArea:         \(.)" else "" end)'
  query+='\(.Rotate|if . then "\nRotate:       \(.)" else "" end)'
  query+='\(.PressureRecalibration|if . then "\nPressure:     \(.)" else "" end)'
  query+='\(.PressCurve|if . then "\nPress Curve:  \(.)" else "" end)'
  query+='\(.RawSample|if . then "\nSample:       \(.)" else "" end)'
  query+='\(.Mode|if . then "\nMode:         \(.)" else "" end)'
  query+='\(.Touch|if . then "\nTouch:        \(.)" else "" end)'
  query+='\(.Gesture|if . then "\nGesture:      \(.)" else "" end)'
  query+='\(.TapTime|if . then "\nTap Time:     \(.)" else "" end)'
  query+='\(.CursorProx|if . then "\nCursor:       \(.)" else "" end)'
  query+='\(.Threshold|if . then "\nThreshold:    \(.)" else "" end)'

  echo "${tablet}" | jq -cer "\"${query}\"" || return 1
}

# Shows the list of stylus-pen devices currently
# connected to the system.
# Outputs:
#  A list of stylus-pen devices.
list_tablets () {
  local tablets=''
  tablets="$(find_tablets)" || return 1

  local len=0
  len="$(count "${tablets}")" || return 1

  if is_true "${len} = 0"; then
    echo 'No tablets have found'
    return 0
  fi

  local query=''
  query+='ID:      \(.id)\n'
  query+='Name:    \(.name)\n'
  query+='Type:    \(.type)\n'
  query+='Vendor:  \(.vendor)'
  query="[.[]|\"${query}\"]|join(\"\n\n\")"

  echo "${tablets}" | jq -cer "${query}" || return 1
}

# Scales the area of the tablet with the given name,
# keeping the current aspect ratio.
# Arguments:
#  name:  the name of a tablet device
#  scale: the scale factor [0.1,1]
scale_tablet () {
  local name="${1}"
  local scale="${2}"

  if is_not_given "${name}"; then
    on_script_mode &&
      echo 'Missing the tablet name' && return 2

    pick_tablet || return $?
    is_empty "${REPLY}" && echo 'Tablet name is required' && return 2
    name="${REPLY}"
  fi

  local tablet=''
  tablet="$(find_tablet "${name}")"

  if has_failed; then
    echo "Tablet ${name} not found"
    return 2
  elif is_not_scalable "${name}"; then
    echo "Tablet ${name} is not scalable"
    return 2
  fi

  if is_not_given "${scale}"; then
    on_script_mode &&
      echo 'Missing the scale factor' && return 2

    ask 'Enter the scale factor [0.1-1]:' || return $?
    is_empty "${REPLY}" && echo 'Scale factor is required' && return 2
    scale="${REPLY}"
  fi
  
  if is_not_valid_tablet_scale "${scale}"; then
    echo 'Invalid scale factor'
    return 2
  fi

  # Calculate tablet's ratio
  local area=''
  area="$(get "${tablet}" '.Area')" || return 1

  local width="$(echo "${area}" | cut -d ' ' -f 3)"
  local height="$(echo "${area}" | cut -d ' ' -f 4)"

  local ratio=0
  ratio="$(calc "${width} / ${height}")" || return 1

  # Inverse aspect ratio for portrait layouts
  if is_true "${ratio} > 1"; then
    ratio="$(calc "1 / ${ratio}")" || return 1
  fi

  # Reset tablet area before applying the new scaling
  xsetwacom --set "${name}" ResetArea &> /dev/null || return 1

  tablet="$(find_tablet "${name}")" || return 1
  area="$(get "${tablet}" '.Area')" || return 1
  width="$(echo "${area}" | cut -d ' ' -f 3)"

  # Apply scaling factor
  width="$(calc "floor(${width} * ${scale})")" || return 1
  height="$(calc "floor(${width} * ${ratio})")"|| return 1

  xsetwacom --set "${name}" area "0 0 ${width} ${height}" &> /dev/null

  if has_failed; then
    echo "Failed to scale tablet ${name}"
    return 2
  fi

  echo "Tablet ${name} scaled by ${scale}"

  save_tablet_scale_to_settings "${name}" "${scale}" ||
    echo 'Failed to save the tablet scale factor'
}

# Maps the area of the tablet with the given name
# to a target which could be any active display device
# ot the special desktop value that resets the tablet's
# mapping and ratio.
# Arguments:
#  name:   the name of a tablet device
#  target: the name of a display or desktop
map_tablet () {
  local name="${1}"
  local target="${2}"

  if is_not_given "${name}"; then
    on_script_mode &&
      echo 'Missing the tablet name' && return 2

    pick_tablet || return $?
    is_empty "${REPLY}" && echo 'Tablet name is required' && return 2
    name="${REPLY}"
  fi

  local tablet=''
  tablet="$(find_tablet "${name}")"

  if has_failed; then
    echo "Tablet ${name} not found"
    return 2
  elif is_not_scalable "${name}"; then
    echo "Tablet ${name} is not scalable"
    return 2
  fi

  if is_not_given "${target}"; then
    on_script_mode &&
      echo 'Missing the mapping target' && return 2

    pick_mapping_target || return $?
    is_empty "${REPLY}" && echo 'Mapping target is required' && return 2
    target="${REPLY}"
  fi

  # Reset mapping and area if desktop is given as target
  if equals "${target}" 'desktop'; then
    xsetwacom --set "${name}" MapToOutput desktop &> /dev/null

    if has_failed; then
      echo 'Failed to reset mapping'
      return 2
    fi

    # Restore area keeping the current scale
    local area=''
    area="$(get "${tablet}" '.Area')" || return 1
    local previous_width="$(echo "${area}" | cut -d ' ' -f 3)"

    # Reset tablets area to default size
    xsetwacom --set "${name}" ResetArea &> /dev/null || return 1

    tablet="$(find_tablet "${name}")" || return 1
    area="$(get "${tablet}" '.Area')" || return 1

    local width="$(echo "${area}" | cut -d ' ' -f 3)"
    local height="$(echo "${area}" | cut -d ' ' -f 4)"

    # Calculate the scaling factor
    local scale=0
    scale="$(calc "${previous_width} / ${width}")" || return 1

    width="$(calc "floor(${width} * ${scale})")" || return 1
    height="$(calc "floor(${height} * ${scale})")" || return 1

    xsetwacom --set "${name}" area "0 0 ${width} ${height}" &> /dev/null || return 1

    echo 'Tablet mapping has been reset'
    return 0
  fi

  local output=''
  output="$(find_output "${target}")"

  if has_failed; then
    echo "Display ${target} not found"
    return 2
  elif is_not_active "${output}"; then
    echo "Display ${target} is not active"
    return 2
  fi

  # Re-calculate tablet's area to match display's ratio
  local display_width=0
  display_width="$(get "${output}" '.resolution_width')" || return 1

  local display_height=0
  display_height="$(get "${output}" '.resolution_height')" || return 1

  local ratio=0
  ratio="$(calc "${display_width} / ${display_height}")" || return 1

  # Inverse aspect ratio for portrait layouts
  if is_true "${ratio} > 1"; then
    ratio="$(calc "1 / ${ratio}")" || return 1
  fi

  local area=0
  area="$(get "${tablet}" '.Area')" || return 1

  local width="$(echo "${area}" | cut -d ' ' -f 3)"
  local height=0
  height="$(calc "floor(${width} * ${ratio})")" || return 1

  xsetwacom --set "${name}" MapToOutput "${target}" &> /dev/null &&
  xsetwacom --set "${name}" area "0 0 ${width} ${height}" &> /dev/null

  if has_failed; then
    echo "Failed to map tablet ${name}"
    return 2
  fi

  echo "Tablet ${name} mapped to ${target}"
}

# Applies the pointer settings being set in the
# settings file.
init_pointer () {
  local speed='0.35'

  if file_exists "${DESKTOP_SETTINGS}"; then
    speed="$(jq '.pointer.speed|if . then . else 0.35 end' "${DESKTOP_SETTINGS}")"
  fi

  set_pointer_speed "${speed}"
}

# Applies the settings for those tablets being stored
# in the settings file.
init_tablets () {
  if file_not_exists "${DESKTOP_SETTINGS}"; then
    echo 'No tablets settings found'
    return 2
  fi

  local tablets=''
  tablets="$(jq '.tablets|if . then . else empty end' "${DESKTOP_SETTINGS}")"

  if is_not_given "${tablets}"; then
    echo 'No tablets settings found'
    return 2
  fi

  local output=''
  output="$(find_outputs primary | jq -cer '.[0]|.device_name')" || return 1

  tablets="$(echo "${tablets}" | jq -cr '.[]|{name, scale}')" || return 1

  # Iterate over tablet commands and execute one by one
  local tablet=''

  while read -r tablet; do
    local name=''
    name="$(get "${tablet}" '.name')" || return 1

    local scale=1
    scale="$(get "${tablet}" '.scale')" || return 1

    scale_tablet "${name}" "${scale}" &&
    map_tablet "${name}" "${output}" || return $?
  done <<< "${tablets}"
}

# Sets the desktop wallpaper to the wallpaper
# being set in the settings file.
init_wallpaper () {
  if file_not_exists "${DESKTOP_SETTINGS}"; then
    echo 'No wallpaper settings found'
    return 2
  fi

  local wallpaper=''
  wallpaper="$(jq '.wallpaper|if . then . else empty end' "${DESKTOP_SETTINGS}")"

  if is_not_given "${wallpaper}"; then
    echo 'No wallpaper settings found'
    return 2
  fi

  local name=''
  name="$(get "${wallpaper}" '.name')" || return 1

  if file_not_exists "${WALLPAPERS_HOME}/${name}"; then
    echo "Wallpaper ${name} not found"
    return 2
  fi

  local mode=''
  mode="$(get "${wallpaper}" '.mode')" || return 1

  set_wallpaper "${name}" "${mode:-"center"}"
}

# Sets the compositor backend to the given engine.
# Arguments:
#  engine: xrender or glx
set_backend () {
  local engine="${1}"

  if is_not_given "${engine}"; then
    echo 'Backend engine is required'
    return 2
  elif is_not_backend_engine "${engine}"; then
    echo 'Invalid or unknown backend engine'
    return 2
  fi

  local conf_file="${HOME}/.config/picom/picom.conf"
  sed -i "s/\(backend =\).*/\1 \"${engine}\";/" "${conf_file}"

  if has_failed; then
    echo "Failed to set backend to ${engine}"
    return 2
  fi

  echo "Backend set to ${engine}"
}

# Sets the vsync mode of the compositor to on or off.
# Arguments:
#  mode: on or off
set_vsync () {
  local mode="${1}"

  if is_not_given "${mode}"; then
    echo 'Vsync mode is required'
    return 2
  elif is_not_toggle "${mode}"; then
    echo 'Invalid or unknown vsync mode'
    return 2
  fi

  if equals "${mode}" 'on'; then
    mode='true'
  else
    mode='false'
  fi

  local conf_file="${HOME}/.config/picom/picom.conf"
  sed -i "s/\(vsync =\).*/\1 ${mode};/" "${conf_file}"

  if has_failed; then
    echo "Failed to set vsync mode to ${mode}"
    return 2
  fi

  echo "Vsync mode set to ${mode}"
}

# Adds a new empty workspace to the monitor with
# the given output name. If no monitor is given
# the workspace will be assigned to the focused
# monitor.
# Arguments:
#  monitor: the output name of an active monitor
add_workspace () {
  local monitor="${1}"

  if is_given "${monitor}"; then
    local output=''
    output="$(find_output "${monitor}")"

    if has_failed; then
      echo "Monitor ${monitor} not found"
      return 2
    fi
  
    if is_not_connected "${output}"; then
      echo "Monitor ${monitor} is disconnected"
      return 2
    elif is_not_active "${output}"; then
      echo "Monitor ${monitor} is inactive"
      return 2
    fi
  fi

  # Give to the new workspace the maximun of the existing indices
  local index=0
  index="$(bspc query -D --names | awk '$0>x{x=$0};END{print x}')" || return 1
  index="$(calc "${index} + 1")"

  # Add new workspace to the monitor
  bspc monitor ${monitor} -a "${index}"

  if has_failed; then
    echo "Failed to add workspace to the ${monitor:-"current"} monitor"
    return 2
  fi

  # Fix workspaces order and possible inconsistencies
  fix_workspaces &> /dev/null

  if has_failed; then
    echo "Failed to fix workspaces"
    return 2
  fi
  
  echo "Workspace added to the ${monitor:-"current"} monitor"
}

# Removes a workspace with the given index.
# Arguments:
#  index: the index name of a workspace
remove_workspace () {
  local index="${1}"

  if is_not_given "${index}"; then
    on_script_mode &&
      echo 'Missing the workspace index' && return 2

    pick_workspace || return $?
    is_empty "${REPLY}" && echo 'Workspace index is required' && return 2
    index="${REPLY}"
  fi

  if workspace_not_exists "${index}"; then
    echo 'Unknown or invalid workspace index'
    return 2
  fi

  # Remove workspace
  bspc desktop "${index}" --remove

  if has_failed; then
    echo "Failed to remove workspace ${index}"
    return 2
  fi

  # Fix workspaces order and possible inconsistencies
  fix_workspaces &> /dev/null

  if has_failed; then
    echo "Failed to fix workspaces"
    return 2
  fi

  echo "Workspace ${index} has been removed"
}

# Repairs any possible inconsistencies among workspaces
# like orphan workspaces, misordered slots or dangling
# inactive monitors.
fix_workspaces () {
  # Remove dangling monitors and adopt orphan windows
  remove_dangling_monitors || return 1

  local monitors=''
  monitors="$(bspc query --monitors --names)" || return 1

  # Assign workspaces to monitors by order
  local index=1
  local monitor=''

  while read -r monitor; do
    local slots=0
    slots="$(bspc query -T -m "${monitor}" | jq -cer '.desktops|length')" || return 1

    # Compute the index of the last slot
    local last=0
    last="$(calc "${index} + ${slots} - 1")"

    # Generate the index sequence of monitor's workspaces
    local indices=''
    indices="$(seq -s ' ' ${index} ${last})"
    
    bspc monitor "${monitor}" -d ${indices} || return 1

    # Move to the next workspace index
    index="$(calc "${last} + 1")"
  done <<< "${monitors}"

  # Adopt any possible orphan windows
  bspc wm --adopt-orphans || return 1

  echo 'Workspaces have been fixed'
}

# Initiates the desktop workspaces for any active
# display monitor. This operation removes any extra
# workspaces given to a monitor.
init_workspaces () {  
  # Remove dangling monitors and adopt orphan windows
  remove_dangling_monitors || return 1

  # Find the primary monitor output
  local primary=''
  primary="$(find_outputs 'primary' | jq -cer '.[0]|.device_name')"

  if has_failed; then
    echo 'Unable to find primary monitor'
    return 2
  fi
  
  local monitors=''
  monitors="$(bspc query --monitors --names)" || return 1

  if is_empty "${monitors}"; then
    echo 'No active monitors have found'
    return 2
  fi

  # Remove any possible extra workspaces per monitor
  local monitor=''

  while read -r monitor; do
    local slots=2

    # Give four workspace slots to the primary monitor
    if equals "${monitor}" "${primary}"; then
      slots=4
    fi

    # Find the current number of monitor's workspaces
    local desktops=''
    desktops="$(bspc query -T -m "${monitor}" | jq -cer '.desktops')" || return 1
  
    local current_slots=0
    current_slots="$(echo "${desktops}" | jq -cer 'length')" || return 1

    local subtract="$(calc "${current_slots} - ${slots}")"

    # Remove extra desktops one by one
    if is_true "${subtract} > 0"; then
      local extras=''
      extras="$(echo "${desktops}" | jq -cer "[.[]|.name]|.[length - ${subtract}:]|.[]")" || return 1

      local extra=''
      while read -r extra; do
        bspc desktop "${extra}" -r && bspc wm --adopt-orphans
      done <<< "${extras}"
    fi
  done <<< "${monitors}"

  # Loop again monitors to fill possible empty workspace slots
  local index=1
  local monitor=''

  while read -r monitor; do
    local slots=2

    # Give four workspace slots to the primary monitor
    if equals "${monitor}" "${primary}"; then
      slots=4
    fi

    # Compute the index of the last slot
    local last=0
    last="$(calc "${index} + ${slots} - 1")"

    # Generate the index sequence of monitor's workspaces
    local indices=''
    indices="$(seq -s ' ' ${index} ${last})"

    # Set desktop workspace and adopt possible orphan windows
    bspc monitor "${monitor}" -d ${indices} && bspc wm --adopt-orphans

    if has_failed; then
      echo "Failed to assign workspaces to monitor ${monitor}"
      return 2
    fi

    # Move to the next workspace index
    index="$(calc "${last} + 1")"
  done <<< "${monitors}"

  # Initialize desktop workspaces every time a new monitor is added
  local args=()

  bspc subscribe monitor_add | while read -a args; do
    # Make sure new monitor respects padding configuration
    bspc config left_padding 0
    bspc config right_padding 0
    bspc config bottom_padding 0
    
    local query='[.[]|select(.|test("^[0-9]+$"))]|max'
    local max="$(bspc query -D --names | jq --raw-input . | jq -rcs "${query}")"
    local a="$(calc "${max} + 1")"
    local b="$(calc "${a} + 1")"

    bspc monitor "${args[1]}" -d "${a}" "${b}"
  done &

  echo 'Desktop workspaces have set'
}

# Initiates the sticky scratchpad terminal window.
init_scratchpad () {
  local scratchpad="${TERMINAL} --class scratch,scratch"

  # Kill any other instances of scratchpad terminals
  kill_process "${scratchpad}"

  # Make sure the scratchpad PWD is set to home  
  cd "${HOME}"

  # Launch a new instance of scratchpad terminal
  ${scratchpad} &

  # Dettach it from the current shell to suppress kill outputs
  disown $! && sleep 1

  if is_process_down "${scratchpad}"; then
    echo 'Failed to launch scratchpad'
    return 2
  fi

  echo 'Scratchpad has been launched'
}

# Initiates desktop status bars.
init_bars () {  
  # Terminate already running bar instances
  polybar-msg cmd quit &> /dev/null

  # Start new loggin section
  echo "---" | tee -a /tmp/polybar.log > /dev/null

  # Launch top/bottom bars for the primary monitor
  local primary=''
  primary="$(polybar -m | awk -F':' '/primary/{print $1}')"

  MONITOR="${primary}" polybar -r primary 2>&1 |
    tee -a /tmp/polybar.log > /dev/null & disown
  
  MONITOR="${primary}" polybar -r secondary 2>&1 |
    tee -a /tmp/polybar.log > /dev/null & disown

  # Launch tertiary bars for each other monitor
  local others=''
  others="$(polybar -m | awk -F':' '!/primary/{print $1}')"

  if is_not_empty "${others}"; then
    local monitor=''

    while read -r monitor; do
      MONITOR="${monitor}" polybar -r tertiary 2>&1 |
        tee -a /tmp/polybar.log > /dev/null & disown
    done <<< "${others}"
  fi

  sleep 1

  if is_process_down '^polybar.*'; then
    echo 'Failed to launch desktop bars'
    return 2
  fi

  echo 'Desktop bars have been launched'
}

# Initiates keyboard bindings.
init_bindings () {
  # Kill any running sxhkd processes
  kill_process '^sxhkd.*'
  
  # Launch a new instance of sxhkd process
  sxhkd &> /dev/null &
  
  # Dettach it from the current shell to suppress kill outputs
  disown $! && sleep 1

  if is_process_down '^sxhkd.*'; then
    echo 'Failed to launch keyboard bindings'
    return 2
  fi

  echo 'Keyboard bindings have been launched'
}

# Starts the desktop user interface by launcing the
# compositor along with the window manager. In case
# window manager is already running it restarts it.
start () {
  # Set pointer and background color to defaults
  hsetroot -solid '#000000'
  xsetroot -cursor_name left_ptr

  # Start compositor if it is down
  if is_process_down '^picom.*'; then
    picom &
  fi
  
  # Restart window manager if it is already up
  if is_process_up '^bspwm.*'; then
    restart && return 0 || return $?
  fi
  
  exec bspwm &> /dev/null

  if has_failed; then
    echo 'Failed to start desktop'
    return 2
  fi

  echo 'Desktop has been started'
}

# Restarts the desktop user interface along with
# various complementary services like key bindings,
# wallpaper, scratchpad and etc.
restart () {
  # Kill any running picom processes
  kill_process '^picom.*'
  
  # Launch a new instance of picom process
  picom &> /dev/null &
  
  # Dettach it from the current shell to suppress kill outputs
  disown $! && sleep 1

  # Restart window manager
  bspc wm --restart &> /dev/null

  if has_failed; then
    echo 'Failed to restart desktop'
    return 2
  fi

  echo 'Desktop has been restarted'
}

