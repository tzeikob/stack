#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/desktop/helpers
source /opt/stack/displays/helpers

SETTINGS_FILE="${CONFIG_HOME}/desktop.json"

# Shows the current status of the desktop environment.
# Arguments:
#  None
# Outputs:
#  A verbose list of text data.
show_status () {
  local status=''

  local server=''
  server="$(xdpyinfo -display "${DISPLAY}" | awk -F': ' '{
    ORS=""
    gsub(/^[ \t]+/,"",$2)
    gsub(/[ \t]+$/,"",$2)
    switch ($1) {
      case "version number": print $2; break
      case "X.Org version": print "/"$2")"; break
      default: break
    }
  }')" || return 1
  status+="\"server\": \"Xorg ${server::-1}\","

  local compositor=''
  compositor="$(pacman -Qi picom | grep -Po '^Version\s*: \K.+')" || return 1
  status+="\"compositor\": \"Picom ${compositor}\","

  local wm=''
  wm="$(bspwm -v)" || return 1
  status+="\"wm\": \"BSPWM ${wm}\","

  local bars=''
  bars="$(polybar -v | head -n +1 | cut -d ' ' -f 2)" || return 1
  status+="\"bars\": \"Polybar ${bars}\","

  if [[ -f "${SETTINGS_FILE}" ]]; then
    local query='.wallpaper|if . then "\(.name) [\(.mode|ascii_upcase)]" else "none" end'
    local wallpaper=''
    wallpaper="$(jq -cr "${query}" "${SETTINGS_FILE}")" || return 1
    status+="\"wallpaper\": \"${wallpaper}\","
  fi

  local fields='OS|Kernel|Shell|Theme|Icons'
  status+="$(neofetch --off --stdout |
    awk -F':' '/^('"${fields}"')/{
      gsub(/^[ \t]+/,"",$2)
      gsub(/[ \t]+$/,"",$2)
      printf "\"%s\":\"%s\",",tolower($1),$2
    }'
  )" || return 1

  # Remove the last extra comma after the last field
  if [[ -n "${status}" ]]; then
    status="${status::-1}"
  fi

  status="{${status}}"

  local query=''
  query+='OS:          \(.os)\n'
  query+='Kernel:      \(.kernel)\n'
  query+='Shell:       \(.shell)\n'
  query+='Server:      \(.server)\n'
  query+='Compositor:  \(.compositor)\n'
  query+='WM:          \(.wm)\n'
  query+='Bars:        \(.bars)\n'
  query+='Theme:       \(.theme)\n'
  query+='Icons:       \(.icons)\n'
  query+='Wallpaper:   \(if .wallpaper then .wallpaper else "none" end)'

  echo "${status}" | jq -cer "\"${query}\"" || return 1
}

# Shows the list of all the wallpapers found under
# the wallpapers home.
# Arguments:
#  None
# Outputs:
#  A list of wallpaper data.
list_wallpapers () {
  local wallpapers=''
  wallpapers="$(find_wallpapers)"

  if [[ $? -ne 0 ]]; then
    echo "Unable to find wallpaper files"
    return 2
  fi

  local len=0
  len="$(count "${wallpapers}")" || return 1

  if [[ ${len} -eq 0 ]]; then
    echo "No wallpaper files have found"
    return 2
  fi

  local query=''
  query+='Name:        \(.name)\n'
  query+='Type:        \(.type)\n'
  query+='Color:       \(.color) \(.bit)\n'
  query+='Size:        \(.size)\n'
  query+='Resolution:  \(.resolution)'
  query="[.[]|\"${query}\"]|join(\"\n\n\")"

  echo "${wallpapers}" | jq -cer "${query}" || return 1
}

# Sets the desktop wallpaper to the wallpaper with the given
# file name and scale mode.
# Arguments:
#  name:    the filename of the wallpaper
#  mode:    center, fill, max, scale or tile
#  persist: save or nosave, default is save
set_wallpaper () {
  local name="${1}"
  local mode="${2}"
  local persist="${3:-"save"}"

  if [[ -z "${name}" ]]; then
    pick_wallpaper || return $?
    [[ -n "${REPLY}" ]] && name="${REPLY}" || return 0
  fi

  if [[ "${name}" =~ /+ ]]; then
    echo "Invalid wallpaper name"
    return 2
  fi

  name="$(basename "${name}")"
  local wallpaper_file="${WALLPAPERS_HOME}/${name}"

  if [[ ! "${wallpaper_file}" =~ .+\.(jpg|jpeg|png)$ ]]; then
    echo "Invalid wallpaper file type"
    return 2
  elif [[ ! -f "${wallpaper_file}" ]]; then
    echo "No wallpaper found with name ${name}"
    return 2
  fi

  if [[ -z "${mode}" ]]; then
    local modes=''
    modes+='{"key": "center", "value": "Center"},'
    modes+='{"key": "fill", "value": "Fill"},'
    modes+='{"key": "max", "value": "Max"},'
    modes+='{"key": "scale", "value": "Scale"},'
    modes+='{"key": "tile", "value": "Tile"}'
    modes="[${modes}]"

    pick_one "Select a mode:" "${modes}" "vertical" || return $?
    [[ -n "${REPLY}" ]] && mode="${REPLY}" || return 0
  fi
  
  if [[ ! "${mode}" =~ ^(center|fill|max|scale|tile)$ ]]; then
    echo "Invalid wallpaper mode"
    return 2
  fi

  feh --no-fehbg --bg-"${mode}" "${wallpaper_file}"

  if [[ $? -ne 0 ]]; then
    echo "Failed to set wallpaper"
    return 2
  fi

  echo "Wallpaper has been set to ${name}"

  # Save wallpaper into settings file
  if [[ "${persist}" == "save" ]]; then
    local settings='{}'
    local wallpaper="{\"name\": \"${name}\", \"mode\": \"${mode}\"}"

    if [[ -f "${SETTINGS_FILE}" ]]; then
      settings="$(jq -e ".wallpaper = ${wallpaper} " "${SETTINGS_FILE}")" || return 1
    else
      settings="$(echo "{\"wallpaper\": ${wallpaper}}" | jq -e '.')" || return 1
    fi

    mkdir -p "${CONFIG_HOME}"
    echo "${settings}" > "${SETTINGS_FILE}"
  fi
}

# Shows the data of the pointing device with the
# given id.
# Arguments:
#  id: the id of the pointing device
# Outputs:
#  A long list of pointing device data.
show_pointer () {
  local id="${1}"

  if [[ -z "${id}" ]]; then
    pick_pointer || return $?
    [[ -n "${REPLY}" ]] && id="${REPLY}" || return 0
  fi

  local pointer=''
  pointer="$(find_pointer "${id}")"

  if [[ $? -ne 0 ]]; then
    echo "Unable to find pointer ${id}"
    return 2
  fi

  local query=''
  query+='ID:          \(.id)\n'
  query+='Name:        \(.name)'
  query+='\(.node|if . then "\nNode:        \(.)" else "" end)'
  query+='\(.enabled|if . then "\nEnabled:     \(.)" else "" end)'
  query+='\(.accel_speed|if . then "\nSpeed:       \(.)" else "" end)'
  query+='\(.accel|if . then "\nAccel:       \(.)" else "" end)'
  query+='\(.velocity|if . then "\nVelocity:    \(.)" else "" end)'
  query+='\(if .const_decel then "\nDecel:       \(.const_decel) \(.adapt_decel)" else "" end)'

  echo "${pointer}" | jq -cer "\"${query}\"" || return 1
}

# Shows the list of pointing devices currently
# connected to the system.
# Arguments:
#  None
# Outputs:
#  A list of pointing devices.
list_pointers () {
  local pointers=''
  pointers="$(find_pointers)"

  if [[ $? -ne 0 ]]; then
    echo "Unable to find pointers"
    return 2
  fi

  local len=0
  len="$(count "${pointers}")" || return 1

  if [[ ${len} -eq 0 ]]; then
    echo "No pointers have found"
    return 0
  fi

  local query=''
  query+='ID:    \(.id)\n'
  query+='Name:  \(.name)'
  query="[.[]|\"${query}\"]|join(\"\n\n\")"

  echo "${pointers}" | jq -cer "${query}" || return 1
}

# Sets the acceleration speed of every pointing device
# to the given speed factor, where 0 means slow and 1
# means fast.
# Arguments:
#  factor:  a speed factor between [0, 1]
#  persist: save or nosave, default is save
set_pointer_speed () {
  local factor="${1}"
  local persist="${2:-"save"}"

  if [[ -z "${factor}" ]]; then
    ask "Enter the speed factor [0,1]:" "^[0-9]+\.?[0-9]*$" || return $?
    factor="${REPLY}"
  fi

  if [[ ! "${factor}" =~ ^[0-9]+\.?[0-9]*$ ]]; then
    echo "Invalid pointer speed"
    return 2
  elif (( $(echo "${factor} < 0" | bc) )); then
    echo "Speed factor can't be lower than 0"
    return 2
  elif (( $(echo "${factor} > 1" | bc) )); then
    echo "Speed factor can't be greater than 1"
    return 2
  fi

  # Convert factor to acceleration speed [-1,1]
  local speed=0
  speed="$(echo "${factor}" | awk '{print 2*$0 - 1}')" || return 1

  # Convert factor to velocity [0,10]
  local velocity=0
  velocity="$(echo "${factor}" | awk '{
    if ($0 == 0) {
      velocity=0.001
    } else {
      velocity=10*$0
    }

    print velocity
  }')" || return 1

  local devices=''
  devices="$(xinput --list | awk '{
    if ($0 ~ "Virtual core pointer") {
      next
    } else if ($0 ~ "Virtual core keyboard") {
      exit
    }

    match($0, ".*id=([0-9]+).*", a)
    print a[1]
  }')" || return 1

  local succeed="false"

  local device=''
  while read -r device; do
    # Assume this is a mouse device and set its acceleration speed
    xinput --set-prop "${device}" "libinput Accel Speed" "${speed}" &> /dev/null &&
    succeed="true" && continue

    # Otherwise assume this is a touch device and set its velocity
    xinput --set-prop "${device}" "Device Accel Constant Deceleration" 1 &> /dev/null &&
    xinput --set-prop "${device}" "Device Accel Adaptive Deceleration" 1 &> /dev/null &&
    xinput --set-prop "${device}" "Device Accel Velocity Scaling" "${velocity}" &> /dev/null &&
    succeed="true"
  done <<< "${devices}"

  if [[ "${succeed}" == "false" ]]; then
    echo "Failed to set pointer speed"
    return 2
  fi

  echo "Pointer speed set to ${factor}"

  # Save factor into settings file
  if [[ "${persist}" == "save" ]]; then
    local settings='{}'
    local pointer="{\"speed\": ${factor}}"

    if [[ -f "${SETTINGS_FILE}" ]]; then
      settings="$(jq -e ".pointer = ${pointer} " "${SETTINGS_FILE}")" || return 1
    else
      settings="$(echo "{\"pointer\": ${pointer}}" | jq -e '.')" || return 1
    fi

    mkdir -p "${CONFIG_HOME}"
    echo "${settings}" > "${SETTINGS_FILE}"
  fi
}

# Shows the data of the tablet device with the
# given name.
# Arguments:
#  name: the name of a tablet device
# Outputs:
#  A long list of tablet device data.
show_tablet () {
  local name="${1}"

  if [[ -z "${name}" ]]; then
    pick_tablet || return $?
    [[ -n "${REPLY}" ]] && name="${REPLY}" || return 0
  fi

  local tablet=''
  tablet="$(find_tablet "${name}")"

  if [[ $? -ne 0 ]]; then
    echo "Unable to find tablet ${name}"
    return 2
  fi

  local query=''
  query+='ID:           \(.id)\n'
  query+='Name:         \(.name)\n'
  query+='Type:         \(.type)\n'
  query+='Vendor:       \(.vendor)'
  query+='\(.Area|if . then "\nArea:         \(.)" else "" end)'
  query+='\(.Rotate|if . then "\nRotate:       \(.)" else "" end)'
  query+='\(.PressureRecalibration|if . then "\nPressure:     \(.)" else "" end)'
  query+='\(.PressCurve|if . then "\nPress Curve:  \(.)" else "" end)'
  query+='\(.RawSample|if . then "\nSample:       \(.)" else "" end)'
  query+='\(.Mode|if . then "\nMode:         \(.)" else "" end)'
  query+='\(.Touch|if . then "\nTouch:        \(.)" else "" end)'
  query+='\(.Gesture|if . then "\nGesture:      \(.)" else "" end)'
  query+='\(.TapTime|if . then "\nTap Time:     \(.)" else "" end)'
  query+='\(.CursorProx|if . then "\nCursor:       \(.)" else "" end)'
  query+='\(.Threshold|if . then "\nThreshold:    \(.)" else "" end)'

  echo "${tablet}" | jq -cer "\"${query}\"" || return 1
}

# Shows the list of stylus-pen devices currently
# connected to the system.
# Arguments:
#  None
# Outputs:
#  A list of stylus-pen devices.
list_tablets () {
  local tablets=''
  tablets="$(find_tablets)"

  if [[ $? -ne 0 ]]; then
    echo "Unable to find tablets"
    return 2
  fi

  local len=0
  len="$(count "${tablets}")" || return 1

  if [[ ${len} -eq 0 ]]; then
    echo "No tablets have found"
    return 0
  fi

  local query=''
  query+='ID:      \(.id)\n'
  query+='Name:    \(.name)\n'
  query+='Type:    \(.type)\n'
  query+='Vendor:  \(.vendor)'
  query="[.[]|\"${query}\"]|join(\"\n\n\")"

  echo "${tablets}" | jq -cer "${query}" || return 1
}

# Scales the area of the tablet with the given name,
# keeping the current aspect ratio.
# Arguments:
#  name:    the name of a tablet device
#  scale:   the scale factor [0.1-1]
#  persist: save or nosave, default is save
scale_tablet () {
  local name="${1}"
  local scale="${2}"
  local persist="${3:-"save"}"

  if [[ -z "${name}" ]]; then
    pick_tablet || return $?
    [[ -n "${REPLY}" ]] && name="${REPLY}" || return 0
  fi

  local tablet=''
  tablet="$(find_tablet "${name}")"

  if [[ $? -ne 0 ]]; then
    echo "Unable to find tablet ${name}"
    return 2
  elif ! is_scalable "${name}"; then
    echo "Tablet ${name} is not scalable"
    return 2
  fi

  if [[ -z "${scale}" ]]; then
    ask "Enter the scale factor [0.1-1]:" "^[0-9]+\.?[0-9]*$" || return $?
    scale="${REPLY}"
  fi

  if [[ ! "${scale}" =~ ^[0-9]+\.?[0-9]*$ ]]; then
    echo "Invalid pointer speed"
    return 2
  elif (( $(echo "${scale} <= 0" | bc) )); then
    echo "Scale can't be lower or equal to 0"
    return 2
  elif (( $(echo "${scale} > 1" | bc) )); then
    echo "Scale can't be larger than 1"
    return 2
  fi

  # Read the current aspect ratio
  local ratio=0
  ratio="$(get "${tablet}" '.Area' | awk '{print $3/$4}')" || return 1

  # Reset tablet area before applying the new scaling
  xsetwacom --set "${name}" ResetArea &> /dev/null || return 1

  # Restore the aspect ratio
  tablet="$(find_tablet "${name}")" || return 1

  local area=0
  area="$(get "${tablet}" '.Area' | awk -v "scale=${scale}" -v "ratio=${ratio}" '{
    if (ratio > 1) ratio=1/ratio

    width=int($3*scale)
    height=int(width*ratio)

    print 0" "0" "width" "height
  }')" || return 1

  xsetwacom --set "${name}" area "${area}" &> /dev/null

  if [[ $? -ne 0 ]]; then
    echo "Unable to scale tablet ${name}"
    return 2
  fi

  echo "Tablet ${name} scaled by ${scale}"

  # Save tablet's scale factor into settings file
  if [[ "${persist}" == "save" ]]; then
    local settings='{}'
    local tablet="{\"name\": \"${name}\", \"scale\": ${scale}}"

    if [[ -f "${SETTINGS_FILE}" ]]; then
      local tablets=''
      tablets="$(jq '.tablets|if . then . else empty end' "${SETTINGS_FILE}")"

      if [[ -n "${tablets}" ]]; then
        local query=''
        query=".tablets[]|select(.name == \"${name}\")"

        local exists=''
        exists="$(jq "${query}" "${SETTINGS_FILE}")"

        if [[ -n "${exists}" ]]; then
          query="(${query}|.scale)|= ${scale}"
        else
          query=".tablets += [${tablet}]"
        fi

        settings="$(jq -e "${query}" "${SETTINGS_FILE}")" || return 1
      else
        settings="$(jq -e ".tablets = [${tablet}] " "${SETTINGS_FILE}")" || return 1
      fi
    else
      settings="$(echo "{\"tablets\": [${tablet}]}" | jq -e '.')" || return 1
    fi

    mkdir -p "${CONFIG_HOME}"
    echo "${settings}" > "${SETTINGS_FILE}"
  fi
}

# Maps the area of the tablet with the given name
# to a display device, where the special word desktop
# resets the tablet's mapping and ratio.
# Arguments:
#  name:    the name of a tablet device
#  display: the name of a display device or desktop
map_tablet () {
  local name="${1}"
  local display="${2}"

  if [[ -z "${name}" ]]; then
    pick_tablet || return $?
    [[ -n "${REPLY}" ]] && name="${REPLY}" || return 0
  fi

  local tablet=''
  tablet="$(find_tablet "${name}")"

  if [[ $? -ne 0 ]]; then
    echo "Unable to find tablet ${name}"
    return 2
  elif ! is_scalable "${name}"; then
    echo "Tablet ${name} is not scalable"
    return 2
  fi

  if [[ -z "${display}" ]]; then
    pick_output "Select a display:" "active" || return $?
    [[ -n "${REPLY}" ]] && display="${REPLY}" || return 0
  fi

  # Reset mapping and area if desktop is given
  if [[ "${display}" == "desktop" ]]; then
    xsetwacom --set "${name}" MapToOutput desktop &> /dev/null

    if [[ $? -ne 0 ]]; then
      echo "Failed to reset mapping"
      return 2
    fi

    # Restore area keeping the current scale
    local width=0
    width="$(get "${tablet}" '.Area' | awk '{print $3}')" || return 1

    xsetwacom --set "${name}" ResetArea &> /dev/null || return 1

    tablet="$(find_tablet "${name}")" || return 1

    local area=''
    area="$(get "${tablet}" '.Area' | awk -v "width=${width}" '{
      scale=width/$3
      width=int($3*scale)
      height=int($4*scale)

      print 0" "0" "width" "height
    }')" || return 1

    xsetwacom --set "${name}" area "${area}" &> /dev/null || return 1

    echo "Tablet mapping has been reset"
    return 0
  fi

  local output=''
  output="$(find_output "${display}")"

  if [[ $? -ne 0 ]]; then
    echo "Unable to find display ${display}"
    return 2
  elif ! is_active "${output}"; then
    echo "Display ${display} is not active"
    return 2
  fi

  # Re-calculate tablet's area to match display's ratio
  local display_width=0
  display_width="$(get "${output}" '.resolution_width')" || return 1

  local display_height=0
  display_height="$(get "${output}" '.resolution_height')" || return 1

  local ratio=0
  ratio="$(echo "${display_width} ${display_height}" | awk '{print $1/$2}')" || return 1

  local area=0
  area="$(get "${tablet}" '.Area' | awk -v "ratio=${ratio}" '{
    if (ratio > 1) ratio=1/ratio

    width=$3
    height=int(width*ratio)

    print 0" "0" "width" "height
  }')" || return 1

  xsetwacom --set "${name}" MapToOutput "${display}" &> /dev/null &&
  xsetwacom --set "${name}" area "${area}" &> /dev/null

  if [[ $? -ne 0 ]]; then
    echo "Failed to map tablet ${name}"
    return 2
  fi

  echo "Tablet ${name} mapped to ${display}"
}

# Applies the pointer settings being set in the
# settings file.
# Arguments:
#  None
init_pointer () {
  if [[ ! -f "${SETTINGS_FILE}" ]]; then
    echo "No pointer settings found"
    return 0
  fi

  local pointer=''
  pointer="$(jq '.pointer|if . then . else empty end' "${SETTINGS_FILE}")"

  if [[ -z "${pointer}" ]]; then
    echo "No pointer settings found"
    return 0
  fi

  local speed=''
  speed="$(get "${pointer}" '.speed')" || return 1

  set_pointer_speed "${speed}" "nosave"

  if [[ $? -ne 0 ]]; then
    echo "Failed to set pointer speed"
    return 2
  fi

  echo "Pointer speed has been set"
}

# Applies the settings for those tablets being stored
# in the settings file.
# Arguments:
#  None
init_tablets () {
  if [[ ! -f "${SETTINGS_FILE}" ]]; then
    echo "No tablets settings found"
    return 0
  fi

  local tablets=''
  tablets="$(jq '.tablets|if . then . else empty end' "${SETTINGS_FILE}")"

  if [[ -z "${tablets}" ]]; then
    echo "No tablets settings found"
    return 0
  fi

  local output=''
  output="$(find_outputs "primary" | jq -cer '.[0]|.device_name')" || return 1

  tablets="$(echo "${tablets}" | jq -cr '.[]|{name, scale}')" || return 1

  # Iterate over tablet commands and execute one by one
  local failed='false'
  local tablet=''

  while read -r tablet; do
    local name=''
    name="$(get "${tablet}" '.name')"

    local scale=1
    scale="$(get "${tablet}" '.scale')"

    scale_tablet "${name}" "${scale}" "nosave" &&
    map_tablet "${name}" "${output}" || failed='true'
  done <<< "${tablets}"

  if [[ "${failed}" == "true" ]]; then
    echo "Failed to set all tablets"
    return 2
  fi

  echo "Tablets have been set"
}

# Sets the desktop wallpaper to the wallpaper
# being set in the settings file.
# Arguments:
#  None
init_wallpaper () {
  if [[ ! -f "${SETTINGS_FILE}" ]]; then
    echo "No wallpaper settings found"
    return 0
  fi

  local wallpaper=''
  wallpaper="$(jq '.wallpaper|if . then . else empty end' "${SETTINGS_FILE}")"

  if [[ -z "${wallpaper}" ]]; then
    echo "No wallpaper settings found"
    return 0
  fi

  local name=''
  name="$(get "${wallpaper}" '.name')" || return 1

  if [[ ! -f "${WALLPAPERS_HOME}/${name}" ]]; then
    echo "Wallpaper ${name} does not exist"
    return 2
  fi

  local mode=''
  mode="$(get "${wallpaper}" '.mode')" || return 1

  set_wallpaper "${name}" "${mode:-"center"}" "nosave"

  if [[ $? -ne 0 ]]; then
    echo "Failed to set the wallpaper"
    return 2
  fi

  echo "Wallpaper has been set"
}

