#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/desktop/helpers
source /opt/stack/displays/helpers

# Shows the current status of the desktop environment.
# Outputs:
#  A verbose list of text data.
show_status () {
  local status=''

  local server=''
  server="$(xdpyinfo -display "${DISPLAY}" | awk -F': ' '{
    ORS=""
    gsub(/^[ \t]+/,"",$2)
    gsub(/[ \t]+$/,"",$2)
    switch ($1) {
      case "version number": print $2; break
      case "X.Org version": print "/"$2")"; break
      default: break
    }
  }')" || return 1
  status+="\"server\": \"Xorg ${server::-1}\","

  local compositor=''
  compositor="$(pacman -Qi picom | grep -Po '^Version\s*: \K.+')" || return 1
  status+="\"compositor\": \"Picom ${compositor}\","

  local wm=''
  wm="$(bspwm -v)" || return 1
  status+="\"wm\": \"BSPWM ${wm}\","

  local bars=''
  bars="$(polybar -v | head -n +1 | cut -d ' ' -f 2)" || return 1
  status+="\"bars\": \"Polybar ${bars}\","

  if file_exists "${SETTINGS_FILE}"; then
    local query='.wallpaper|if . then "\(.name) [\(.mode|ascii_upcase)]" else "none" end'
    local wallpaper=''
    wallpaper="$(jq -cr "${query}" "${SETTINGS_FILE}")" || return 1
    status+="\"wallpaper\": \"${wallpaper}\","
  fi

  local fields='OS|Kernel|Shell|Theme|Icons'
  status+="$(neofetch --off --stdout |
    awk -F':' '/^('"${fields}"')/{
      gsub(/^[ \t]+/,"",$2)
      gsub(/[ \t]+$/,"",$2)
      printf "\"%s\":\"%s\",",tolower($1),$2
    }'
  )" || return 1

  # Remove the last extra comma after the last field
  status="${status:+${status::-1}}"

  status="{${status}}"

  local query=''
  query+='System:      \(.os)\n'
  query+='Kernel:      \(.kernel)\n'
  query+='Shell:       \(.shell)\n'
  query+='Graphics:    \(.server)\n'
  query+='Compositor:  \(.compositor)\n'
  query+='Windows:     \(.wm)\n'
  query+='Bars:        \(.bars)\n\n'
  query+='Theme:       \(.theme)\n'
  query+='Icons:       \(.icons)\n'
  query+='Wallpaper:   \(if .wallpaper then .wallpaper else "none" end)'

  echo "${status}" | jq -cer "\"${query}\"" || return 1
}

# Shows the list of all the wallpapers found under
# the wallpapers home.
# Outputs:
#  A list of wallpaper data.
list_wallpapers () {
  local wallpapers=''
  wallpapers="$(find_wallpapers)" || return 1

  local len=0
  len="$(count "${wallpapers}")" || return 1

  if is_true "${len} = 0"; then
    echo 'No wallpaper files found'
    return 0
  fi

  local query=''
  query+='Name:        \(.name)\n'
  query+='Resolution:  \(.resolution)\n'
  query+='Size:        \(.size)'
  query="[.[]|\"${query}\"]|join(\"\n\n\")"

  echo "${wallpapers}" | jq -cer "${query}" || return 1
}

# Sets the desktop wallpaper to the wallpaper with the given
# file name and scale mode.
# Arguments:
#  name: the filename of the wallpaper
#  mode: center, fill, max, scale or tile
set_wallpaper () {
  local name="${1}"
  local mode="${2}"

  if is_not_given "${name}"; then
    on_script_mode &&
      echo 'Missing the wallpaper file name' && return 2

    pick_wallpaper || return $?
    require 'Wallpaper file name required' || return 2
    name="${REPLY}"
  fi

  if is_not_wallpaper_file "${name}"; then
    echo 'Invalid or unknown wallpaper file'
    return 2
  fi

  if is_not_given "${mode}"; then
    on_script_mode &&
      echo 'Missing the alignment mode' && return 2

    pick_alignment_mode || return $?
    require 'Alignment mode is required' || return 2
    mode="${REPLY}"
  fi
  
  if is_not_wallpaper_mode "${mode}"; then
    echo 'Invalid alignment mode'
    return 2
  fi

  feh --no-fehbg --bg-"${mode}" "${WALLPAPERS_HOME}/${name}"

  if has_failed; then
    echo 'Failed to set wallpaper'
    return 2
  fi

  echo "Wallpaper set to ${name}"

  save_wallpaper_to_settings "${name}" "${mode}" ||
    echo 'Failed to save wallpaper into settings'
}

# Shows the data of the pointing device with the
# given name.
# Arguments:
#  name: the name of the pointing device
# Outputs:
#  A long list of pointing device data.
show_pointer () {
  local name="${1}"

  if is_not_given "${name}"; then
    on_script_mode &&
      echo 'Missing pointer name' && return 2

    pick_pointer || return $?
    require 'Pointer name is required' || return 2
    name="${REPLY}"
  fi

  local pointer=''
  pointer="$(find_pointer "${name}")"

  if has_failed; then
    echo "Pointer ${name} not found"
    return 2
  fi

  local query=''
  query+='ID:        \(.id)\n'
  query+='Name:      \(.name)'
  query+='\(.node|if . then "\nNode:      \(.)" else "" end)'
  query+='\(.enabled|if . then "\nEnabled:   \(.)" else "" end)'
  query+='\(.accel_speed|if . then "\nSpeed:     \(.)" else "" end)'
  query+='\(.accel|if . then "\nAccel:     \(.)" else "" end)'
  query+='\(.velocity|if . then "\nVelocity:  \(.)" else "" end)'
  query+='\(if .const_decel then "\nDecel:     \(.const_decel) \(.adapt_decel)" else "" end)'

  echo "${pointer}" | jq -cer "\"${query}\"" || return 1
}

# Shows the list of pointing devices currently
# connected to the system.
# Outputs:
#  A list of pointing devices.
list_pointers () {
  local pointers=''
  pointers="$(find_pointers)" || return 1

  local len=0
  len="$(count "${pointers}")" || return 1

  if is_true "${len} = 0"; then
    echo 'No pointers have found'
    return 0
  fi

  local query=''
  query+='ID:    \(.id)\n'
  query+='Name:  \(.name)'
  query="[.[]|\"${query}\"]|join(\"\n\n\")"

  echo "${pointers}" | jq -cer "${query}" || return 1
}

# Sets the acceleration speed of every pointing device
# to the given speed factor, where 0 means slow and 1
# means fast.
# Arguments:
#  factor: a speed factor between [0,1]
set_pointer_speed () {
  local factor="${1}"

  if is_not_given "${factor}"; then
    echo 'Missing speed factor'
    return 2
  elif is_not_valid_pointer_speed "${factor}"; then
    echo 'Invalid speed factor'
    return 2
  fi

  # Convert factor to acceleration speed [-1,1]
  local speed=0
  speed="$(calc "(2 * ${factor}) - 1")" || return 1

  # Convert factor to velocity [0.001,10]
  local velocity=0.001
  if is_true "${factor} > 0"; then
    velocity="$(calc "10 * ${factor}")" || return 1
  fi

  local devices=''
  devices="$(xinput --list | awk '{
    if ($0 ~ "Virtual core pointer") {
      next
    } else if ($0 ~ "Virtual core keyboard") {
      exit
    }

    match($0, ".*id=([0-9]+).*", a)
    print a[1]
  }')" || return 1

  local succeed='false'

  local device=''
  while read -r device; do
    # Assume this is a mouse device and set its acceleration speed
    xinput --set-prop "${device}" 'libinput Accel Speed' "${speed}" &> /dev/null &&
    succeed='true' && continue

    # Otherwise assume this is a touch device and set its velocity
    xinput --set-prop "${device}" 'Device Accel Constant Deceleration' 1 &> /dev/null &&
    xinput --set-prop "${device}" 'Device Accel Adaptive Deceleration' 1 &> /dev/null &&
    xinput --set-prop "${device}" 'Device Accel Velocity Scaling' "${velocity}" &> /dev/null &&
    succeed='true'
  done <<< "${devices}"

  if is_false "${succeed}"; then
    echo 'Failed to set pointer speed'
    return 2
  fi

  echo "Pointer speed set to ${factor}"

  save_pointer_speed_to_settings "${factor}" ||
    echo 'Failed to save pointer speed factor into settings'
}

# Shows the data of the tablet device with the
# given name.
# Arguments:
#  name: the name of a tablet device
# Outputs:
#  A long list of tablet device data.
show_tablet () {
  local name="${1}"

  if is_not_given "${name}"; then
    on_script_mode &&
      echo 'Missing the table name' && return 2

    pick_tablet || return $?
    require 'Tablet name is required' || return 2
    name="${REPLY}"
  fi

  local tablet=''
  tablet="$(find_tablet "${name}")"

  if has_failed; then
    echo "Tablet ${name} not found"
    return 2
  fi

  local query=''
  query+='ID:           \(.id)\n'
  query+='Name:         \(.name)\n'
  query+='Type:         \(.type)\n'
  query+='Vendor:       \(.vendor)'
  query+='\(.Area|if . then "\nArea:         \(.)" else "" end)'
  query+='\(.Rotate|if . then "\nRotate:       \(.)" else "" end)'
  query+='\(.PressureRecalibration|if . then "\nPressure:     \(.)" else "" end)'
  query+='\(.PressCurve|if . then "\nPress Curve:  \(.)" else "" end)'
  query+='\(.RawSample|if . then "\nSample:       \(.)" else "" end)'
  query+='\(.Mode|if . then "\nMode:         \(.)" else "" end)'
  query+='\(.Touch|if . then "\nTouch:        \(.)" else "" end)'
  query+='\(.Gesture|if . then "\nGesture:      \(.)" else "" end)'
  query+='\(.TapTime|if . then "\nTap Time:     \(.)" else "" end)'
  query+='\(.CursorProx|if . then "\nCursor:       \(.)" else "" end)'
  query+='\(.Threshold|if . then "\nThreshold:    \(.)" else "" end)'

  echo "${tablet}" | jq -cer "\"${query}\"" || return 1
}

# Shows the list of stylus-pen devices currently
# connected to the system.
# Outputs:
#  A list of stylus-pen devices.
list_tablets () {
  local tablets=''
  tablets="$(find_tablets)" || return 1

  local len=0
  len="$(count "${tablets}")" || return 1

  if is_true "${len} = 0"; then
    echo 'No tablets have found'
    return 0
  fi

  local query=''
  query+='ID:      \(.id)\n'
  query+='Name:    \(.name)\n'
  query+='Type:    \(.type)\n'
  query+='Vendor:  \(.vendor)'
  query="[.[]|\"${query}\"]|join(\"\n\n\")"

  echo "${tablets}" | jq -cer "${query}" || return 1
}

# Scales the area of the tablet with the given name,
# keeping the current aspect ratio.
# Arguments:
#  name:  the name of a tablet device
#  scale: the scale factor [0.1,1]
scale_tablet () {
  local name="${1}"
  local scale="${2}"

  if is_not_given "${name}"; then
    on_script_mode &&
      echo 'Missing the tablet name' && return 2

    pick_tablet || return $?
    require 'Tablet name is required' || return 2
    name="${REPLY}"
  fi

  local tablet=''
  tablet="$(find_tablet "${name}")"

  if has_failed; then
    echo "Tablet ${name} not found"
    return 2
  elif is_not_scalable "${name}"; then
    echo "Tablet ${name} is not scalable"
    return 2
  fi

  if is_not_given "${scale}"; then
    on_script_mode &&
      echo 'Missing the scale factor' && return 2

    ask 'Enter the scale factor [0.1-1]:' || return $?
    require 'Scale factor is required' || return 2
    scale="${REPLY}"
  fi
  
  if is_not_valid_tablet_scale "${scale}"; then
    echo 'Invalid scale factor'
    return 2
  fi

  # Calculate tablet's ratio
  local area=''
  area="$(get "${tablet}" '.Area')" || return 1

  local width="$(echo "${area}" | cut -d ' ' -f 3)"
  local height="$(echo "${area}" | cut -d ' ' -f 4)"

  local ratio=0
  ratio="$(calc "${width} / ${height}")" || return 1

  # Inverse aspect ratio for portrait layouts
  if is_true "${ratio} > 1"; then
    ratio="$(calc "1 / ${ratio}")" || return 1
  fi

  # Reset tablet area before applying the new scaling
  xsetwacom --set "${name}" ResetArea &> /dev/null || return 1

  tablet="$(find_tablet "${name}")" || return 1
  area="$(get "${tablet}" '.Area')" || return 1
  width="$(echo "${area}" | cut -d ' ' -f 3)"

  # Apply scaling factor
  width="$(calc "floor(${width} * ${scale})")" || return 1
  height="$(calc "floor(${width} * ${ratio})")"|| return 1

  xsetwacom --set "${name}" area "0 0 ${width} ${height}" &> /dev/null

  if has_failed; then
    echo "Unable to scale tablet ${name}"
    return 2
  fi

  echo "Tablet ${name} scaled by ${scale}"

  save_tablet_scale_to_settings "${name}" "${scale}" ||
    echo 'Failed to save the tablet scale factor'
}

# Maps the area of the tablet with the given name
# to a target which could be any active display device
# ot the special desktop value that resets the tablet's
# mapping and ratio.
# Arguments:
#  name:   the name of a tablet device
#  target: the name of a display or desktop
map_tablet () {
  local name="${1}"
  local target="${2}"

  if is_not_given "${name}"; then
    on_script_mode &&
      echo 'Missing the tablet name' && return 2

    pick_tablet || return $?
    require 'Tablet name is required' || return 2
    name="${REPLY}"
  fi

  local tablet=''
  tablet="$(find_tablet "${name}")"

  if has_failed; then
    echo "Tablet ${name} not found"
    return 2
  elif is_not_scalable "${name}"; then
    echo "Tablet ${name} is not scalable"
    return 2
  fi

  if is_not_given "${target}"; then
    on_script_mode &&
      echo 'Missing the mapping target' && return 2

    pick_mapping_target || return $?
    require 'Mapping target is required' || return 2
    target="${REPLY}"
  fi

  # Reset mapping and area if desktop is given as target
  if equals "${target}" 'desktop'; then
    xsetwacom --set "${name}" MapToOutput desktop &> /dev/null

    if has_failed; then
      echo 'Failed to reset mapping'
      return 2
    fi

    # Restore area keeping the current scale
    local area=''
    area="$(get "${tablet}" '.Area')" || return 1
    local previous_width="$(echo "${area}" | cut -d ' ' -f 3)"

    # Reset tablets area to default size
    xsetwacom --set "${name}" ResetArea &> /dev/null || return 1

    tablet="$(find_tablet "${name}")" || return 1
    area="$(get "${tablet}" '.Area')" || return 1

    local width="$(echo "${area}" | cut -d ' ' -f 3)"
    local height="$(echo "${area}" | cut -d ' ' -f 4)"

    # Calculate the scaling factor
    local scale=0
    scale="$(calc "${previous_width} / ${width}")" || return 1

    width="$(calc "${floor(${width} * ${scale})}")" || return 1
    height="$(calc "${floor(${height} * ${scale})}")" || return 1

    xsetwacom --set "${name}" area "0 0 ${width} ${height}" &> /dev/null || return 1

    echo 'Tablet mapping has been reset'
    return 0
  fi

  local output=''
  output="$(find_output "${target}")"

  if has_failed; then
    echo "Display ${target} not found"
    return 2
  elif is_not_active "${output}"; then
    echo "Display ${target} is not active"
    return 2
  fi

  # Re-calculate tablet's area to match display's ratio
  local display_width=0
  display_width="$(get "${output}" '.resolution_width')" || return 1

  local display_height=0
  display_height="$(get "${output}" '.resolution_height')" || return 1

  local ratio=0
  ratio="$(calc "${display_width} / ${display_height}")" || return 1

  # Inverse aspect ratio for portrait layouts
  if is_true "${ratio} > 1"; then
    ratio="$(calc "1 / ${ratio}")" || return 1
  fi

  local area=0
  area="$(get "${tablet}" '.Area')" || return 1

  local width="$(echo "${area}" | cut -d ' ' -f 3)"
  local height=0
  height="$(calc "floor(${width} * ${ratio})")" || return 1

  xsetwacom --set "${name}" MapToOutput "${target}" &> /dev/null &&
  xsetwacom --set "${name}" area "0 0 ${width} ${height}" &> /dev/null

  if has_failed; then
    echo "Failed to map tablet ${name}"
    return 2
  fi

  echo "Tablet ${name} mapped to ${target}"
}

# Applies the pointer settings being set in the
# settings file.
init_pointer () {
  local speed='0.35'

  if file_exists "${SETTINGS_FILE}"; then
    speed="$(jq '.pointer.speed|if . then . else 0.35 end' "${SETTINGS_FILE}")"
  fi

  set_pointer_speed "${speed}"
}

# Applies the settings for those tablets being stored
# in the settings file.
init_tablets () {
  if file_not_exists "${SETTINGS_FILE}"; then
    echo 'No tablets settings found'
    return 2
  fi

  local tablets=''
  tablets="$(jq '.tablets|if . then . else empty end' "${SETTINGS_FILE}")"

  if is_not_given "${tablets}"; then
    echo 'No tablets settings found'
    return 2
  fi

  local output=''
  output="$(find_outputs primary | jq -cer '.[0]|.device_name')" || return 1

  tablets="$(echo "${tablets}" | jq -cr '.[]|{name, scale}')" || return 1

  # Iterate over tablet commands and execute one by one
  local tablet=''
  while read -r tablet; do
    local name=''
    name="$(get "${tablet}" '.name')" || return 1

    local scale=1
    scale="$(get "${tablet}" '.scale')" || return 1

    scale_tablet "${name}" "${scale}" &&
    map_tablet "${name}" "${output}" || return $?
  done <<< "${tablets}"
}

# Sets the desktop wallpaper to the wallpaper
# being set in the settings file.
init_wallpaper () {
  if file_not_exists "${SETTINGS_FILE}"; then
    echo 'No wallpaper settings found'
    return 2
  fi

  local wallpaper=''
  wallpaper="$(jq '.wallpaper|if . then . else empty end' "${SETTINGS_FILE}")"

  if is_not_given "${wallpaper}"; then
    echo 'No wallpaper settings found'
    return 2
  fi

  local name=''
  name="$(get "${wallpaper}" '.name')" || return 1

  if file_not_exists "${WALLPAPERS_HOME}/${name}"; then
    echo "Wallpaper ${name} not found"
    return 2
  fi

  local mode=''
  mode="$(get "${wallpaper}" '.mode')" || return 1

  set_wallpaper "${name}" "${mode:-"center"}"
}

