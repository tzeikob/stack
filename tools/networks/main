#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/networks/commands

# Shows the help message.
# Arguments:
#  None
# Outputs:
#  A long help message.
show_help () {
  echo 'Usage: COMMAND [OBJECT] [ARGUMENTS]...'

  echo -e '\nCOMMANDS'
  printf ' %-35s %s\n' \
    'help' 'Show this help message.' \
    '' '' \
    'show status' 'Show the current status of networking.' \
    'show device [<name>]' 'Show the data of a device.' \
    'show connection [<name>]' 'Show the data of a connection.' \
    '' '' \
    'list devices' 'List the network devices.' \
    'list connections' 'List the network connections.' \
    'list wifis [<device>] [<signal>]' 'Detect wifi networks with a min signal.' \
    '' '' \
    'up device [<name>]' 'Enable a network device.' \
    'down device [<name>]' 'Disable a network device.' \
    'remove device [<name>]' 'Remove a software network device.' \
    '' '' \
    'up connection [<name>]' 'Enable a connection.' \
    'down connection [<name>]' 'Disable a connection.' \
    'add connection eth|wifi|vpn' 'Add an ethernet, wifi or vpn connection.' \
    'remove connection [<name>]' 'Remove a connection.' \
    '' '' \
    'add proxy <name>' 'Add a new proxy server profile.' \
    'remove proxy [<name>]' 'Remove a proxy server profile.' \
    'list proxies' 'List all proxy server profiles.' \
    'set proxy [<name>]' 'Applies proxy server settings.' \
    'unset proxy' 'Disables proxy server settings.' \
    '' '' \
    'power network on|off' 'Set the system network to on or off.' \
    'power wifi on|off' 'Set the wifi device to on or off.'
}

loop () {
  clear

  while true; do
    prompt networks && history -s "${REPLY}"

    set -f
    set_separator line
    local args=($(xargs -n1 <<< "${REPLY}"))
    restore_separator && set +f

    local cmd="${args[0]}"
    local obj="${args[1]}"

    case "${cmd}${obj:+ ${obj}}" in
      'help') show_help;;
      'show status') show_status;;
      'show device') show_device "${args[2]}";;
      'show connection') show_connection "${args[2]}";;
      'list devices') list_devices;;
      'list connections') list_connections;;
      'list wifis') list_wifis "${args[2]}" "${args[3]}";;
      'list proxies') list_proxies;;
      'power network') power_network "${args[2]}";;
      'power wifi') power_wifi "${args[2]}";;
      'up device') up device "${args[2]}";;
      'down device') down device "${args[2]}";;
      'up connection') up connection "${args[2]}";;
      'down connection') down connection "${args[2]}";;
      'add connection eth') add_ethernet_connection;;
      'add connection wifi') add_wifi_connection;;
      'add connection vpn') add_vpn_connection;;
      'add proxy') add_proxy "${args[2]}";;
      'remove device') remove_device "${args[2]}";;
      'remove connection') remove_connection "${args[2]}";;
      'remove proxy') remove_proxy "${args[2]}";;
      'set proxy') set_proxy "${args[2]}";;
      'unset proxy') unset_proxy;;
      'clear') clear && continue;;
      'quit') break;;
      '') continue;;
      *)
        echo 'Ooops, invalid or unknown command!'
        $(return 2);;
    esac && success || fail

    REPLY=''
  done

  clear
}

loop

