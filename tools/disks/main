#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/disks/commands

# Shows the help message.
# Arguments:
#  mode: loop or once
# Outputs:
#  A long help message.
show_help () {
  local mode="${1:-"once"}"

  if [[ "${mode}" == "once" ]]; then
    echo 'Usage: disks [OPTIONS] COMMAND [OBJECT] [ARGUMENTS]...'
    
    echo -e '\nOPTIONS'
    printf ' %-10s %s\n' \
      '-h' 'Show this help message.' \
      '-q' 'Stay quiet and do not play beep sounds.'
  
    echo -e '\nCOMMANDS'
  else
    echo 'Usage: COMMAND [OBJECT] [ARGUMENTS]...'

    echo -e '\nCOMMANDS'
    printf ' %-36s %s\n' \
      'help' 'Show this help message.'
  fi

  printf ' %-36s %s\n' \
    'show status' 'Show a report of the file system.' \
    '' '' \
    'show disk [<path>]' 'Show a disk block device.' \
    'show partition [<path>]' 'Show a partition block device.' \
    'show rom [<path>]' 'Show an optical drive block device.' \
    '' '' \
    'list disks' 'List all disk block devices.' \
    'list partitions [<path>]' 'List the partitions of a disk block device.' \
    'list roms' 'List all optical block devices.' \
    'list folders [<host>]' 'List the shared folders of a host.' \
    'list mounts' 'List all mounting points.' \
    '' '' \
    'mount partition [<path>]' 'Mount a partition block device.' \
    'unmount partition [<path>]' 'Unmount a partition block device.' \
    'mount rom [<path>]' 'Mount an optical block device.' \
    'unmount rom [<path>]' 'Unmount an optical block device.' \
    'mount image <path>' 'Mount an iso, img image file system.' \
    'unmount image [<path>]' 'Unmount an image file system.' \
    'mount folder [<host>]' 'Mount a shared storage folder.' \
    'unmount folder [<uri>]' 'Unmount a shared storage folder.' \
    '' '' \
    'format disk [<path>]' 'Format a disk block device.' \
    'eject disk [<path>]' 'Eject a disk block device.' \
    'scan disk [<path>]' 'Scan a disk block device for SMART data.' \
    '' '' \
    'create encrypted [<path>]' 'Create an encrypted drive.' \
    'create bootable [<path>]' 'Create a bootable installation drive.'
}

run () {
  local opt=''

  while getopts 'hq' opt; do
    case "${opt}" in
     'h')
        show_help once
        return 0;;
     'q') QUIET='true';;
     *)
      echo 'Ooops, invalid or unknown option'
      $(exit 2) || beep
      return $?;;
    esac
  done

  shift $((OPTIND-1))

  local mode='once'
  if [[ $# -eq 0 ]]; then
    mode='loop'
    clear
  fi

  while true; do
    if [[ "${mode}" == "loop" ]]; then
      prompt disks && history -s "${REPLY}"
    else
      REPLY="$@"
    fi

    set -f
    set_separator line
    local args=($(xargs -n1 <<< "${REPLY}"))
    restore_separator && set +f
    REPLY=''

    local cmd="${args[0]}"
    local obj="${args[1]}"

    if [[ "${mode}" == "loop" ]]; then
      case "${cmd}${obj:+ ${obj}}" in
        'help') show_help loop && continue;;
        'clear') clear && continue;;
        'quit') break;;
        '') continue;;
      esac
    fi

    case "${cmd}${obj:+ ${obj}}" in
      'list disks') list_disks;;
      'list partitions') list_partitions "${args[2]}";;
      'list roms') list_roms;;
      'list folders') list_shared_folders "${args[2]}";;
      'list mounts') list_mounts;;
      'show status') show_status;;
      'show disk') show_disk "${args[2]}";;
      'show partition') show_partition "${args[2]}";;
      'show rom') show_rom "${args[2]}";;
      'mount partition') mount_partition "${args[2]}" && beep;;
      'mount rom') mount_rom "${args[2]}" && beep;;
      'mount image') mount_image "${args[2]}" && beep;;
      'mount folder') mount_shared_folder "${args[2]}" && beep;;
      'unmount partition') unmount_partition "${args[2]}" && beep;;
      'unmount rom') unmount_rom "${args[2]}" && beep;;
      'unmount image') unmount_image "${args[2]}" && beep;;
      'unmount folder') unmount_shared_folder "${args[2]}" && beep;;
      'format disk') format_disk "${args[2]}" && beep;;
      'eject disk') eject_disk "${args[2]}" && beep;;
      'scan disk') scan_disk "${args[2]}" && beep;;
      'create encrypted') create_encrypted "${args[2]}" && beep;;
      'create bootable') create_bootable "${args[2]}" && beep;;
      *)
        echo 'Ooops, invalid or unknown command!'
        $(return 2);;
    esac || beep

    local exit_code=$?
    if [[ "${mode}" == "once" ]]; then
      return ${exit_code}
    fi
  done

  clear
}

run "$@"

