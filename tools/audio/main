#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/audio/commands

# Shows the help message.
# Arguments:
#  mode: once or none
# Outputs:
#  A long help message.
show_help () {
  if [[ "${1}" == "once" ]]; then
    echo 'Usage: audio COMMAND [OBJECT] [ARGUMENTS]...'

    echo -e '\nCOMMANDS'
    printf ' %-12s %s\n' \
      'help' 'Show this help message.' \
      '' '' \
      'set profile' 'Set the active profile.' \
      'set output' 'Set the active output.' \
      '' '' \
      'up' 'Increase the volume of active output.' \
      'down' 'Decrease the volume of active output.' \
      'mute' 'Mute the active output.' \
      'unmute' 'Unmute the active output.' \
      '' '' \
      'restart' 'Restart the audio server.'

    return 0
  fi

  echo 'Usage: COMMAND [OBJECT] [ARGUMENTS]...'

  echo -e '\nCOMMANDS'
  printf ' %-32s %s\n' \
    'help' 'Show this help message.' \
    '' '' \
    'show status' 'Show a report of the system audio.' \
    'show logs' 'Show the last logs of the audio service.' \
    'show card [<index>]' 'Show the data of a card.' \
    '' '' \
    'list cards' 'List all cards of the system.' \
    'list outputs' 'List all outputs.' \
    'list inputs' 'List all inputs.' \
    'list playbacks [<name>]' 'List active playbacks by application name.' \
    '' '' \
    'set profile [<card> [<name>]]' 'Set the active profile of a card.' \
    'set output [<index>]' 'Set the active output.' \
    'set input [<index>]' 'Set the active input.' \
    '' '' \
    'turn output|input <volume>' 'Turn the volume of active output/input to,' \
    '' 'up, down, mute, unmute or a percentage value.' \
    'mute outputs|inputs' 'Mute all outputs or inputs.' \
    'unmute outputs|inputs' 'Unmute all outputs or inputs.' \
    '' '' \
    'restart' 'Restart the audio server.'
}

loop () {
  clear

  while true; do
    prompt audio && history -s "${REPLY}"

    set -f
    set_separator line
    local args=($(xargs -n1 <<< "${REPLY}"))
    restore_separator && set +f

    local cmd="${args[0]}"
    local obj="${args[1]}"

    case "${cmd}${obj:+ ${obj}}" in
      'help') show_help;;
      'show status') show_status;;
      'show logs') show_logs;;
      'show card') show_card "${args[2]}";;
      'restart') restart;;
      'list cards') list_cards;;
      'list outputs') list_ports sink;;
      'list inputs') list_ports source;;
      'list playbacks') list_playbacks "${args[2]}";;
      'set profile') set_profile "${args[2]}" "${args[3]}";;
      'set ouptut') set_default sink "${args[2]}";;
      'set input') set_default source "${args[2]}";;
      'turn output') turn_default sink "${args[2]}";;
      'turn input') turn_default source "${args[2]}";;
      'mute outputs') set_mute sink 1;;
      'mute inputs') set_mute source 1;;
      'unmute outputs') set_mute sink 0;;
      'unmute inputs') set_mute source 0;;
      'clear') clear && continue;;
      'quit') break;;
      '') continue;;
      *)
        echo 'Ooops, invalid or unknown command!'
        $(return 2);;
    esac && success || fail

    REPLY=''
  done

  clear
}

once () {
  local cmd="${1}"
  local obj="${2}"

  case "${cmd}${obj:+ ${obj}}" in
    'help') show_help once;;
    'restart') restart;;
    'set profile') set_profile;;
    'set output') set_default sink;;
    'mute') turn_default sink mute;;
    'unmute') turn_default sink unmute;;
    'up') turn_default sink up;;
    'down') turn_default sink down;;
    *)
      echo 'Ooops, invalid or unknown command'
      return 2;;
  esac
}

if [[ $# -eq 0 ]]; then
  loop
else
  once "$@" && success || fail
fi

