#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/audio/commands

# Shows the help message.
# Arguments:
#  mode: loop or once
# Outputs:
#  A long help message.
show_help () {
  local mode="${1:-"once"}"

  if [[ "${mode}" == "once" ]]; then
    echo 'Usage: audio [OPTIONS] COMMAND [OBJECT] [ARGUMENTS]...'
    
    echo -e '\nOPTIONS'
    printf ' %-10s %s\n' \
      '-h' 'Show this help message.' \
      '-q' 'Stay quiet and do not play beep sounds.'
  
    echo -e '\nCOMMANDS'
  else
    echo 'Usage: COMMAND [OBJECT] [ARGUMENTS]...'

    echo -e '\nCOMMANDS'
    printf ' %-32s %s\n' \
      'help' 'Show this help message.'
  fi

  printf ' %-32s %s\n' \
    'show status' 'Show a report of the system audio.' \
    'show logs' 'Show the last logs of the audio service.' \
    'show card [<index>]' 'Show the data of a card.' \
    '' '' \
    'list cards' 'List all cards of the system.' \
    'list outputs' 'List all outputs.' \
    'list inputs' 'List all inputs.' \
    'list playbacks [<name>]' 'List active playbacks by application name.' \
    '' '' \
    'set profile [<card> [<name>]]' 'Set the active profile of a card.' \
    'set output [<index>]' 'Set the active output.' \
    'set input [<index>]' 'Set the active input.' \
    '' '' \
    'turn output|input <volume>' 'Turn the volume of active output/input to,' \
    '' 'up, down, mute, unmute or a percentage value.' \
    'mute outputs|inputs' 'Mute all outputs or inputs.' \
    'unmute outputs|inputs' 'Unmute all outputs or inputs.' \
    '' '' \
    'restart' 'Restart the audio services.'
}

run () {
  local opt=''

  while getopts 'hq' opt; do
    case "${opt}" in
     'h')
        show_help once
        return 0;;
     'q') QUIET='true';;
     *)
      echo 'Ooops, invalid or unknown option'
      $(exit 2) || beep
      return $?;;
    esac
  done

  shift $((OPTIND-1))

  local mode='once'
  if [[ $# -eq 0 ]]; then
    mode='loop'
    clear
  fi

  while true; do
    if [[ "${mode}" == "loop" ]]; then
      prompt audio && history -s "${REPLY}"
    else
      REPLY="$@"
    fi

    set -f
    set_separator line
    local args=($(xargs -n1 <<< "${REPLY}"))
    restore_separator && set +f
    REPLY=''

    local cmd="${args[0]}"
    local obj="${args[1]}"

    if [[ "${mode}" == "loop" ]]; then
      case "${cmd}${obj:+ ${obj}}" in
        'help') show_help loop && continue;;
        'clear') clear && continue;;
        'quit') break;;
        '') continue;;
      esac
    fi

    case "${cmd}${obj:+ ${obj}}" in
      'show status') show_status;;
      'show logs') show_logs;;
      'show card') show_card "${args[2]}";;
      'restart') restart;;
      'list cards') list_cards;;
      'list outputs') list_ports sink;;
      'list inputs') list_ports source;;
      'list playbacks') list_playbacks "${args[2]}";;
      'set profile') set_profile "${args[2]}" "${args[3]}" && beep;;
      'set output') set_default sink "${args[2]}" && beep;;
      'set input') set_default source "${args[2]}" && beep;;
      'turn output') turn_default sink "${args[2]}" && beep;;
      'turn input') turn_default source "${args[2]}" && beep;;
      'mute outputs') set_mute sink 1 && beep;;
      'mute inputs') set_mute source 1 && beep;;
      'unmute outputs') set_mute sink 0 && beep;;
      'unmute inputs') set_mute source 0 && beep;;
      *)
        echo 'Ooops, invalid or unknown command!'
        $(return 2);;
    esac || beep

    local exit_code=$?
    if [[ "${mode}" == "once" ]]; then
      return ${exit_code}
    fi
  done

  clear
}

run "$@"

