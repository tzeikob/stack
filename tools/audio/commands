#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/audio/helpers

# Shows the current status of system's audio.
# Arguments:
#  None
# Outputs:
#  A verbose list of text data.
show_status () {
  local query=''
  query+='Server:    \(.server_name)\n'
  query+='Version:   \(.server_version)\n'
  query+='Sample:    \(.default_sample_specification)\n'
  query+='Channels:  \(.default_channel_map)'

  pactl --format=json info | jq -cer "(\"${query}\")" || return 1

  systemctl --user status --lines 0 --no-pager pipewire-pulse.service |
    awk '{
      if ($0 ~ / *Active/) {
        l = "Active"
        v = $2" "$3
      } else if ($0 ~ / *Main PID/) {
        l = "Process"
        v = $3" "$4
      } else l = ""

      if (l) printf "%-10s %s\n",l":",v
    }' || return 1

  local query=''
  query+='.[]|.properties'
  query+='|if ."device.nick" then ."device.nick"'
  query+=' else ."device.alias" end'
  query="[${query}]|join(\"\n           \")"

  echo -n 'Cards:     '
  find_cards | jq -cer "${query}" || return 1

  local sink=''
  sink="$(pactl get-default-sink)" || return 1

  local query='\n'
  query+='Output:    \(.properties|if ."device.nick" then ."device.nick" else ."device.alias" end)\n'
  query+='Port:      \(.active_port)\n'
  query+='Volume:    \(.volume|keys[0] as $k|.[$k].db|gsub("\\s+";"")) \(if .mute then "mute" else "" end)'

  query=".[]|select(.name == \"${sink}\")|select(.active_port)|\"${query}\""

  pactl --format=json list sinks | jq -cr "${query}" || return 1

  local source=''
  source="$(pactl get-default-source)" || return 1

  local query='\n'
  query+='Input:     \(.properties|if ."device.nick" then ."device.nick" else ."device.alias" end)\n'
  query+='Port:      \(.active_port)\n'
  query+='Volume:    \(.volume|keys[0] as $k|.[$k].db|gsub("\\s+";"")) \(if .mute then "mute" else "" end)'

  query=".[]|select(.name == \"${source}\")|select(.active_port)|\"${query}\""

  pactl --format=json list sources | jq -cr "${query}" || return 1
}

# Shows the logs of the audio service.
# Arguments:
#  None
# Outputs:
#  A long list of log messages.
show_logs () {
  systemctl --user status --no-pager pipewire-pulse.service | tail -n +12 || return 1
}

# Shows the data of the card with identified by the
# given index.
# Arguments:
#  index: a zero-based integer
# Outputs:
#  A verbose list of text data.
show_card () {
  local index="${1}"

  if [[ -z "${index}" ]]; then
    pick_card 'Select an audio card:' || return $?
    [[ -n "${REPLY}" ]] && index="${REPLY}" || return 0
  fi

  local card=''
  card="$(find_card "${index}")"

  if [[ $? -ne 0 ]]; then
    echo "Unable to find card with index ${index}"
    return 2
  fi

  local query='("'
  query+='Index:     \(.index)\n'
  query+='Model:     \(.properties|if ."device.nick" then ."device.nick" else ."device.alias" end)\n'
  query+='\(.properties."device.product.name"|if . then "Product:   \(.)\n" else "" end)'
  query+='\(.properties."device.vendor.name"|if . then "Vendor:    \(.)\n" else "" end)'
  query+='Driver:    \(.driver)\n'
  query+='Bus:       \(.properties."device.bus" | ascii_upcase)\n'
  query+='\(.properties."api.alsa.use-acp"|if . then "ACP:       \(.)\n" else "" end)'
  query+='Profile:   \(.active_profile)")'

  echo "${card}" | jq -cer "${query}" || return 1

  local query=''
  query='.profiles|[keys[]]|join("\n           ")'

  echo
  echo -n 'Profiles:  '
  echo "${card}" | jq -cer "${query}" || return 1

  local query=''
  query='[.ports|to_entries[]|"\(.key) [\(.value.type)]"]|join("\n           ")'

  echo
  echo -n 'Ports:     '
  echo "${card}" | jq -cr "${query}" || return 1
}

# Restarts the audio services.
# Arguments:
#  none
restart () {
  echo 'Restarting the audio server...'

  systemctl --user restart pipewire.socket && sleep 0.5 &&
    echo 'Pipewire socket restarted' &&
  systemctl --user restart pipewire.service && sleep 0.5 &&
    echo 'Pipewire service restarted' &&
  systemctl --user restart pipewire-session-manager.service && sleep 0.5 &&
  systemctl --user restart pipewire-media-session.service && sleep 0.5 &&
  systemctl --user restart pipewire-pulse.socket && sleep 0.5 &&
    echo 'Pulse socket restarted' &&
  systemctl --user restart pipewire-pulse.service && sleep 0.5 &&
    echo 'Pulse service restarted' &&
  echo 'Audio server has been restarted' &&
  (~/.config/polybar/launch &> /dev/null &) ||
    echo 'An error occurred restarting the audio server'
}

# Shows the list of all audio cards of the system.
# Arguments:
#  none
# Outputs:
#  The list of audio cards.
list_cards () {
  local cards=''
  cards="$(find_cards)"

  if [[ $? -ne 0 ]]; then
    echo 'Unable to read audio cards'
    return 2
  fi

  local len=0
  len="$(count "${cards}")" || return 1

  if [[ ${len} == 0 ]]; then
    echo 'No audio cards have found'
    return 0
  fi

  local query=''
  query+='Index:  \(.index)\n'
  query+='Model:  \(.properties|if ."device.nick" then ."device.nick" else ."device.alias" end)'
  query+='\(.properties."device.vendor.name"|if . then "\nVendor: \(.)" else "" end)'

  query="[.[]|\"${query}\"]|join(\"\n\n\")"

  echo "${cards}" | jq -cr "${query}" || return 1
}

# Shows a list of sink or source audio modules.
# Arguments:
#  type: sink or source
# Outputs:
#  The list of sink or source modules.
list_ports () {
  local type="${1}"

  if [[ ! "${type}" =~ ^(sink|source)$ ]]; then
    echo 'Invalid module type value'
    return 2
  fi

  local query='[.[]|select(.active_port)]'

  local modules=''
  modules="$(pactl --format=json list "${type}"s | jq -cer "${query}")"

  if [[ $? -ne 0 ]]; then
    echo "Unable to read $(label type "${type}") modules"
    return 2
  fi

  local len=0
  len="$(count "${modules}")" || return 1

  if [[ ${len} == 0 ]]; then
    echo "No $(label type "${type}") modules have found"
    return 0
  fi

  local query=''
  query+='.[]'
  query+=' |= .'
  query+=' |map(('
  query+='  .ports[] + {'
  query+='   index, state, mute, properties,'
  query+='   volume: (.volume|keys[0] as $k|.[$k].db|gsub("\\s+";""))'
  query+='  }'
  query+=' ))'
  query+=' |.[]|"'
  query+='Index:   \(.index)\n'
  query+='Name:    \(.name)\n'
  query+='Card:    \(.properties|if ."device.nick" then ."device.nick" else ."device.alias" end)\n'
  query+='Volume:  \(.volume) \(if .mute then "mute" else "" end)\n'
  query+='State:   \(.state|ascii_downcase)'
  query+='"'

  query="[${query}]|join(\"\n\n\")"

  echo "${modules}" | jq -cer "${query}" || return 1
}

# Shows the list of active playbacks matching the
# given application name.
# Arguments:
#  name: the application name
# Outputs:
#  A list of playback streams.
list_playbacks () {
  local name="${1}"

  local query=''
  query="[.[]|select(.properties.\"application.name\"|test(\"${name}\"; \"i\"))]"

  local sink_inputs=''
  sink_inputs="$(pactl --format=json list sink-inputs | jq -cer "${query}")"

  if [[ $? -ne 0 ]]; then
    echo 'Unable to read playback streams'
    return 2
  fi

  local len=0
  len="$(count "${sink_inputs}")" || return 1

  if [[ ${len} == 0 ]]; then
    echo 'No playbacks have found'
    return 0
  fi

  query+='|.[]|"'
  query+='Index:    \(.index)\n'
  query+='Name:     \(.properties."application.name")\n'
  query+='Media:    \(.properties."media.name")\n'
  query+='\(.properties."application.process.id"|if . then "Process:  \(.)\n" else "" end)'
  query+='Volume:   \(.volume|keys[0] as $k|.[$k].db|gsub("\\s+";""))'
  query+=' \(if .mute then "mute" else "" end)'
  query+='"'

  query="[${query}]|join(\"\n\n\")"

  echo "${sink_inputs}" | jq -cer "${query}" || return 1
}

# Sets the profile of the audio card identified
# by the given index.
# Arguments:
#  index: a zero-based integer
#  name:  the name of a profile
set_profile () {
  local index="${1}"
  local name="${2}"

  if [[ -z "${index}" ]]; then
    pick_card 'Select an audio card:' || return $?
    [[ -n "${REPLY}" ]] && index="${REPLY}" || return 0
  fi

  local card=''
  card="$(find_card "${index}")"

  if [[ $? -ne 0 ]]; then
    echo "Unable to find card with index ${index}"
    return 2
  fi

  if [[ -z "${name}" ]]; then
    pick_profile 'Select a profile:' "${card}" || return $?
    [[ -n "${REPLY}" ]] && name="${REPLY}" || return 0
  fi

  local exists=''
  exists="$(echo "${card}" | jq -cer ".profiles|has(\"${name}\")")"

  if [[ "${exists}" == "false" ]]; then
    echo 'Invalid profile name value'
    return 2
  fi

  pactl set-card-profile "${index}" "${name}"

  if [[ $? -ne 0 ]]; then
    echo 'Failed to set profile'
    return 2
  fi
  
  echo "Profile has been set to ${name}"
}

# Sets the active sink or source module.
# Arguments:
#  type:   sink, source
#  index:  the index of an audio module
set_default () {
  local type="${1}"
  local index="${2}"

  if [[ ! "${type}" =~ ^(sink|source)$ ]]; then
    echo 'Invalid module type value'
    return 2
  fi

  if [[ -z "${index}" ]]; then
    pick_module 'Select an audio module:' "${type}" || return $?
    [[ -n "${REPLY}" ]] && index="${REPLY}" || return 0
  fi

  local query=".[]|select(.index|tostring == \"${index}\")"

  local exists=''
  exists="$(pactl --format=json list "${type}"s | jq -cer "${query}")"

  if [[ -z "${exists}" ]]; then
    echo 'Invalid module index value'
    return 2
  fi

  pactl set-default-${type} "${index}"

  if [[ $? -ne 0 ]]; then
    echo "Failed to set active $(label type "${type}")"
    return 2
  fi

  echo "Active $(label type "${type}") set to module ${index}"
}

# Sets the volume of the active sink or source
# to the given value. If the given value is up or
# down the volume increases or decreases by 5%.
# Arguments:
#  type: sink, source
#  to:   up, down, mute, unmute or [0,150] 
turn_default () {
  local type="${1}"
  local to="${2}"

  if [[ ! "${type}" =~ ^(sink|source)$ ]]; then
    echo 'Invalid module type value'
    return 2
  fi

  if [[ ! "${to}" =~ ^(up|down|mute|unmute|[0-9]+)$ ]]; then
    echo 'Invalid volume value'
    return 2
  elif [[ "${to}" =~ ^[0-9]+$ ]] && ! ((${to} >= 0 && ${to} <= 150)); then
    echo 'Volume value is out of range'
    return 2
  fi

  local module=''
  module="$(pactl get-default-${type})"

  if [[ $? -ne 0 ]]; then
    echo "Unable to read the active $(label type "${type}")"
    return 2
  fi
  
  if [[ "${to}" == "mute" ]]; then
    pactl set-${type}-mute "${module}" 1

    if [[ $? -ne 0 ]]; then
      echo "Failed to set active $(label type "${type}") to mute"
      return 2
    fi

    echo "Active $(label type "${type}") volume set to mute" && return 0
  elif [[ "${to}" == "unmute" ]]; then
    pactl set-${type}-mute "${module}" 0

    if [[ $? -ne 0 ]]; then
      echo "Failed to set active $(label type "${type}") to unmute"
      return 2
    fi

    echo "Active $(label type "${type}") volume set to unmute" && return 0
  fi

  local volume="${to}"

  if [[ "${to}" == "up" ]]; then
    volume='+5'
  elif [[ "${to}" == "down" ]]; then
    volume='-5'
  fi

  pactl set-${type}-mute "${module}" 0 &&
  pactl set-${type}-volume "${module}" "${volume}%"

  if [[ $? -ne 0 ]]; then
    echo "Failed to set volume of active $(label type "${type}")"
    return 2
  fi

  echo "Active $(label type "${type}") volume set to ${volume}%"
}

# Sets all sink or source modules to mute or unmute mode.
# Arguments:
#  type: sink or source
#  mode: 1 to mute or 0 to unmute
set_mute () {
  local type="${1}"
  local mode="${2}"

  if [[ ! "${type}" =~ ^(sink|source)$ ]]; then
    echo 'Invalid module type value'
    return 2
  fi

  if [[ ! "${mode}" =~ ^(1|0)$ ]]; then
    echo 'Invalid mute mode value'
    return 2
  fi

  # Build pactl commands for each audio module
  local query=''
  query+="\"pactl set-${type}-mute \(.name) ${mode}\""
  query="[.[]|${query}]|join(\"\n\")"

  local pactl_cmds=''
  pactl_cmds="$(pactl --format=json list "${type}"s | jq -cer "${query}")"

  if [[ $? -ne 0 ]]; then
    echo "Unable to read $(label type "${type}") modules"
    return 2
  fi

  if [[ -z "${pactl_cmds}" ]]; then
    echo "No $(label type "${type}") modules have found"
    return 0
  fi

  # Execute each pactl command
  local failed='false'
  local pactl_cmd=''

  while read -r pactl_cmd; do
    ${pactl_cmd}

    if [[ $? -ne 0 ]]; then
      failed='true'
    fi
  done <<< "${pactl_cmds}"

  if [[ "${failed}" == "true" ]]; then
    echo "Failed to set mute mode for all $(label type "${type}") modules"
    return 2
  fi

  echo "All $(label type "${type}") modules set to $(label mute "${mode}")"
}

