#!/bin/bash

set -o pipefail

source /opt/stack/utils

# Converts the given raw value to its human friendly value.
# Arguments:
#  key:   the type of value
#  value: the raw value
# Outputs:
#  A human friendly value.
label () {
  local key="${1}"
  local value="${2}"

  if [[ "${key}" == "type" ]]; then
    case "${value}" in
      sink) echo 'output';;
      source) echo 'input';;
      *) echo "${value}";;
    esac
  elif [[ "${key}" == "mute" ]]; then
    case "${value}" in
      0) echo 'unmute';;
      1) echo 'mute';;
      *) echo "${value}";;
    esac
  else
    echo "${value}"
  fi
}

# Returns the list of all audio cards.
# Arguments:
#  none
# Outputs:
#  A json array of audio cards.
find_cards () {
  pactl --format=json list cards || return 1
}

# Returns the audio card identified by the given
# index number.
# Arguments:
#  index: a zero-based integer
# Outputs:
#  A json object of an audio card.
find_card () {
  local index="${1}"

  local query=".[]|select(.index|tostring == \"${index}\")"

  find_cards | jq -cer "${query}" || return 1
}

# Shows a menu asking the user to select an audio card,
# where the answer is kept in the global var REPLY.
# Arguments:
#  prompt: a prompt text line
# Outputs:
#  A menu of audio card names.
pick_card () {
  local prompt="${1}"

  local query='{key: .index, value: "\(.index):\(.properties|'
  query+='if ."device.nick" then ."device.nick" else ."device.alias" end)"}'
  query="[.[]|${query}]"

  local cards=''
  cards="$(find_cards | jq -cer "${query}")" || return 1

  local len=0
  len=$(count "${cards}") || return 1

  if [[ ${len} -eq 0 ]]; then
    echo 'No audio cards have found'
    return 2
  fi
  
  pick_one "${prompt}" "${cards}" vertical || return $?
}

# Shows a menu asking the user to select a profile of the
# given audio card, where the answer is kept in the global
# var REPLY.
# Arguments:
#  prompt: a prompt text line
#  card:   a json object of an audio card
# Outputs:
#  A menu of audio card profile names.
pick_profile () {
  local prompt="${1}"
  local card="${2}"

  local query='{key: .key, value: .key}'
  query="[.profiles|to_entries[]|${query}]"

  local profiles=''
  profiles="$(echo "${card}" | jq -cer "${query}")" || return 1

  local len=0
  len="$(count "${profiles}")" || return 1

  if [[ ${len} == 0 ]]; then
    echo 'No audio profiles found'
    return 2
  fi
  
  pick_one "${prompt}" "${profiles}" vertical || return $?
}

# Shows a menu asking the user to select an audio module
# with the given type, where the answer is kept in the
# global var REPLY.
# Arguments:
#  prompt: a prompt text line
#  type:   sink, source
# Outputs:
#  A menu of audio module names.
pick_module () {
  local prompt="${1}"
  local type="${2}"

  local query='{key: .index, value: "\(.name)'
  query+=' [\(.properties|if ."device.nick" then ."device.nick" else ."device.alias" end)]"}'
  query="[.[]|=.|map((.ports[] + {index, properties}))|.[]|${query}]"

  local modules=''
  modules="$(pactl --format=json list "${type}"s | jq -cer "${query}")" || return 1

  local len=0
  len="$(count "${modules}")" || return 1

  if [[ ${len} == 0 ]]; then
    echo "No $(label type "${type}") modules have found"
    return 2
  fi
  
  pick_one "${prompt}" "${modules}" vertical || return $?
}

