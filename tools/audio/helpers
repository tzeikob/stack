#!/bin/bash

set -o pipefail

source /opt/stack/utils

# Returns the list of all audio cards.
# Outputs:
#  A json array of audio cards.
find_cards () {
  pactl --format=json list cards || return 1
}

# Returns the audio card identified by the given name.
# Arguments:
#  name: the name of audio card
# Outputs:
#  A json object of an audio card.
find_card () {
  local name="${1}"

  local query=".[]|select(.name == \"${name}\")"

  find_cards | jq -cer "${query}" || return 1
}

# Shows a menu asking the user to select an audio card.
# Arguments:
#  prompt: a prompt text line
# Outputs:
#  A menu of audio card names.
pick_card () {
  local prompt="${1}"

  local query='{key: .name, value: "\(.properties|'
  query+='if ."device.nick" then ."device.nick" else ."device.alias" end)"}'
  query="[.[]|${query}]"

  local cards=''
  cards="$(find_cards | jq -cer "${query}")" || return 1

  local len=0
  len=$(count "${cards}") || return 1

  if [[ ${len} -eq 0 ]]; then
    echo 'No audio cards have found'
    return 2
  fi
  
  pick_one "${prompt}" "${cards}" vertical || return $?
}

# Shows a menu asking the user to select a profile of the
# given audio card.
# Arguments:
#  prompt: a prompt text line
#  card:   a json object of an audio card
# Outputs:
#  A menu of audio card profile names.
pick_profile () {
  local prompt="${1}"
  local card="${2}"

  local query='{key: .key, value: .key}'
  query="[.profiles|to_entries[]|${query}]"

  local profiles=''
  profiles="$(echo "${card}" | jq -cer "${query}")" || return 1

  local len=0
  len="$(count "${profiles}")" || return 1

  if [[ ${len} == 0 ]]; then
    echo 'No audio profiles found'
    return 2
  fi
  
  pick_one "${prompt}" "${profiles}" vertical || return $?
}

# Shows a menu asking the user to select an audio module
# with the given type.
# Arguments:
#  prompt: a prompt text line
#  type:   output or input
# Outputs:
#  A menu of audio output or input module names.
pick_module () {
  local prompt="${1}"
  local type="${2}"

  local query='{key: .parent.name, value: "\(.name)'
  query+=' [\(.parent.properties|if ."device.nick" then ."device.nick" else ."device.alias" end)]"}'
  query="[.[]|=.|map((.ports[] + {parent: {name, properties}}))|.[]|${query}]"
  
  local object='sinks'
  if [[ "${type}" == "input" ]]; then
    object='sources'
  fi

  local modules=''
  modules="$(pactl --format=json list "${object}" | jq -cer "${query}")" || return 1

  local len=0
  len="$(count "${modules}")" || return 1

  if [[ ${len} == 0 ]]; then
    echo "No ${type} modules have found"
    return 2
  fi
  
  pick_one "${prompt}" "${modules}" vertical || return $?
}

# Checks if the given type is a valid io module type.
# Arguments:
#  type: a module type
# Returns:
#  0 if it is a valid io module type otherwise 1.
is_module_type () {
  local type"${1}"
  
  if not_match "${type}" '^(output|input)$'; then
    return 1
  fi

  return 0
}

# Checks if the given type is not a valid io module type.
# Arguments:
#  type: a module type
# Returns:
#  0 if it is not an io module type otherwise 1.
is_not_module_type () {
  is_module_type "${1}" && return 1 || return 0
}

# Checks if the given value is a valid volume value.
# Arguments:
#  volume: a volume value
# Returns:
#  0 if volume is valid otherwise 1.
is_valid_volume () {
  local volume="${1}"
  
  if not_match "${volume}" '^(up|down|mute|unmute|[0-9]+)$'; then
    return 1
  fi

  return 0
}

# Checks if the given value is not a valid volume value.
# Arguments:
#  volume: a volume value
# Returns:
#  0 if volume is not valid otherwise 1.
is_not_valid_volume () {
  is_valid_volume "${1}" && return 1 || return 0
}

# Checks if the volume given as percentage is within
# the acceptable min and max limits.
# Arguments:
#  volume: a percentage volume value
# Returns:
#  0 if volume is within range otherwise 1.
is_volume_within_range () {
  local volume="${1}"

  if ! ((${volume} >= 0 && ${volume} <= 150)); then
    return 1
  fi

  return 0
}

# Checks if the volume given as percentage is not within
# the acceptable min and max limits.
# Arguments:
#  volume: a percentage volume value
# Returns:
#  0 if volume is not within range otherwise 1.
is_volume_out_of_range () {
  is_volume_within_range "${1}" && return 1 || return 0
}

# Checks if the given mode is a valid pactl mute mode.
# Arguments:
#  mode: an integer value
# Returns:
#  0 if mode is valid otherwise 1.
is_mute_mode () {
  local mode="${1}"

  if not_match "${mode}" '^(1|0)$'; then
    return 1
  fi

  return 0
}

# Checks if the given mode is not valid pactl mute mode.
# Arguments:
#  mode: an integer value
# Returns:
#  0 if mode is not valid otherwise 1.
is_not_mute_mode () {
  is_mute_mode "${1}" && return 1 || return 0
}

