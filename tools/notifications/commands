#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/notifications/helpers

SETTINGS_FILE="${CONFIG_HOME}/notifications.json"

# Starts the notifications service.
# Arguments:
#  None
start () {
  if ps aux | grep dunst | grep -v grep > /dev/null 2>&1; then
    echo 'Notifications service is already runnning'
    return 0
  fi

  echo 'Starting the notifications service...'

  dunst > /dev/null 2>&1 &

  local pid=$!

  if ! ps -p "${pid}" > /dev/null; then
    echo 'Failed to start notifications service'
    return 2
  fi

  echo 'Notifications service has been started'
}

# Restarts the notifications service.
# Arguments:
#  None
restart () {
  echo 'Restarting the notifications service...'

  killall dunst &&
  dunst > /dev/null 2>&1 &

  local pid=$!

  if ! ps -p "${pid}" > /dev/null; then
    echo 'Failed to restart notifications service'
    return 2
  fi

  echo 'Notifications service has been restarted'
}

# Returns the notifications state.
# Arguments:
#  None
# Outputs:
#  A json object of the notifiactions state.
get_state () {
  local state=''

  state+="$(dunstctl is-paused |
    awk '{print "\"is_paused\":"$0","}')" || return 1

  state+="$(dunstctl count | awk '{
    split($0, a, ":")

    if (a[1] ~ "Waiting") {
      print "\"pending\":"a[2]","
    } else if (a[1] ~ "Currently displayed") {
      print "\"displayed\":"a[2]","
    } else if (a[1] ~ "History") {
      print "\"archived\":"a[2]","
    }
  }')" || return 1

  if grep -qsE '[[:blank:]]*transparency = 100' "${HOME}/.config/dunst/dunstrc"; then
    state+='"popup": false,'
  else
    state+='"popup": true,'
  fi

  local volume=100
  if [[ -f "${SETTINGS_FILE}" ]]; then
    local query='.volume|if . then (.*100) else 100 end'
    volume="$(jq -cr "${query}" "${SETTINGS_FILE}")" || return 1
  fi

  state+="\"volume\": ${volume},"

  # Remove the last extra comma after the last field
  if [[ -n "${state}" ]]; then
    state="${state::-1}"
  fi

  echo "{${state}}"
}

# Shows the current status of the notification server.
# Arguments:
#  None
# Outputs:
#  A verbose list of text data.
show_status () {
  local query=''
  query+='.[]|select(.command|test("^(/usr/bin/dunst|dunst)"))|.pid'

  local pid=''
  pid="$(ps aux | jc --ps | jq -cr "${query}")" || return 1

  if [[ -n "${pid}" ]]; then
    echo 'Service:  up'
  else
    echo 'Service:  down'
  fi

  local query=''
  query+='Muted:    \(.is_paused|if . then "yes" else "no" end)\n'
  query+='Popup:    \(.popup|if . then "on" else "off" end)\n'
  query+='Volume:   \(.volume)\n'
  query+='Pending:  \(.pending)\n'
  query+='Showing:  \(.displayed)\n'
  query+='Sent:     \(.archived)'

  get_state | jq -cer "\"${query}\"" || return 1
}

# Shows the list of archived notifications sorted by the
# optionally given field and order.
# Arguments:
#  sort_by: id or appname, default is id
#  order:   asc or desc, default is asc
# Outputs:
#  A long list of notificaions data.
list_all () {
  local sort_by="${1:-"id"}"
  local order="${2:-"asc"}"

  if [[ ! "${sort_by}" =~ ^(id|appname)$ ]]; then
    echo 'Invalid sorting field'
    return 2
  fi

  if [[ -n "${order}" ]] && [[ ! "${order}" =~ ^(asc|desc)$ ]]; then
    echo 'Invalid ordering value'
    return 2
  fi

  local notifications=''
  notifications="$(find_all "${sort_by}" "${order}")" || return 1

  local len=0
  len="$(count "${notifications}")" || return 1

  if [[ ${len} -eq 0 ]]; then
    echo 'No notifications have found'
    return 0
  fi

  local query=''
  query+='ID:       \(.id.data)\n'
  query+='App:      \(.appname.data)'
  query+='\(.summary.data|if . and . != "" then "\nSummary:  \(.)" else "" end)'
  query+='\(.body.data|if . and . != "" then "\nBody:     \(.)" else "" end)'
  query="[.[]|\"${query}\"]|join(\"\n\n\")"

  echo "${notifications}" | jq -cer "${query}" || return 1
}

# Pauses the notification stream.
# Arguments:
#  None
mute_all () {
  dunstctl set-paused true

  if [[ $? -ne 0 ]]; then
    echo 'Failed to mute notifications'
    return 2
  fi

  echo 'Notifications have been muted'
}

# Restores the notification stream.
# Arguments:
#  None
unmute_all () {
  dunstctl set-paused false

  if [[ $? -ne 0 ]]; then
    echo 'Failed to unmute notifications'
    return 2
  fi

  echo 'Notifications have been unmuted'
}

# Removes all the archived notifications.
# Arguments:
#  None
clean_all () {
  dunstctl history-clear

  if [[ $? -ne 0 ]]; then
    echo 'Failed to remove all notifications'
    return 2
  fi

  echo 'All notifications have been removed'
}

# Enables or disables pop-up notifications.
# Arguments:
#  mode: on or off
set_popup () {
  local mode="${1}"

  if [[ ! "${mode}" =~ ^(on|off)$ ]]; then
    echo 'Invalid pop-up mode'
    return 2
  fi

  local config_file="${HOME}/.config/dunst/dunstrc"

  # Create the config file if none exists yet
  if [[ ! -f "${config_file}" ]]; then
    echo '[global]' > "${config_file}"
    echo '  transparency = 0' >> "${config_file}"
  fi

  # Convert mode to transparency value
  local value=0
  if [[ "${mode}" == "off" ]]; then
    value=100
  fi

  sed -i "s/\([[:blank:]]*transparency\).*/\1 = ${value}/" "${config_file}"

  if [[ $? -ne 0 ]]; then
    echo "Failed to set pop-up notifications to ${mode}"
    return 2
  fi

  # Restart service so changes take effect
  restart

  echo "Pop-up notifications set to ${mode}"
}

# Sets the volume of the notifications sound.
# Arguments:
#  percent: a value between 0 and 100
set_volume () {
  local percent="${1}"

  if [[ -z "${percent}" ]]; then
    ask 'Enter the volume [0, 100]:' '^[0-9]{1,3}$' || return $?
    percent="${REPLY}"
  elif [[ ! "${percent}" =~ ^[0-9]{1,3}$ ]]; then
    echo 'Invalid volume value'
    return 2
  fi

  if [[ ${percent} -lt 0 ]] || [[ ${percent} -gt 100 ]]; then
    echo 'Volume is out of range'
    return 2
  fi

  # Scale down volume to [0,1] range
  percent=$(echo "${percent}" | awk '{print $0/100}')

  local settings='{}'

  if [[ -f "${SETTINGS_FILE}" ]]; then
    settings="$(jq -e ".volume = ${percent}" "${SETTINGS_FILE}")" || return 1
  else
    settings="$(echo "{\"volume\": ${percent}}" | jq -e '.')" || return 1
  fi

  mkdir -p "${CONFIG_HOME}"
  echo "${settings}" > "${SETTINGS_FILE}"
}

