#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/notifications/helpers

# Starts the notifications service.
start () {
  local is_up='false'
  is_up="$(is_notifications_up)" || return 1
  
  if is_true "${is_up}"; then
    echo 'Notifications service is already runnning'
    return 2
  fi

  echo 'Starting notifications service...'

  dunst > /dev/null 2>&1 &

  local pid=$!

  ps -p "${pid}" > /dev/null
  
  if has_failed; then
    echo 'Failed to start notifications service'
    return 2
  fi

  echo 'Notifications service started'
}

# Restarts the notifications service.
restart () {
  echo 'Restarting notifications service...'

  killall dunst || return 1
  sleep 1

  dunst > /dev/null 2>&1 &

  local pid=$!

  ps -p "${pid}" > /dev/null
  
  if has_failed; then
    echo 'Failed to restart notifications service'
    return 2
  fi

  echo 'Notifications service restarted'
}

# Returns the notifications state.
# Outputs:
#  A json object of the notifiactions state.
get_state () {
  local state=''

  state+="$(dunstctl is-paused |
    awk '{print "\"is_paused\":"$0","}')" || return 1

  state+="$(dunstctl count | awk '{
    split($0, a, ":")

    if (a[1] ~ "Waiting") {
      print "\"pending\":"a[2]","
    } else if (a[1] ~ "Currently displayed") {
      print "\"displayed\":"a[2]","
    } else if (a[1] ~ "History") {
      print "\"archived\":"a[2]","
    }
  }')" || return 1

  if grep -qsE '[[:blank:]]*transparency = 100' "${HOME}/.config/dunst/dunstrc"; then
    state+='"popup": false,'
  else
    state+='"popup": true,'
  fi

  local volume=100

  if file_exists "${NOTIFICATIONS_SETTINGS}"; then
    local query='.volume|if . then (.*100) else 100 end'
    volume="$(jq -cr "${query}" "${NOTIFICATIONS_SETTINGS}")" || return 1
  fi

  state+="\"volume\": ${volume}"

  echo "{${state}}"
}

# Shows the current status of the notification stream.
# Outputs:
#  A verbose list of text data.
show_status () {
  local is_up='false'
  is_up="$(is_notifications_up)" || return 1

  if is_true "${is_up}"; then
    echo 'Service Status:    up'
  else
    echo 'Service Status:    down'
  fi

  local query=''
  query+='On Mute:           \(.is_paused|if . then "yes" else "no" end)\n'
  query+='Pop-up Mode:       \(.popup|if . then "on" else "off" end)\n'
  query+='Beep Volume:       \(.volume)%\n'
  query+='Pending Messages:  \(.pending)\n'
  query+='Showing Messages:  \(.displayed)\n'
  query+='Sent Messages:     \(.archived)'

  get_state | jq -cer "\"${query}\"" || return 1
}

# Shows the list of archived notifications sorted by the
# optionally given field and order.
# Arguments:
#  sort_by: id or appname, default is id
# Outputs:
#  A long list of notificaions data.
list_all () {
  local sort_by="${1:-id}"

  if is_not_valid_sort_field "${sort_by}"; then
    echo 'Invalid sorting field'
    return 2
  fi

  local notifications=''
  notifications="$(find_all "${sort_by}" asc)" || return 1

  local len=0
  len="$(count "${notifications}")" || return 1

  if is_true "${len} = 0"; then
    echo 'No notifications have found'
    return 0
  fi

  local query=''
  query+='ID:       \(.id.data)\n'
  query+='App:      \(.appname.data)'
  query+='\(.summary.data|if . and . != "" then "\nSummary:  \(.)" else "" end)'
  query+='\(.body.data|if . and . != "" then "\nBody:     \(.)" else "" end)'
  query="[.[]|\"${query}\"]|join(\"\n\n\")"

  echo "${notifications}" | jq -cer "${query}" || return 1
}

# Pauses the notification stream.
mute_all () {
  dunstctl set-paused true

  if has_failed; then
    echo 'Failed to mute notifications'
    return 2
  fi

  echo 'Notifications have been muted'
}

# Restores the notification stream.
unmute_all () {
  dunstctl set-paused false

  if has_failed; then
    echo 'Failed to unmute notifications'
    return 2
  fi

  echo 'Notifications have been unmuted'
}

# Removes all the archived notifications.
clean_all () {
  dunstctl history-clear

  if has_failed; then
    echo 'Failed to remove all notifications'
    return 2
  fi

  echo 'All notifications have been removed'
}

# Enables or disables popup notifications.
# Arguments:
#  mode: on or off
set_popup () {
  local mode="${1}"

  if is_not_given "${mode}"; then
    echo 'Missing popup mode'
    return 2
  elif is_not_toggle "${mode}"; then
    echo 'Invalid popup mode'
    return 2
  fi

  local config_file="${HOME}/.config/dunst/dunstrc"

  # Create the config file if none exists yet
  if file_not_exists "${config_file}"; then
    echo '[global]' > "${config_file}"
    echo '  transparency = 0' >> "${config_file}"
  fi

  # Convert mode to transparency value
  local value=0
  if is_off "${mode}"; then
    value=100
  fi

  sed -i "s/\([[:blank:]]*transparency\).*/\1 = ${value}/" "${config_file}"

  if has_failed; then
    echo "Failed to set popup notifications to ${mode}"
    return 2
  fi

  # Restart service so changes take effect
  restart

  echo "Popup notifications set to ${mode}"
}

# Sets the volume of the notifications sound.
# Arguments:
#  percent: a value between 0 and 100
set_volume () {
  local percent="${1}"

  if is_not_given "${percent}"; then
    echo 'Missing volume percent'
    return 2
  elif is_not_positive_integer "${percent}"; then
    echo 'Invalid volume percent'
    return 2
  elif is_volume_out_of_range "${percent}"; then
    echo 'Volume percent is out of range'
    return 2
  fi

  save_volume_to_settings "${percent}"

  if has_failed; then
    echo 'Failed to set notifications volume'
    return 2
  fi

  echo "Notifications volume set to ${percent}%"
}

