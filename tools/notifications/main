#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/notifications/commands

# Shows the help message.
# Arguments:
#  mode: once or none
# Outputs:
#  A long help message.
show_help () {
  if [[ "${1}" == "once" ]]; then
    echo 'Usage: notifications [OPTIONS] COMMAND [OBJECT] [ARGUMENTS]...'
    
    echo -e '\nOPTIONS'
    printf ' %-16s %s\n' \
      '-h' 'Show this help message.' \
      '-q' 'Stay quiet and do not play beep sounds.'

    echo -e '\nCOMMANDS'
    printf ' %-16s %s\n' \
      'get state' 'Return the state of the notifications stream.' \
      '' '' \
      'mute all' 'Pause the notifications stream.' \
      'unmute all' 'Restore the notifications stream.' \
      '' '' \
      'start' 'Start the notifications service.' \
      'restart' 'Restart the notifications service.'

    return 0
  fi

  echo 'Usage: COMMAND [OBJECT] [ARGUMENTS]...'

  echo -e '\nCOMMANDS'
  printf ' %-35s %s\n' \
    'help' 'Show this help message.' \
    '' '' \
    'show status' 'Show the status of notifications.' \
    '' '' \
    'list all [<sort_by> [<order>]]' 'List all notifications sorted by either the' \
    '' 'id or appname in asc or desc order.' \
    '' '' \
    'set popup on|off' 'Show or hide pop-up notifications.' \
    'set volume <percent>' 'Set the volume of the notifications sound.' \
    '' '' \
    'mute all' 'Pause the notifications stream.' \
    'unmute all' 'Restore the notifications stream.' \
    'clean all' 'Remove all notifications.' \
    '' '' \
    'start' 'Start the notifications service.' \
    'restart' 'Restart the notifications service.'
}

loop () {
  clear

  while true; do
    prompt notifications && history -s "${REPLY}"

    set -f
    set_separator line
    local args=($(xargs -n1 <<< "${REPLY}"))
    restore_separator && set +f

    local cmd="${args[0]}"
    local obj="${args[1]}"

    case "${cmd}${obj:+ ${obj}}" in
      'help') show_help;;
      'show status') show_status;;
      'list all') list_all "${args[2]}" "${args[3]}";;
      'mute all') mute_all;;
      'unmute all') unmute_all;;
      'clean all') clean_all;;
      'set popup') set_popup "${args[2]}";;
      'set volume') set_volume "${args[2]}";;
      'start') start;;
      'restart') restart;;
      'clear') clear && continue;;
      'quit') break;;
      '') continue;;
      *)
        echo 'Ooops, invalid or unknown command!'
        $(return 2);;
    esac && success || fail

    REPLY=''
  done

  clear
}

once () {
  while getopts 'hq' opt; do
    case "${opt}" in
     'h')
        show_help once
        return 0;;
     'q') QUIET='true';;
     *)
      echo 'Ooops, invalid or unknown option'
      return 2;;
    esac
  done

  shift $((OPTIND-1))

  local cmd="${1}"
  local obj="${2}"

  case "${cmd}${obj:+ ${obj}}" in
    'get state') get_state;;
    'mute all') mute_all;;
    'unmute all') unmute_all;;
    'start') start;;
    'restart') restart;;
    *)
      echo 'Ooops, invalid or unknown command'
      return 2;;
  esac
}

if [[ $# -eq 0 ]]; then
  loop
else
  once "$@" && success || fail
fi

