#!/bin/bash

set -o pipefail

source /opt/stack/utils

SETTINGS_FILE="${CONFIG_HOME}/notifications.json"

# Returns the list of all archived notifications 
# sorted by the given field in the given order.
# Arguments:
#  sort_by:  id or appname
#  order:    asc or desc, default is asc
# Outputs:
#  A json array of notification objects.
find_all () {
  local sort_by="${1}"
  local order="${2}"

  local query='.data[0]'

  if match "${sort_by}" '^(id|appname)$'; then
    query+="|sort_by(.${sort_by})"

    if equals "${order}" 'desc'; then
      query+='|reverse'
    fi
  fi

  dunstctl history | jq -cr "${query}" || return 1
}

# Checks if the notifications stream service
# is up and running.
is_notifications_up () {
  local query=''
  query+='[.[]|select(.command|test("/usr/bin/dunst|dunst.*"))]'
  query+='|if length > 0 then "true" else "false" end'

  local is_up=''
  is_up="$(ps aux | grep -v 'jq' | jc --ps | jq -cr "${query}")" || return 1

  echo "${is_up}"
}

# Stores the notification beep volume into settings file.
# Arguments:
#  volume: a percent integer value in [0,100]
save_volume_to_settings () {
  local volume="${1}"
  
  # Scale down volume to [0,1] range
  volume=$(echo "${volume}" | awk '{print $0/100}')

  local settings='{}'

  if file_exists "${SETTINGS_FILE}"; then
    settings="$(jq -e ".volume = ${volume}" "${SETTINGS_FILE}")" || return 1
  else
    settings="$(echo "{\"volume\": ${volume}}" | jq -e '.')" || return 1
  fi

  mkdir -p "${CONFIG_HOME}"
  echo "${settings}" > "${SETTINGS_FILE}"
}

# Checks if the given value is a valid sort field.
# Arguments:
#  field: a sort field name
# Returns:
#  0 if field is valid otherwise 1.
is_valid_sort_field () {
  local field="${1}"

  if not_match "${field}" '^(id|appname)$'; then
    return 1
  fi

  return 0
}

# Checks if the given value is not a valid sort field.
# Arguments:
#  field: a sort field name
# Returns:
#  0 if field is not valid otherwise 1.
is_not_valid_sort_field () {
  is_valid_sort_field "${1}" && return 1 || return 0
}

# Checks if the given volume is with in range.
# Arguments:
#  volume: a positive integer value
# Returns:
#  0 if volume is valid otherwise 1.
is_volume_with_in_range () {
  local volume="${1}"

  if [[ ${volume} -lt 0 ]] || [[ ${volume} -gt 100 ]]; then
    return 1
  fi

  return 0
}

# Checks if the given volume is out of range.
# Arguments:
#  volume: a positive integer value
# Returns:
#  0 if volume is not valid otherwise 1.
is_volume_out_of_range () {
  is_volume_with_in_range "${1}" && return 1 || return 0
}

