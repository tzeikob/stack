#!/bin/bash

set -o pipefail

source /opt/stack/utils

SETTINGS_FILE="${CONFIG_HOME}/notifications.json"

# Returns the list of all archived notifications 
# sorted by the given field in the given order.
# Arguments:
#  sort_by:  id or appname
#  order:    asc or desc, default is asc
# Outputs:
#  A json array of notification objects.
find_all () {
  local sort_by="${1}"
  local order="${2}"

  local query='.data[0]'

  if [[ "${sort_by}" =~ ^(id|appname)$ ]]; then
    query+="|sort_by(.${sort_by})"

    [[ "${order}" == "desc" ]] && query+='|reverse'
  fi

  dunstctl history | jq -cr "${query}" || return 1
}

# Checks if the notifications stream service
# is up and running.
is_notifications_up () {
  local query=''
  query+='[.[]|select(.command|test("/usr/bin/dunst|dunst.*"))]'
  query+='|if length > 0 then "true" else "false" end'

  local is_up=''
  is_up="$(ps aux | grep -v 'jq' | jc --ps | jq -cr "${query}")" || return 1

  echo "${is_up}"
}

# Stores the notification beep volume into settings file.
# Arguments:
#  volume: a percent integer value in [0,100]
save_volume () {
  local volume="${1}"
  
  # Scale down volume to [0,1] range
  volume=$(echo "${volume}" | awk '{print $0/100}')

  local settings='{}'

  if [[ -f "${SETTINGS_FILE}" ]]; then
    settings="$(jq -e ".volume = ${volume}" "${SETTINGS_FILE}")" || return 1
  else
    settings="$(echo "{\"volume\": ${volume}}" | jq -e '.')" || return 1
  fi

  mkdir -p "${CONFIG_HOME}"
  echo "${settings}" > "${SETTINGS_FILE}"
}

