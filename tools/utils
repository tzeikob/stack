#!/bin/bash

set -o pipefail

CONFIG_HOME="${HOME}/.config/stack"

RESOURCES_HOME="${HOME}/.local/share"
COLORS_HOME="${RESOURCES_HOME}/colors"
WALLPAPERS_HOME="${RESOURCES_HOME}/wallpapers"

AES=$'╬'
AES_LN=$'╬\n'
KVS=$'▒'

# Sets the IFS to the given value.
# Arguments:
#  value: space, line, tab or any character
set_separator () {
  local value="${1}"

  case "${value}" in
    space) IFS=$' ';;
    line) IFS=$'\n';;
    tab) IFS=$'\t';;
    *) IFS="${value}";;
  esac
}

# Restores the IFS to the default value.
# Arguments:
#  None
restore_separator () {
  IFS=$' \n\t'
}

# Removes leading and trailing white spaces
# from the given string or input.
# Arguments:
#  input: a string or input of a pipeline
trim () {
  local input=''
  [[ -p /dev/stdin ]] && input="$(cat -)" || input="${@}"

  echo "${input}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'
}

# Returns the list of any detected hosts in the
# local network.
# Arguments:
#  None
# Outputs:
#  A json array list of host objects.
find_hosts () {
  local route=''
  route="$(ip route get 1.1.1.1)" || return 1

  local cidr=''
  cidr="$(echo "${route}" | awk '/via/{print $3}' |
    head -n 1 | sed -r 's/(\.[0-9]{1,3}$)/.0\/24/')" || return 1

  local map=''
  map="$(nmap -n -sn "${cidr}" -oG -)" || return 1

  local ips=''
  ips="$(echo "${map}" | awk '/Up$/{print $2}')" || return 1

  local ip=''
  local hosts=''

  while read -r ip; do
    local host_map=''
    host_map="$(nmap --host-timeout 5 "${ip}" -oG -)" || continue

    hosts+="$(echo "${host_map}" | awk '/Host.*Up/{
      gsub(/(\(|\))/,"",$3);
      print "{\"ip\":\""$2"\",\"name\":\""$3"\"},"
    }')"
  done <<< "${ips}"

  # Remove the extra comma after the last element
  hosts="${hosts:+${hosts::-1}}"

  echo "[${hosts}]"
}

# Shows a prompt asking the user to enter the
# next command, which is kept in the global var REPLY.
# Arguments:
#  label: the label of the prompt
# Outputs:
#  A minimal prompt line.
prompt () {
  local label="${1:-"prompt"}"

  read -rep "${label}>> " REPLY
  
  history -s "${REPLY}"
}

# Asks the user to enter a value, which is validated
# by the optional regular expression. The answer is
# kept in the global var REPLY.
# Arguments:
#  prompt: a text line
#  re:     an optional regular expression
# Outputs:
#  A prompt text line.
# Returns:
#  1 if optional validation failed otherwise 0.
ask () {
  local prompt="${1}"
  local re="${2}"

  REPLY=''

  read -rep "${prompt} " REPLY

  if is_given "${re}" && not_match "${REPLY}" "${re}"; then
    return 1
  fi

  return 0
}

# Asks the user to enter a secret value, the answer is
# kept in the global var REPLY.
# Arguments:
#  prompt: a text line
# Outputs:
#  A prompt text line.
ask_secret () {
  local prompt="${1}"

  REPLY=''

  read -srep "${prompt} " REPLY
}

# Invalidates user's cached credentials and enforcing
# new password authentication.
# Returns:
#  0 if succeeded otherwise 1.
authenticate_user () {
  echo 'Permission needed for this operation'

  # Invalidate user's cached credentials
  sudo -K

  # Mimic authentication with a dry run
  sudo /usr/bin/true &> /dev/null

  if has_failed; then
    echo 'Sorry incorrect password!'
    return 2
  fi

  return 0
}

# Asks the user to retype the given secret value
# and confirms it.
# Arguments:
#  prompt: a text line
#  secret: the secret value to be confirmed
# Outputs:
#  A prompt text line.
# Returns:
#  0 if secret is confirmed otherwise 1.
confirm_secret () {
  local prompt="${1}"
  local secret="${2}"

  local retyped_secret=''
  read -srep "${prompt} " retyped_secret

  if not_equals "${secret}" "${retyped_secret}"; then
    return 1
  fi

  return 0
}

# Shows a Yes/No menu and asks user to select an option,
# where the selection is kept in the global var REPLY
# either as a yes or no value.
# Arguments:
#  prompt: a text line
# Outputs:
#  A menu of yes or no options.
confirm () {
  local prompt="${1}"

  REPLY=''
  
  local options="no${KVS}No${AES}yes${KVS}Yes"

  echo "${prompt}"
  REPLY="$(echo "${options}" |
    smenu -nm -/ prefix -W "${AES_LN}" -S /\(.*"${KVS}"\)//v)" || return 1

  if is_given "${REPLY}"; then
    # Remove the value part from the selected option
    REPLY="$(echo "${REPLY}" | sed -r "s/(.*)${KVS}.*/\1/")"
  fi
}

# Shows a menu and asks user to pick one option, where
# the selection is kept in the global var REPLY as a
# value equal to the key property of the selected option.
# Arguments:
#  prompt:  a text line
#  options: a JSON array of {key, value} pairs
#  mode:    horizontal, vertical, tabular
#  slots:   number of vertical or tabular slots
# Outputs:
#  A menu of the given options.
pick_one () {
  local prompt="${1}"
  local options="${2}"
  local mode="${3}"
  local slots="${4:-6}"

  REPLY=''

  local len=0
  len="$(count "${options}")" || return 1
  
  if is_true "${len} = 0"; then
    return 1
  fi

  local args=()
  if equals "${mode}" 'vertical'; then
    args+=(-l -L "${AES}" -n "${slots}")
  elif equals "${mode}" 'tabular'; then
    args+=(-t "${slots}")
  fi

  # Convert options to a line of key${KVS}value${AES} pairs
  options="$(echo "${options}" |
    jq -cer '[.[]|("\(.key)'"${KVS}"'\(.value)")]|join("'"${AES}"'")')" || return 1

  echo "${prompt}"
  REPLY="$(echo "${options}" |
    smenu -nm -/ prefix -W "${AES_LN}" "${args[@]}" -S /\(.*"${KVS}"\)//v)" || return 1

  if is_given "${REPLY}"; then
    # Remove the value part from the selected option
    REPLY="$(echo "${REPLY}" | sed -r "s/(.*)${KVS}.*/\1/")"
  fi
}

# Shows a menu and asks user to pick many options in order,
# where the selection is kept in the global var REPLY as a
# JSON array with elements equal to the key property of every
# selected option.
# Arguments:
#  prompt:  a text line
#  options: a JSON array of {key, value} pairs
#  mode:    horizontal, vertical, tabular
#  slots:   number of vertical or tabular slots
# Outputs:
#  A menu of the given options.
pick_many () {
  local prompt="${1}"
  local options="${2}"
  local mode="${3}"
  local slots="${4:-6}"

  REPLY=''

  local len=0
  len="$(count "${options}")" || return 1
  
  if is_true "${len} = 0"; then
    return 1
  fi

  local args=()
  if equals "${mode}" 'vertical'; then
    args+=(-l -L "${AES}" -n "${slots}")
  elif equals "${mode}" 'tabular'; then
    args+=(-t "${slots}")
  fi

  # Convert options to a line of key${KVS}value${AES} pairs
  options="$(echo "${options}" |
    jq -cer '[.[]|("\(.key)'"${KVS}"'\(.value)")]|join("'"${AES}"'")')" || return 1

  echo "${prompt}"
  REPLY="$(echo "${options}" |
    smenu -nm -/ prefix -W "${AES_LN}" "${args[@]}" -S /\(.*"${KVS}"\)//v -P "${AES}")" || return 1

  if is_given "${REPLY}"; then
    # Convert selected options to a JSON array of their keys
    REPLY="$(echo "${REPLY}" | awk -F"${AES}" '{
      out=""
      for (i=1;i<=NF;i++) {
        gsub(/('"${KVS}"'.*$)/, "", $i);
        out=out "\""$i"\","
      }
      print out
    }')"

    # Remove last post fixed comma
    if match "${REPLY}" ',$'; then
      REPLY="[${REPLY::-1}]"
    fi
  fi
}

# Gets a JSON object's property its key matching the
# given query, where query could be any valid jq query.
# Arguments:
#  object: a JSON object
#  query:  a jq query
# Outputs:
#  The value of the given key.
get () {
  local object="${1}"
  local query="${2:-"."}|if . then . else \"\" end"

  local result=''
  result="$(echo "${object}" | jq -cr "${query}")" || return 1

  echo "${result}"
}

# Counts the number of elements in the given JSON array.
# Arguments:
#  array: a JSON array object
# Outputs:
#  The number of array elements.
count () {
  local array="${1}"

  local result=0
  result="$(echo "${array}" | jq -cer 'length')" || return 1

  echo "${result}"
}

# Returns the md5 hash of the given string value
# truncated to the first given number of characters.
# Arguments:
#  value:  a string value
#  length: the number of character to keep
# Outputs:
#  A truncated md5 hash value.
get_hash () {
  local value="${1}"
  local length="${2:-32}"

  echo "${value}" | md5sum | cut "-c1-${length}"
}

# Downloads the files with the given URL to the
# the given directory.
# Arguments:
#  output: the output directory
#  files:  a list of urls
download () {
  local output="${1}" && shift
  local urls="${@}"

  echo "Downloading files to ${output}:"
  echo ${urls} | awk '{
    for (i=1; i<=NF; i++) {
      print " "$i
    }
  }'

  local url=''
  for url in ${urls}; do
    wget -P "${output}" "${url}" -q --show-progress || return 1
  done
}

# Plays a short success or failure beep sound according
# to the exit status code set by the previous command.
# Arguments:
#  None
# Returns:
#  The exit status code set by previous command.
beep () {
  # Save exit code set by the previous command
  local exit_code=$?

  # Print a generic error message only for exit code 1
  if is_true "${exit_code} = 1"; then
    echo 'Ooops, an unknwon error occurred!'
  fi

  if is_empty "${QUIET}" || is_false "${QUIET}"; then
    local sound='normal'

    if has_failed "${exit_code}"; then
      sound='critical'
    fi

    pw-play --volume=0.7 "/usr/share/sounds/stack/${sound}.wav" &
  fi

  return ${exit_code}
}

# Checks if we run on script mode or not by checking
# if the flag ON_SCRIPT_MODE has been set indicating
# the call was made by a not human.
# Returns:
#  0 if run on script mode otherwise 1.
on_script_mode () {
  if is_given "${ON_SCRIPT_MODE}" && is_true "${ON_SCRIPT_MODE}"; then
    return 0
  fi

  return 1
}

# Checks if we not run on script mode.
# Returns:
#  0 if not run on script mode otherwise 1.
not_on_script_mode () {
  on_scipt_mode && return 1 || return 0
}

# Checks if the given value is empty.
# Arguments:
#  value: any value
# Returns:
#  0 if value is empty otherwise 1.
is_empty () {
  local value="${1}"

  if [[ -z "${value}" ]] || [[ "${value}" == "" ]]; then
    return 0
  fi

  return 1
}

# Checks if the given value is not empty.
# Arguments:
#  value: any value
# Returns:
#  0 if value is not empty otherwise 1.
is_not_empty () {
  is_empty "${1}" && return 1 || return 0
}

# Checks if the given value is not empty.
# Arguments:
#  value: any value
# Returns:
#  0 if value is not empty otherwise 1.
is_given () {
  is_not_empty "${1}" && return 0 || return 1
}

# Checks if the given value is empty.
# Arguments:
#  value: any value
# Returns:
#  0 if value is empty otherwise 1.
is_not_given () {
  is_empty "${1}" && return 0 || return 1
}

# Checks if the given value is integer number.
# Arguments:
#  value: any number value
# Returns:
#  0 if value is integer otherwise 1.
is_integer () {
  local value="${1}"

  if not_match "${value}" '^(0|-?[1-9][0-9]*)$'; then
    return 1
  fi

  return 0
}

# Checks if the given value is not an integer number.
# Arguments:
#  value: any number value
# Returns:
#  0 if value is not integer otherwise 1.
is_not_integer () {
  is_integer "${1}" && return 1 || return 0
}

# Checks if the given value is a positive integer number.
# Arguments:
#  value: any number value
# Returns:
#  0 if value is positive integer otherwise 1.
is_positive_integer () {
  local value="${1}"

  if not_match "${value}" '^(0|[1-9][0-9]*)$'; then
    return 1
  fi

  return 0
}

# Checks if the given value is not a positive integer number.
# Arguments:
#  value: any number value
# Returns:
#  0 if value is not positive integer otherwise 1.
is_not_positive_integer () {
  is_positive_integer "${1}" && return 1 || return 0
}

# Checks if the file with the given path exists.
# Arguments:
#  path: the path of a file
# Returns:
#  0 if file exists otherwise 1.
file_exists () {
  local path="${1}"
  
  if [[ ! -f "${path}" ]]; then
    return 1
  fi

  return 0
}

# Checks if the file with the given path does
# not exist.
# Arguments:
#  path: the path of a file
# Returns:
#  0 if file not exists otherwise 1.
file_not_exists () {
   file_exists "${1}" && return 1 || return 0
}

# Checks if the directory with the given path exists.
# Arguments:
#  path: the path of a directory
# Returns:
#  0 if directory exists otherwise 1.
directory_exists () {
  local path="${1}"

  if [[ ! -d "${path}" ]]; then
    return 1
  fi

  return 0
}

# Checks if the directory with the given path not exists.
# Arguments:
#  path: the path of a directory
# Returns:
#  0 if directory not exists otherwise 1.
directory_not_exists () {
 directory_exists "${1}" && return 1 || return 0
}

# Checks if the symlink with the given path exists.
# Arguments:
#  path: a symlink path
# Returns:
#  0 if symlink exists otherwise 1.
symlink_exists () {
  local path="${1}"

  if [[ ! -L "${path}" ]]; then
    return 1
  fi

  return 0
}

# Checks if the symlink with the given path not exists.
# Arguments:
#  path: a symlink path
# Returns:
#  0 if symlink not exists otherwise 1.
symlink_not_exists () {
  symlink_exists "${1}" && return 1 || return 0
}

# Checks if the given path is a block device.
# Arguments:
#  path: any path
# Returns:
#  0 if path is block device otherwise 1.
is_block_device () {
  local path="${1}"
  
  if [[ ! -b "${path}" ]]; then
    return 1
  fi

  return 0
}

# Checks if the given path is not a block device.
# Arguments:
#  path: any path
# Returns:
#  0 if path is not block device otherwise 1.
is_not_block_device () {
  is_block_device "${1}" && return 1 || return 0
}

# Checks if the given value is a valid date.
# Arguments:
#  value: a date value
# Returns:
#  0 if value is date otherwise 1.
is_date () {
  local value="${1}"

  if not_match "${value}" '^[0-9]{4}-[0-9]{2}-[0-9]{2}$'; then
    return 1
  fi
  
  date -d "${value}" &> /dev/null
  
  if has_failed; then
    return 1
  fi

  return 0
}

# Checks if the given value is not a valid date.
# Arguments:
#  value: a date value
# Returns:
#  0 if value is not date otherwise 1.
is_not_date () {
  is_date "${1}" && return 1 || return 0
}

# Checks if the given value equals to yes.
# Arguments:
#  value: any value
# Returns:
#  0 if value is yes otherwise 1.
is_yes () {
  local value="${1}"

  if not_match "${value}" '^(y|yes)$'; then
    return 1
  fi

  return 0
}

# Checks if the given value equals to not yes.
# Arguments:
#  value: any value
# Returns:
#  0 if value is not yes otherwise 1.
is_not_yes () {
  is_yes "${1}" && return 1 || return 0
}

# Checks if the given value equals to on.
# Arguments:
#  value: any value
# Returns:
#  0 if value is on otherwise 1.
is_on () {
  local value="${1}"

  if not_equals "${value}" 'on'; then
    return 1
  fi

  return 0
}

# Checks if the given value equals to not on.
# Arguments:
#  value: any value
# Returns:
#  0 if value is not on otherwise 1.
is_not_on () {
  is_on "${1}" && return 1 || return 0
}

# Checks if the given value equals to off.
# Arguments:
#  value: any value
# Returns:
#  0 if value is off otherwise 1.
is_off () {
  local value="${1}"

  if not_equals "${value}" 'off'; then
    return 1
  fi

  return 0
}

# Checks if the given value equals to not off.
# Arguments:
#  value: any value
# Returns:
#  0 if value is not off otherwise 1.
is_not_off () {
  is_off "${1}" && return 1 || return 0
}

# Checks if the given value is a valid on/off toggle.
# Arguments:
#  value: any value
# Returns:
#  0 if value is either on or off otherwise 1.
is_toggle () {
  local value="${1}"

  if is_not_on "${value}" && is_not_off "${value}"; then
    return 1
  fi

  return 0
}

# Checks if the given value is not a valid on/off toggle.
# Arguments:
#  value: any value
# Returns:
#  0 if value is neither on nor off otherwise 1.
is_not_toggle () {
  is_toggle "${1}" && return 1 || return 0
}

# Checks if the given value or expression is true,
# where expression could be any mathematical comparison
# like 0 < 5 < 10 or so.
# Arguments:
#  value: any boolean value or expression
# Returns:
#  0 if value is true otherwise 1.
is_true () {
  local value="${1}"

  local result='false'
  result="$(kalker -p 100 "${value}")" || return 1

  if not_equals "${result}" 'true'; then
    return 1
  fi

  return 0
}

# Checks if the given value or expression is not true,
# where expression could be any mathematical comparison
# like 0 < 5 < 10 or so.
# Arguments:
#  value: any boolean value or expression
# Returns:
#  0 if value is not true otherwise 1.
is_not_true () {
  is_true "${1}" && return 1 || return 0
}

# Checks if the given value or expression is false,
# where expression could be any mathematical comparison
# like 0 < 5 < 10 or so.
# Arguments:
#  value: any boolean value or expression
# Returns:
#  0 if value is false otherwise 1.
is_false () {
  is_true "${1}" && return 1 || return 0
}

# Checks if the given value or expression is not false,
# where expression could be any mathematical comparison
# like 0 < 5 < 10 or so.
# Arguments:
#  value: any boolean value or expression
# Returns:
#  0 if value is not false otherwise 1.
is_not_false () {
  is_false "${1}" && return 1 || return 0
}

# Checks if the given value is boolean.
# Arguments:
#  value: any value
# Returns:
#  0 if value is boolean otherwise 1.
is_boolean () {
  local value="${1}"
  
  if is_not_true "${value}" && is_not_false "${value}"; then
    return 1
  fi

  return 0
}

# Checks if the given value is not boolean.
# Arguments:
#  value: any value
# Returns:
#  0 if value is not boolean otherwise 1.
is_not_boolean () {
  is_boolean "${1}" && return 1 || return 0
}

# Checks if the given exit status code is non-zero
# which indicates the last command has failed. If no
# code is given the function will consider as exit
# code the current value of $?.
# Arguments:
#  code: an exit status code
# Returns:
#  0 if exit code is non-zero otherwise 1.
has_failed () {
  # Save exit code set by the previous command
  local code=$?

  if is_given "${1}"; then
    code="${1}"
  fi

  if is_true "${code} != 0"; then
    return 0
  fi

  return 1
}

# Checks if the given exit status code is zero
# which indicates the last command has not failed.
# If no code is given the function will consider
# as exit code the current value of $?.
# Arguments:
#  code: an exit status code
# Returns:
#  0 if exit code is zero otherwise 1.
has_not_failed () {
  has_failed "${1}" && return 1 || return 0
}

# Checks if the given value is matching with the given regex.
# Arguments:
#  value: any value
#  re:    a regular expression
# Returns:
#  0 if there is match otherwise 1.
match () {
  local value="${1}"
  local re="${2}"

  if is_not_given "${value}" || is_not_given "${re}"; then
    return 1
  fi

  if [[ ! "${value}" =~ ${re} ]]; then
    return 1
  fi

  return 0
}

# Checks if the given value is not matching with the given regex.
# Arguments:
#  value: any value
#  re:    a regular expression
# Returns:
#  0 if there is not match otherwise 1.
not_match () {
  match "${1}" "${2}" && return 1 || return 0
}

# Checks if the given values are equal.
# Arguments:
#  a: any value
#  b: any value
# Returns:
#  0 if value a equals b otherwise 1.
equals () {
  local a="${1}"
  local b="${2}"

  if [[ "${a}" != "${b}" ]]; then
    return 1
  fi

  return 0
}

# Checks if the given values are not equal.
# Arguments:
#  a: any value
#  b: any value
# Returns:
#  0 if value a not equals b otherwise 1.
not_equals () {
  equals "${1}" "${2}" && return 1 || return 0
}

# Calculates the given arithmetic expression.
# Arguments:
#  expression: any arithmetic expression
# Outputs:
#  The result of the arithmetic expression.
calc () {
  local expression="${1}"

  local result=0
  result="$(kalker -p 100 "${expression}")" || return 1

  # Make sure scientific formats like 3e-9 convert to regular form
  result="$(echo "${result}" | awk '{print $0 + 0}')" || return 1

  echo "${result}"
}

