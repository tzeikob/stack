#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/cloud/commands

# Shows the help message.
# Arguments:
#  mode: once or none
# Outputs:
#  A long help message.
show_help () {
  if [[ "${1}" == "once" ]]; then
    echo 'Usage: cloud COMMAND [OBJECT] [ARGUMENTS]...'

    echo -e '\nCOMMANDS'
    printf ' %-15s %s\n' \
      'help' 'Show this help message.' \
      '' '' \
      'mount remotes' 'Mount all synced cloud remotes.'

    return 0
  fi

  echo 'Usage: COMMAND [OBJECT] [ARGUMENTS]...'
  
  echo -e '\nCOMMANDS'
  printf ' %-30s %s\n' \
    'help' 'Show this help message.' \
    '' '' \
    'list remotes [service]' 'List all synced remotes by service.' \
    'sync remote <service> <name>' 'Sync a remote service, where service' \
    '' 'could be drive or dropbox.' \
    'delete remote [<name>]' 'Delete a synced remote service.' \
    '' '' \
    'mount remote [<name>]' 'Mount an already synced remote.' \
    'unmount remote [<name>]' 'Unmount an already mounted remote.'
}

loop () {
  clear

  while true; do
    prompt cloud && history -s "${REPLY}"

    set -f
    set_separator line
    local args=($(xargs -n1 <<< "${REPLY}"))
    restore_separator && set +f

    local cmd="${args[0]}"
    local obj="${args[1]}"

    case "${cmd}${obj:+ ${obj}}" in
      'help') show_help;;
      'list remotes') list_remotes "${args[2]}";;
      'sync remote drive') sync_drive "${args[3]}";;
      'sync remote dropbox') sync_dropbox "${args[3]}";;
      'delete remote') delete_remote "${args[2]}";;
      'mount  remote') mount_remote "${args[2]}";;
      'unmount remote') unmount_remote "${args[2]}";;
      'clear') clear && continue;;
      'quit') break;;
      '') continue;;
      *)
        echo 'Ooops, invalid or unknown command!'
        $(return 2);;
    esac && success || fail

    REPLY=''
  done

  clear
}

once () {
  local cmd="${1}"
  local obj="${2}"

  case "${cmd}${obj:+ ${obj}}" in
    'help') show_help once;;
    'mount remotes') mount_all;;
    *)
      echo 'Ooops, invalid or unknown command'
      return 2;;
  esac
}

if [[ $# -eq 0 ]]; then
  loop
else
  once "$@" && success || fail
fi

