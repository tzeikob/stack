#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/cloud/commands

# Shows the help message.
# Arguments:
#  mode: once or none
# Outputs:
#  A long help message.
show_help () {
  if [[ "${1}" == "once" ]]; then
    echo 'Usage: cloud COMMAND [OBJECT] [ARGUMENTS]...'

    echo -e '\nCOMMANDS'
    printf ' %-15s %s\n' \
      'help' 'Show this help message.' \
      '' '' \
      'mount remotes' 'Mount all synced cloud remotes.'

    return 0
  fi

  echo 'Usage: COMMAND [OBJECT] [ARGUMENTS]...'
  
  echo -e '\nCOMMANDS'
  printf ' %-30s %s\n' \
    'help' 'Show this help message.' \
    '' '' \
    'list remotes [service]' 'List all synced remotes by service.' \
    'sync remote <service> <name>' 'Sync a remote service, where service' \
    '' 'could be drive or dropbox.' \
    'delete remote [<name>]' 'Delete a synced remote service.' \
    '' '' \
    'mount remote [<name>]' 'Mount an already synced remote.' \
    'unmount remote [<name>]' 'Unmount an already mounted remote.'
}

loop () {
  clear

  while true; do
    prompt cloud && history -s "${REPLY}"

    set -f
    set_separator line
    local cmd=($(xargs -n1 <<< "${REPLY}"))
    restore_separator && set +f

    if [[ "${cmd[0]}" == "help" ]]; then
      show_help
      continue
    elif [[ "${cmd[0]}" == "clear" ]]; then
      clear
      continue
    elif [[ "${cmd[0]}" == "quit" ]]; then
      break
    elif [[ -z "${cmd[0]}" ]]; then
      continue
    fi

    case "${cmd[0]}" in
      list)
        case "${cmd[1]}" in
          remotes) list_remotes "${cmd[2]}";;
          *) echo 'Invalid or unknown command';;
        esac;;
      sync)
        case "${cmd[1]}" in
          remote)
            case "${cmd[2]}" in
              drive) sync_drive "${cmd[3]}";;
              dropbox) sync_dropbox "${cmd[3]}";;
              *) echo 'Invalid or unknown service';;
            esac;;
          *) echo 'Invalid or unknown command';;
        esac;;
      delete)
        case "${cmd[1]}" in
          remote) delete_remote "${cmd[2]}";;
          *) echo 'Invalid or unknown command';;
        esac;;
      mount)
        case "${cmd[1]}" in
          remote) mount_remote "${cmd[2]}";;
          *) echo 'Invalid or unknown command';;
        esac;;
      unmount)
        case "${cmd[1]}" in
          remote) unmount_remote "${cmd[2]}";;
          *) echo 'Invalid or unknown command';;
        esac;;
      *) echo 'Unknown or invalid command';; 
    esac

    if [[ $? -eq 1 ]]; then
      echo 'An unknown error has occurred'
    fi

    REPLY=''
  done

  clear
}

once () {
  case "${1}" in
    help) show_help once;;
    mount)
      case "${2}" in
        remotes) mount_all || abort;;
        *) abort 'Invalid or unknown command';;
      esac;;
    *) abort 'Invalid or unknown command';;
  esac

  if [[ $? -ne 0 ]]; then
    abort
  fi
}

if [[ $# -eq 0 ]]; then
  loop
else
  once "$@"
fi

