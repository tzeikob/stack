#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/cloud/commands

# Shows the help message.
# Arguments:
#  mode: loop or once
# Outputs:
#  A long help message.
show_help () {
  local mode="${1}"

  if equals "${mode}" 'once'; then
    echo 'Usage: cloud [OPTIONS] COMMAND [OBJECT] [ARGUMENTS]...'
    
    echo -e '\nOPTIONS'
    printf ' %-10s %s\n' \
      '-h' 'Show this help message.' \
      '-q' 'Do not play beep sounds.' \
      '-s' 'Run on script mode.'
  
    echo -e '\nCOMMANDS'
  else
    echo 'Usage: COMMAND [OBJECT] [ARGUMENTS]...'

    echo -e '\nCOMMANDS'
    printf ' %-48s %s\n' \
      'help' 'Show this help message.'
  fi

  printf ' %-48s %s\n' \
    'list remotes <service>' 'List all synced remotes by service name.' \
    '' '' \
    'sync drive <name> <client> <secret> <folder>' 'Sync a google drive remote service.' \
    'sync dropbox <name> <app> <secret>' 'Sync a dropbox remote service.' \
    'delete remote <name>' 'Delete a synced remote service.' \
    '' '' \
    'mount remote <name>' 'Mount a synced remote.' \
    'unmount remote <name>' 'Unmount a mounted remote.' \
    'mount remotes' 'Mount all synced remotes.'
}

run () {
  local opt=''

  while getopts ':hqs' opt; do
    case "${opt}" in
     'h')
        set_quiet_mode 'on'
        show_help once
        return 0;;
     'q') set_quiet_mode 'on';;
     's') set_script_mode 'on';;
     *)
      echo "Ooops, invalid or unknown option -${OPTARG}!"
      beep 2
      return $?;;
    esac
  done

  # Collect command arguments
  shift $((OPTIND-1))
  local args_len=$#

  if is_true "${args_len} = 0" && on_script_mode; then
    echo 'Option -s cannot be used in loop mode'
    beep 2
    return $?
  fi

  local mode='once'
  if is_true "${args_len} = 0"; then
    mode='loop'
    clear
  fi

  while true; do
    if equals "${mode}" 'loop'; then
      prompt cloud
    else
      REPLY="$@"
    fi

    set -f
    set_separator line
    local args=($(xargs -n1 <<< "${REPLY}"))
    restore_separator && set +f
    REPLY=''

    local cmd="${args[0]}"
    local obj="${args[1]}"

    if equals "${mode}" 'loop'; then
      case "${cmd}${obj:+ ${obj}}" in
        'help') clear && show_help && continue;;
        'clear') clear && continue;;
        'quit') break;;
        '') continue;;
      esac
    fi

    case "${cmd}${obj:+ ${obj}}" in
      'list remotes') list_remotes "${args[2]}";;
      'sync drive') sync_drive "${args[2]}" "${args[3]}" "${args[4]}" "${args[5]}";;
      'sync dropbox') sync_dropbox "${args[2]}" "${args[3]}" "${args[4]}";;
      'delete remote') delete_remote "${args[2]}";;
      'mount remote') mount_remote "${args[2]}";;
      'unmount remote') unmount_remote "${args[2]}";;
      'mount remotes') mount_all;;
      *)
        echo 'Ooops, invalid or unknown command!'
        $(return 2);;
    esac

    # Save exit status code of the last executed cmd
    local exit_code=$?
  
    if is_true "${exit_code} = 1"; then
      echo 'Ooops, an unknwon error occurred!'
    fi

    on_loud_mode && beep "${exit_code}"

    if equals "${mode}" 'once'; then
      return ${exit_code}
    fi
  done

  clear
}

run "$@"

