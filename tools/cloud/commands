#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/cloud/helpers

# Shows the list of remotes matching the given service.
# Arguments:
#  service: a service name (drive, dropbox e.g.)
# Outputs:
#  A list of remotes.
list_remotes () {
  local service="${1}"

  local query=''
  query="[.[]|select(.service|test(\"${service}\"; \"i\"))]"

  local remotes=''
  remotes="$(find_remotes | jq -cer "${query}")" || return $?

  local len=0
  len="$(count "${remotes}")" || return 1
    
  if is_true "${len} = 0"; then
    echo -e "No ${service:-\b} remotes found"
    return 0
  fi

  local query=''
  query+='Name:     \(.name)\n'
  query+='Service:  \(.service)\n'
  query+='Mounted:  \(.is_mounted)'
  query+='\(if .is_mounted then "\nMount:    \(.mount_point)" else "" end)'
  query="[.[]|\"${query}\"]|join(\"\n\n\")"

  echo "${remotes}" | jq -cer "${query}" || return 1
}

# Creates a new google drive remote with the given name.
# Arguments:
#  name:   the name of the remote
#  client: the google client id
#  secret: the client secret
#  folder: the root folder id
sync_drive () {
  local name="${1}"
  local client="${2}"
  local secret="${3}"
  local folder="${4}"

  if is_not_given "${name}"; then
    on_script_mode &&
      echo 'Missing the remote name' && return 2

    ask 'Enter a remote name:' || return $?
    require 'Remote name is required' || return 2
    name="${REPLY}"
  fi
  
  if exists_remote "${name}"; then
    echo "Remote ${name} already exists"
    return 2
  fi
  
  if is_not_given "${client}"; then
    on_script_mode &&
      echo 'Missing the client id' && return 2

    ask 'Enter the client id:' || return $?
    require 'Client id is required' || return 2
    client="${REPLY}"
  fi
  
  if is_not_given "${secret}"; then
    on_script_mode &&
      echo 'Missing the client secret' && return 2

    ask 'Enter the client secret:' || return $?
    require 'Client secret is required' || return 2
    secret="${REPLY}"
  fi
  
  if is_not_given "${folder}" && not_on_script_mode; then
    ask 'Enter the root folder id [none]:' || return $?
    folder="${REPLY}"
  fi

  echo 'Go to browser and accept access permssions...'

  rclone config create "${name}" drive scope=drive client_id="${client}" \
    client_secret="${secret}" root_folder_id="${folder}" &> /dev/null

  if has_failed; then
    echo 'Failed to sync drive remote'
    rclone config delete "${name}"
    return 2
  fi

  echo "Drive remote ${name} synced"
}

# Creates a new dropbox remote with the given name.
# Arguments:
#  name:   the name of the remote
#  app:    the dropbox application key
#  secret: the application secret
sync_dropbox () {
  local name="${1}"
  local app="${2}"
  local secret="${3}"

  if is_not_given "${name}"; then
    on_script_mode &&
      echo 'Missing the remote name' && return 2

    ask 'Enter the remote name:' || return $?
    require 'Remote name is required' || return 2
    name="${REPLY}"
  fi
  
  if exists_remote "${name}"; then
    echo "Remote ${name} already exists"
    return 2
  fi

  if is_not_given "${app}"; then
    on_script_mode &&
      echo 'Missing the application key' && return 2

    ask 'Enter the application key:' || return $?
    require 'Application key is required' || return 2
    app="${REPLY}"
  fi

  if is_not_given "${secret}"; then
    on_script_mode &&
      echo 'Missing the application secret' && return 2

    ask 'Enter the application secret:' || return $?
    require 'Application secret is required' || return 2
    secret="${REPLY}"
  fi

  echo 'Go to browser and accept access permssions...'

  rclone config create "${name}" dropbox \
    client_id="${app}" client_secret="${secret}" &> /dev/null

  if has_failed; then
    echo 'Failed to sync dropbox remote'
    rclone config delete "${name}"
    return 2
  fi

  echo "Dropbox remote ${name} synced"
}

# Deletes the remote with the given name.
# Arguments:
#  name: the name of a remote
delete_remote () {
  local name="${1}"
  
  if is_not_given "${name}"; then
    on_script_mode &&
      echo 'Missing the remote name' && return 2

    pick_remote unmounted || return $?
    require 'Remote name is required' || return 2
    name="${REPLY}"
  fi
  
  if not_exists_remote "${name}"; then
    echo "Remote ${name} not found"
    return 2
  elif is_remote_mounted "${name}"; then
    echo 'Cannot delete a mounted remote'
    return 2
  fi

  if not_on_script_mode; then
    echo "Remote ${name} will be deleted!"
    confirm 'Do you realy want to proceed?' || return $?
    require 'Confirmation is required' || return 2
    
    if is_not_yes "${REPLY}"; then
      echo 'Deletion operation is canceled'
      return 2
    fi
  fi

  rclone config delete "${name}"

  if has_failed; then
    echo 'Failed to delete remote'
    return 2
  fi
  
  echo "Remote ${name} has been deleted"
}

# Mounts the remote with the given name to the disk.
# Arguments:
#  name: the name of the remote
mount_remote () {
  local name="${1}"

  if is_not_given "${name}"; then
    on_script_mode &&
      echo 'Missing the remote name' && return 2

    pick_remote unmounted || return $?
    require 'Remote name is required' || return 2
    name="${REPLY}"
  fi
  
  if not_exists_remote "${name}"; then
    echo "Remote ${name} not found"
    return 2
  elif is_remote_mounted "${name}"; then
    echo "Remote ${name} is already mounted"
    return 2
  fi

  echo "Mounting remote ${name}..."

  local mount_folder="${HOME}/mounts/cloud/${name}"

  mkdir -p "${mount_folder}" '/tmp/rclone' &&
  rclone mount "${name}:" "${mount_folder}" \
    --umask=002 --gid=$(id -g) --uid=$(id -u) --timeout=1h \
    --poll-interval=15s --dir-cache-time=1000h --vfs-cache-mode=full \
    --vfs-cache-max-size=150G --vfs-cache-max-age=12h \
    --log-level=INFO --log-file="/tmp/rclone/${name}.log" --daemon

  if has_failed; then
    # Remove the dangling root mount folder if it is empty
    find "${mount_folder}" -maxdepth 0 -empty -exec rm -rf {} \;

    echo 'Failed to mount remote'
    return 2
  fi

  echo "Remote ${name} mounted to ${mount_folder}"
}

# Unmounts the remote with the given name from the disk.
# Arguments:
#  name: the name of the remote
unmount_remote () {
  local name="${1}"

  if is_not_given "${name}"; then
    on_script_mode &&
      echo 'Missing the remote name' && return 2
    
    pick_remote mounted || return $?
    require 'Remote name is required' || return 2
    name="${REPLY}"
  fi
  
  if not_exists_remote "${name}"; then
    echo "Remote ${name} not found"
    return 2
  elif is_not_remote_mounted "${name}"; then
    echo "Remote ${name} is not mounted"
    return 2
  fi

  echo "Unmounting remote ${name}..."

  local remote=''
  remote="$(find_remote "${name}")" || return 1

  local mount_point=''
  mount_point="$(get "${remote}" '.mount_point')" || return 1

  fusermount -uz "${mount_point}"

  if has_failed; then
    echo 'Failed to unmount remote'
    return 2
  fi

  # Remove root folder of the mount only if it is empty
  find "${mount_point}" -maxdepth 0 -empty -exec rm -rf {} \;

  echo "Remote ${name} has been unmounted"
}

# Mounts all the synced remotes.
mount_all () {
  local remotes=''
  remotes="$(find_remotes)" || return $?

  local len=0
  len="$(count "${remotes}")" || return 1

  if is_true "${len} = 0"; then
    echo 'No remotes have been found'
    return 2
  fi

  # Iterate over remote names and mount remotes one by one
  remotes="$(echo "${remotes}" | jq -cr '.[]|.name')" || return 1

  local failed='false'
  local remote=''

  while read -r remote; do
    mount_remote "${remote}"

    if has_failed; then
      echo "Failed to mount remote ${remote}"
      failed='true'
      continue
    fi
  
    echo "Remote ${remote} has been mounted"
  done <<< "${remotes}"

  if is_true "${failed}"; then
    echo 'Some remotes failed to be mounted'
    return 2
  fi

  echo 'All remotes have been mounted'
}

