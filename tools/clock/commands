#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/clock/helpers

# Shows the current status of system clock.
# Arguments:
#  None
# Outputs:
#  A verbose list of text data.
show_status () {
  local query=''
  query+='Local Time:      \(.local_time)\n'
  query+='Universal Time:  \(.universal_time)\n'
  query+='RTC Time:        \(.rtc_time)\n'
  query+='Time Zone:       \(.time_zone)\n'
  query+='Synced:          \(.system_clock_synchronized)\n'
  query+='NTP Service:     \(.ntp_service)\n'
  query+='RTC Local TZ:    \(.rtc_in_local_tz)\n'
  query+='Epoch UTC:       \(.epoch_utc)'

  timedatectl | jc --timedatectl | jq -cer "\"${query}\""

  if [[ $? -ne 0 ]]; then
    echo 'Unable to resolve date time status'
    return 2
  fi

  local ntp_status=''
  ntp_status="$(timedatectl timesync-status 2> /dev/null)"

  if [[ $? -eq 0 ]]; then
    local query=''
    query+='Server:          \(.server)\n'
    query+='Poll Interval:   \(.poll_interval)\n'
    query+='Leap:            \(.leap)'
    
    echo "${ntp_status}" | jc --timedatectl | jq -cer "\"${query}\""
  fi
}

# Activates or deactivates the NTP service.
# Arguments:
#  status: on or off
set_ntp () {
  local status="${1}"

  if [[ ! "${status}" =~ ^(on|off)$ ]]; then
    echo 'Invalid status value'
    return 2
  fi

  local status_name='enabled'
  [[ "${status}" == "off" ]] && status_name='disabled'

  timedatectl set-ntp "${status}"

  if [[ $? -ne 0 ]]; then
    echo "Failed to ${status_name} the NTP service"
    return 2
  fi

  echo "NTP service has been ${status_name}"
}

# Sets the timezone to the given region.
# Arguments:
#  timezone: a timezone in region/city form
set_timezone () {
  local timezone="${1}"

  if [[ -z "${timezone}" ]]; then
    pick_timezone 'Select a timezone:' || return $?
    timezone="${REPLY}"
  fi

  if ! timedatectl list-timezones | grep -qw "${timezone}"; then
    echo 'Invalid timezone value'
    return 2
  fi

  timedatectl set-timezone "${timezone}"

  if [[ $? -ne 0 ]]; then
    echo 'Failed to set the timezone'
    return 2
  fi
  
  echo "Timezone set to ${timezone}"
}

# Sets the system time to the given hours and minutes.
# Arguments:
#  time: the time in HH:mm form
set_time () {
  local time="${1}"

  if [[ ! "${time}" =~ ^[0-9][0-9]:[0-9][0-9]$ ]]; then
    echo 'Invalid time value'
    return 2
  fi

  local hour=$(echo "${time}" | cut -d ':' -f 1)
  local min=$(echo "${time}" | cut -d ':' -f 2)

  if ((${hour} > 23)); then
    echo 'Hour value is out of range'
    return 2
  fi

  if ((${min} > 59)); then
    echo 'Minute value is out of range'
    return 2
  fi

  timedatectl set-time "${time}"

  if [[ $? -ne 0 ]]; then
    echo 'Failed to set the time'
    return 2
  fi

  echo "Time set to ${time}"
}

# Sets the system date to the given day, month and year.
# Arguments:
#  date: the date in yyyy-mm-dd form
set_date () {
  local date="${1}"

  if [[ ! "${date}" =~ ^[0-9][0-9]([0-9][0-9])?-[0-9][0-9]-[0-9][0-9]$ ]]; then
    echo 'Invalid date value'
    return 2
  fi

  local year=$(echo "${date}" | cut -d '-' -f 1)
  local month=$(echo "${date}" | cut -d '-' -f 2)
  local day=$(echo "${date}" | cut -d '-' -f 3)

  if ((${month} == 0 || ${month} > 12)) ; then
    echo 'Month value is out of range'
    return 2
  fi

  if ((${day} == 0 || ${day} > 31)); then
    echo 'Day value is out of range'
    return 2
  fi

  local time=$(date +"%H:%M:%S")

  timedatectl set-time "${date} ${time}"

  if [[ $? -ne 0 ]]; then
    echo 'Failed to set the date'
    return 2
  fi

  echo "Date set to ${date}"
}

# Sets the hardware clock to local or UTC time.
# Arguments:
#  mode: local or utc
set_rtc () {
  local mode="${1}"

  if [[ ! "${mode}" =~ ^(local|utc)$ ]]; then
    echo 'Invalid rtc mode value'
    return 2
  fi

  if [[ "${mode}" == "local" ]]; then
    timedatectl --adjust-system-clock set-local-rtc on
  else
    timedatectl --adjust-system-clock set-local-rtc off
  fi

  if [[ $? -ne 0 ]]; then
    echo 'Failed to set RTC'
    return 2
  fi

  echo "RTC set to ${mode} time"
}

# Synchronizes the hardware clock from the system clock.
# Arguments:
#  None
sync_rtc () {
  sudo hwclock --systohc --utc

  if [[ $? -ne 0 ]]; then
    echo 'Failed to sync the hardware clock'
    return 2
  fi

  echo 'Hardware clock synced from the system clock'
}

