#!/bin/bash

set -o pipefail

source /opt/stack/utils

# Shows a menu asking the user to select a timezone.
# Arguments:
#  prompt: a prompt text line
# Outputs:
#  A menu of timezones.
pick_timezone () {
  local prompt="${1}"
  
  local timezones=''
  timezones="$(timedatectl list-timezones | awk '{
    print "{\"key\":\""$0"\",\"value\":\""$0"\"},"
  }')" || return 1

  # Remove the extra comma after the last array element
  timezones="[${timezones::-1}]"

  local len=0
  len=$(count "${timezones}") || return 1

  if [[ ${len} -eq 0 ]]; then
    echo 'No timezones have found'
    return 2
  fi
  
  pick_one "${prompt}" "${timezones}" vertical || return $?
}

# Checks if the given timezone name is valid or not.
# Arguments:
#  name: the name of a timezone
# Returns:
#  0 if timezone is valid otherwise 1.
validate_timezone () {
  local name="${1}"

  if ! timedatectl list-timezones | grep -qw "${name}"; then
    return 1
  fi

  return 0
}

# Checks if the given time is valid.
# Arguments:
#  time: 24h time in hh:mm form
# Returns:
#  0 if time is valid otherwise 1.
validate_time () {
  local time="${1}"

  if [[ ! "${time}" =~ ^[0-9][0-9]:[0-9][0-9]$ ]]; then
    return 1
  fi

  local hour=$(echo "${time}" | cut -d ':' -f 1)
  local min=$(echo "${time}" | cut -d ':' -f 2)

  if ((${hour} > 23)); then
    return 1
  fi

  if ((${min} > 59)); then
    return 1
  fi

  return 0
}

# Checks if the given date is valid.
# Arguments:
#  date: a date in yyyy-mm-dd form
# Returns:
#  0 if date is valid otherwise 1.
validate_date () {
  local date="${1}"
  
  if [[ ! "${date}" =~ ^[0-9][0-9]([0-9][0-9])?-[0-9][0-9]-[0-9][0-9]$ ]]; then
    return 1
  fi

  local year=$(echo "${date}" | cut -d '-' -f 1)
  local month=$(echo "${date}" | cut -d '-' -f 2)
  local day=$(echo "${date}" | cut -d '-' -f 3)

  if ((${month} == 0 || ${month} > 12)) ; then
    return 1
  fi

  if ((${day} == 0 || ${day} > 31)); then
    return 1
  fi

  return 0
}

