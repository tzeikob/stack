#!/bin/bash

set -o pipefail

source /opt/stack/utils

# Shows a menu asking the user to select a timezone.
# Arguments:
#  prompt: a prompt text line
# Outputs:
#  A menu of timezones.
pick_timezone () {
  local prompt="${1}"
  
  local timezones=''
  timezones="$(timedatectl list-timezones | awk '{
    print "{\"key\":\""$0"\",\"value\":\""$0"\"},"
  }')" || return 1

  # Remove the extra comma after the last array element
  timezones="${timezones:+${timezones::-1}}"

  timezones="[${timezones}]"

  local len=0
  len=$(count "${timezones}") || return 1

  if is_true "${len} = 0"; then
    echo 'No timezones have found'
    return 2
  fi
  
  pick_one "${prompt}" "${timezones}" vertical || return $?
}

# Checks if the given timezone name is valid.
# Arguments:
#  name: the name of a timezone
# Returns:
#  0 if timezone is valid otherwise 1.
is_timezone () {
  local name="${1}"
  
  timedatectl list-timezones | grep -qw "${name}"
  
  if has_failed; then
    return 1
  fi

  return 0
}

# An inverse version of is_timezone.
is_not_timezone () {
  is_timezone "${1}" && return 1 || return 0
}

# Checks if the given mode is a valid RTC mode.
# Arguments:
#  mode: an rtc mode value
# Returns:
#  0 if mode is valid otherwise 1.
is_rtc_mode () {
  local mode="${1}"

  if not_match "${mode}" '^(local|utc)$'; then
    return 1
  fi

  return 0
}

# An inverse version of is_rtc_mode.
is_not_rtc_mode () {
  is_rtc_mode "${1}" && return 1 || return 0
}

