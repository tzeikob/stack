#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/displays/commands

# Shows the help message.
# Arguments:
#  mode: loop or once
# Outputs:
#  A long help message.
show_help () {
  local mode="${1:-"once"}"

  if [[ "${mode}" == "once" ]]; then
    echo 'Usage: displays [OPTIONS] COMMAND [OBJECT] [ARGUMENTS]...'
    
    echo -e '\nOPTIONS'
    printf ' %-10s %s\n' \
      '-h' 'Show this help message.' \
      '-q' 'Do not play beep sounds.' \
      '-s' 'Run on script mode.'
   
    echo -e '\nCOMMANDS'
  else
    echo 'Usage: COMMAND [OBJECT] [ARGUMENTS]...'

    echo -e '\nCOMMANDS'
    printf ' %-48s %s\n' \
      'help' 'Show this help message.'
  fi

  printf ' %-48s %s\n' \
    'show status' 'Show a report of the Xorg server and active outputs.' \
    'show logs <lines>' 'Show the last logs of the Xorg server.' \
    '' '' \
    'list outputs <status>' 'List all outputs or those with status,' \
    '' 'connected, disconnected, active, inactive, primary.' \
    'show output <name>' 'Show the data of an output.' \
    '' '' \
    'set mode <name> <resolution> <rate>' 'Set the mode of an output.' \
    'set primary <name>' 'Set an output as primary.' \
    'set on|off <name>' 'Activate or de-activate an output.' \
    'rotate output <name> <mode>' 'Rotate an output to normal, right, left or inverted.' \
    'reflect output <name> <mode>' 'Reflect an output to normal, x, y or xy.' \
    'mirror output <name> <resolution> <targets>' 'Mirror an output to other outputs.' \
    '' '' \
    'set layout <mode> <outputs>' 'Set the layout of active outputs to row-2, col-2, row-3,' \
    '' 'col-3, gamma-3, gamma-rev-3, lambda-3 or lambda-rev-3,' \
    '' 'grid-4, taph-4, taph-rev-4, taph-right-4, taph-left-4.' \
    'save layout' 'Save the current layout of active outputs.' \
    'list layouts' 'List all layouts.' \
    'delete layout <index>' 'Delete a layout.' \
    'restore layout' 'Restore the layout matching the current mapping.' \
    'fix layout' 'Fix the positioning of the current layout.' \
    '' '' \
    'set color <output> <profile>' 'Set the color of a display connected to an output.' \
    'reset color <output>' 'Reset the color of a display connected to an output.' \
    'list colors' 'List all saved color settings per display.' \
    'delete color <index>' 'Delete a saved color setting.' \
    'restore colors' 'Restore color settings of any active displays.'
}

run () {
  local opt=''

  while getopts ':hqs' opt; do
    case "${opt}" in
     'h')
        show_help once
        return 0;;
     'q') QUIET='true';;
     's') ON_SCRIPT_MODE='true';;
     *)
      echo "Ooops, invalid or unknown option -${OPTARG}!"
      $(exit 2) || beep
      return $?;;
    esac
  done

  shift $((OPTIND-1))

  local mode='once'
  if [[ $# -eq 0 ]]; then
    mode='loop'
    clear
  fi

  while true; do
    if [[ "${mode}" == "loop" ]]; then
      prompt displays
    else
      REPLY="$@"
    fi

    set -f
    set_separator line
    local args=($(xargs -n1 <<< "${REPLY}"))
    restore_separator && set +f
    REPLY=''

    local cmd="${args[0]}"
    local obj="${args[1]}"

    if [[ "${mode}" == "loop" ]]; then
      case "${cmd}${obj:+ ${obj}}" in
        'help') clear && show_help loop && continue;;
        'clear') clear && continue;;
        'quit') break;;
        '') continue;;
      esac
    fi

    case "${cmd}${obj:+ ${obj}}" in
      'show status') show_status;;
      'show logs') show_logs "${args[2]}";;
      'show output') show_output "${args[2]}";;
      'list outputs') list_outputs "${args[2]}";;
      'list colors') list_colors;;
      'list layouts') list_layouts;;
      'set layout') set_layout "${args[2]}" "${args[@]:3}" && beep;;
      'set mode') set_mode "${args[2]}" "${args[3]}" "${args[4]}" && beep;;
      'set primary') set_primary "${args[2]}" && beep;;
      'set on') set_on "${args[2]}" && beep;;
      'set off') set_off "${args[2]}" && beep;;
      'set color') set_color "${args[2]}" "${args[3]}" && beep;;
      'reset color') reset_color "${args[2]}" && beep;;
      'save layout') save_layout && beep;;
      'delete layout') delete_layout "${args[2]}" && beep;;
      'delete color') delete_color "${args[2]}" && beep;;
      'restore layout') restore_layout && beep;;
      'restore colors') restore_colors && beep;;
      'rotate output') rotate_output "${args[2]}" "${args[3]}" && beep;;
      'reflect output') reflect_output "${args[2]}" "${args[3]}" && beep;;
      'mirror output') mirror_output "${args[2]}" "${args[3]}" "${args[@]:4}" && beep;;
      'fix layout') fix_layout && beep;;
      *)
        echo 'Ooops, invalid or unknown command!'
        $(return 2);;
    esac || beep

    local exit_code=$?
    if [[ "${mode}" == "once" ]]; then
      return ${exit_code}
    fi
  done

  clear
}

run "$@"

