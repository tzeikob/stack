#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/trash/helpers

# Show the list of trashed files filtered by the given
# value. If the filter is an integer number the filter
# selects only the files trashed within the given days,
# if the number is prefixed with + the filter selects
# the files trashed more than the given days ago and if
# the filter is a date YYYY-MM-dd the filter selects
# the files trashed the exact given date.
# Arguments:
#  filter: number of days or a certain date
# Outputs:
#  A list of trashed files.
list_files () {
  local filter="${1}"

  local query=''

  if [[ "${filter}" =~ ^[0-9]+$ ]]; then
    query="[.[]|select((now - .epoch) / 86400 < ${filter})]"
  elif [[ "${filter}" =~ ^\+[0-9]+$ ]]; then
    filter="$(echo "${filter}" | tr -d '+')"
    query="[.[]|select((now - .epoch) / 86400 > ${filter})]"
  elif [[ "${filter}" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]] && date -d "${filter}" &> /dev/null; then
    filter="$(date -d ${filter} +%s)"
    query="[.[]|select(${filter} - .epoch_date == 0)]"
  elif [[ -z "${filter}" ]]; then
    query='.'
  else
    echo 'Invalid filter value'
    return 2
  fi

  local files=''
  files="$(find_files | jq -cer "${query}")"

  if [[ $? -ne 0 ]]; then
    echo 'Unable to read trashed files'
    return 2
  fi

  local len=0
  len="$(count "${files}")" || return 1

  if [[ ${len} -eq 0 ]]; then
    echo 'No trashed files have found'
    return 0
  fi

  query='.[]|"\(.date) \(.time) \(.path)"'

  echo "${files}" | jq -cer "${query}" || return 1
}

# Restores trashed files with the given path.
# Arguments:
#  paths: space separated list of file paths
restore_files () {
  local paths=("$@")

  # Find all trashed files
  local trashed_files=''
  trashed_files="$(trash-restore / <<< "" | awk '/^ *[0-9]+ /{
    schema="\"key\": \"%s\","
    schema=schema"\"value\": \"%s\""
    schema="{"schema"},"

    path=""
    for (i = 4; i <= NF; i++) {
      path=path$i
      if (i < NF) path=path" "
    }

    printf schema, $1, path
  }')"

  if [[ $? -ne 0 ]]; then
    echo 'Unable to read trashed files'
    return 2
  fi

  # Remove the extra comma after the last element
  if [[ -n "${trashed_files}" ]]; then
    trashed_files="${trashed_files::-1}"
  fi
  
  trashed_files="[${trashed_files}]"

  local len=0
  len="$(count "${trashed_files}")" || return 1

  if [[ ${len} -eq 0 ]]; then
    echo 'No trashed files found'
    return 2
  fi

  local selected=''

  if [[ ${#paths[@]} -eq 0 ]]; then
    pick_many 'Select which trashed files to restore:' "${trashed_files}" '1,' vertical || return $?
    local picked="${REPLY}"

    if [[ -z "${picked}" ]]; then
      echo 'No trashed files selected'
      return 2
    fi

    picked="$(echo "${picked}" | jq -cer 'join(" ")')" || return 1

    # Refuse to overwrite existing files
    local key=''
    for key in ${picked}; do
      local query=".[]|select(.key == \"${key}\")|.value"

      local path=''
      path="$(echo "${trashed_files}" | jq -cr "${query}")"

      if [[ -f "${path}" ]]; then
        echo "Refused to overwrite file ${path}"
        continue
      fi

      selected+="${key},"
    done

    # Remove extra comma from the last element
    if [[ -n "${selected}" ]]; then
      selected="${selected::-1}"
    fi
  else
    local index=0
    for ((index = 0; index < ${#paths[@]}; index++)); do
      local path="${paths[index]}"

      local query=".[]|select(.value == \"${path}\")|.key"

      local key=''
      key="$(echo "${trashed_files}" | jq -cer "${query}")"

      if [[ $? -ne 0 ]]; then
        echo "File ${path} not found in trash"
        continue
      fi

      if [[ -f "${path}" ]]; then
        echo "Refused to overwrite file ${path}"
        continue
      fi

      selected+="${key},"
    done

    # Discard possible duplicated files
    if [[ -n "${selected}" ]]; then
      selected="[${selected::-1}]"
      selected="$(echo "${selected}" | jq -cr 'unique|join(",")')"
    fi
  fi

  trash-restore / &> /dev/null <<< "${selected}"

  if [[ $? -ne 0 ]]; then
    echo 'Failed to restore trashed files'
    return 2
  fi

  local post_len=0
  post_len="$(find_files | jq -cer 'length')" || return 1
  len=$((len - post_len))

  if [[ ${len} -eq 0 ]]; then
    echo 'No trashed files restored'
    return 2
  fi

  echo "${len} file(s) have been restored"
}

# Removes the trashed files, given as a list of paths.
# Arguments:
#  paths: a space separated list of file paths
remove_files () {
  local paths=("$@")

  local trashed_files=''
  trashed_files="$(find_files)"

  if [[ $? -ne 0 ]]; then
    echo 'Unable to read trashed files'
    return 2
  fi

  local len=0
  len="$(count "${trashed_files}")" || return 1

  if [[ ${len} -eq 0 ]]; then
    echo 'No trashed files found'
    return 2
  fi

  local query='[.[]|{key: .path, value: "\(.date) \(.path)"}]'
  trashed_files="$(echo "${trashed_files}" | jq -cer "${query}")" || return 1
  
  if [[ ${#paths[@]} -eq 0 ]]; then
    pick_many 'Select which trashed files to remove:' "${trashed_files}" '1,' vertical || return $?
    local selected="${REPLY}"

    if [[ -z "${selected}" ]]; then
      echo 'No trashed files selected'
      return 2
    fi

    readarray -t paths < <(echo "${selected}" | jq -cr '.[]')
  fi

  if [[ -z "${FORCED}" ]] || [[ "${FORCED}" != "true" ]]; then
    confirm 'File(s) will be gone forever, proceed?' || return $?
  
    if [[ "${REPLY}" != "yes" ]]; then
      echo 'No trashed files removed'
      return 2
    fi
  fi

  local index=0
  for ((index = 0; index < ${#paths[@]}; index++)); do
    local path="${paths[index]}"
    
    local query=".[]|select(.key == \"${path}\")"

    echo "${trashed_files}" | jq -cer "${query}" &> /dev/null

    if [[ $? -ne 0 ]]; then
      echo "File ${path} not found in trash"
      continue
    fi

    trash-rm "${path}"
  done

  local post_len=0
  post_len="$(find_files | jq -cer 'length')" || return 1
  len=$((len - post_len))

  if [[ ${len} -eq 0 ]]; then
    echo 'No trashed files removed'
    return 2
  fi
  
  echo "${len} trashed file(s) removed"
}

# Empties the trash from files trashed more than
# the given days ago.
# Arguments:
#  days: a positive integer number
empty_files () {
  local days="${1}"
  
  if [[ -n "${days}" ]] && [[ ! "${days}" =~ ^[0-9]+$ ]]; then
    echo 'Invalid days filter'
    return 2
  fi

  local len=0
  len="$(find_files | jq -cer 'length')" || return 1

  if [[ ${len} -eq 0 ]]; then
    echo 'No trashed files found'
    return 2
  fi
  
  if [[ -z "${FORCED}" ]] || [[ "${FORCED}" != "true" ]]; then
    local prompt=''

    if [[ -z "${days}" ]]; then
      prompt='ALL trashed files will be gone, proceed?'
    else
      prompt="Files trashed more than ${days} days ago will be gone, proceed?"
    fi
  
    confirm "${prompt}" || return $?

    if [[ "${REPLY}" != "yes" ]]; then
      echo 'No trashed files removed'
      return 2
    fi
  fi

  trash-empty -f "${days:-0}"

  if [[ $? -ne 0 ]]; then
    echo 'Failed to remove trashed files'
    return 2
  fi

  local post_len=0
  post_len="$(find_files | jq -cer 'length')" || return 1
  len=$((len - post_len))

  if [[ ${len} -eq 0 ]]; then
    echo 'No trashed files removed'
    return 2
  fi

  echo "${len} trashed file(s) removed"
}

