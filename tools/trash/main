#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/trash/commands

# Shows the help message.
# Arguments:
#  mode: once or none
# Outputs:
#  A long help message.
show_help () {
  if [[ "${1}" == "once" ]]; then
    echo 'Usage: trash [OPTIONS] FILE...'

    echo -e '\nOPTIONS'
    printf ' %-20s %s\n' \
      'h, --help' 'Show this help message.'

    return 0
  fi

  echo 'Usage: COMMAND [ARGUMENTS]...'
  
  echo -e '\nCOMMANDS'
  printf ' %-20s %s\n' \
    'help' 'Show this help message.' \
    '' '' \
    'list' 'List all trashed files.' \
    'list <days>' 'List files trashed within the given days.' \
    'list +<days>' 'List files trashed more than the given days ago.' \
    'list <date>' 'List files trashed at a certain date.' \
    '' '' \
    'restore [<path>]' 'Restore files starting from / or the given path.' \
    'remove [<paths>]' 'Remove the given trashed files.' \
    '' '' \
    'empty' 'Remove all trashed files.' \
    'empty <days>' 'Remove files trashed more than the given days ago.'
}

loop () {
  clear

  while true; do
    prompt trash && history -s "${REPLY}"

    set -f
    set_separator line
    local args=($(xargs -n1 <<< "${REPLY}"))
    restore_separator && set +f

    local cmd="${args[0]}"
    local obj="${args[1]}"

    case "${cmd}${obj:+ ${obj}}" in
      'help') show_help;;
      'list') list_files "${args[1]}";;
      'restore') restore_files "${args[1]}";;
      'remove') remove_files "${args[@]:1}";;
      'empty') empty_files "${args[1]}";;  
      'clear') clear && continue;;
      'quit') break;;
      '') continue;;
      *)
        echo 'Ooops, invalid or unknown command!'
        $(return 2);;
    esac && success || fail

    REPLY=''
  done

  clear
}

once () {
  local opts=''
  local files=()

  while true; do
    if [[ "${1}" = "-h" ]] || [[ "${1}" == "--help" ]]; then
      opts="${opts} help"
    elif [[ "${1}" =~ ^(-|--) ]]; then
      echo 'Ooops, unknown or invalid option!'
      return 2
    elif [[ -n "${1}" ]]; then
      files+=("${1}")
    else
      break
    fi

    shift
  done

  if [[ "${opts}" =~ "help" ]]; then
    show_help once
  else
    trash_files "${files[@]}"
  fi
}

if [[ $# -eq 0 ]]; then
  loop
else
  once "$@" && success || fail
fi

