#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/langs/helpers

# Shows the current status of languages and locales.
# Outputs:
#  A verbose list of text data.
show_status () {
  localectl status | awk -F':' '{
    i=index($0,":")
    if (i > 0) {
      l=$1
      gsub(/^[ \t]+|[ \t]+$/, "", l)
      split(l,a," ")
      printf "%-8s %s\n", a[2]":", substr($0, i+1)
    } else {
      gsub(/ /,"")
      printf "%-8s %s\n", "", " "$0
    }
  }'

  local locales=''
  locales="$(locale -a | awk '{ORS=", ";} {print $0}')" || return 1

  # Remove extra comma after the last locale element
  if is_not_empty "${locales}"; then
    locales="${locales::-2}"
  fi

  echo "Locales:  ${locales}"
}

# Sets the keymap of the console keyboard to the
# given keymap.
# Arguments:
#  map: the name of a keyboard map
set_keymap () {
  authenticate_user || return $?

  local map="${1}"

  if is_not_given "${map}"; then
    on_script_mode &&
      echo 'Missing the keyboard map' && return 2

    pick_keymap || return $?
    is_empty "${REPLY}" && echo 'Keyboard map is required' && return 2
    map="${REPLY}"
  fi

  if is_not_keymap "${map}"; then
    echo 'Invalid or unknown keyboard map'
    return 2
  fi

  save_keymap_to_settings "${map}" &&
   apply_langs_settings
  
  if has_failed; then
    echo "Failed to set keyboard map ${map}"
    return 2
  fi

  echo "Keyboard map set to ${map}"  
}

# Sets the language and all locale variables to
# the given locale.
# Arguments:
#  name: the name of a locale
set_locale () {
  authenticate_user || return $?

  local name="${1}"
  
  if is_not_given "${name}"; then
    on_script_mode &&
     echo 'Missing the locale name' && return 2

    pick_locale installed || return $?
    is_empty "${REPLY}" && echo 'Locale name is required' && return 2
    name="${REPLY}"
  fi

  if is_not_locale "${name}"; then
    echo 'Invalid or unknown locale'
    return 2
  elif is_locale_not_installed "${name}"; then
    echo "Locale ${name} is not currently added"
    return 2
  fi

  # Keep only the first part of locale
  name="$(echo "${name}" | cut -d ' ' -f 1)"

  # Set system language variable
  sudo sed -i "s/\(LANG=\).*/\1${name}/" /etc/locale.conf &&
    sudo sed -i "s/\(LANGUAGE=\).*/\1${name}:en:C/" /etc/locale.conf &&
    unset LANG LANGUAGE

  # Set system locale variables
  local vars=(
    CTYPE NUMERIC TIME COLLATE MONETARY MESSAGES PAPER
    NAME ADDRESS TELEPHONE MEASUREMENT IDENTIFICATION
  )

  local var=''
  for var in "${vars[@]}"; do
    sudo sed -i "s/\(${var}=\).*/\1${name}/" /etc/locale.conf && unset "${var}"
  done
  
  source /etc/profile.d/locale.sh

  if has_failed; then
    echo "Failed to set system locale"
    return 2
  fi

  echo "System locale set to ${name} (re-login)"
}

# Sets a keyboard layout options.
# Arguments:
#  value: a layout options value
set_options () {
  authenticate_user || return $?

  local value="${1}"

  if is_not_given "${value}"; then
    on_script_mode &&
      echo 'Missing the options value' && return 2

    pick_options_value || return $?
    is_empty "${REPLY}" && echo 'Options value is required' && return 2
    value="${REPLY}"
  fi

  if is_not_layout_options "${value}"; then
    echo 'Invalid or unknown options value'
    return 2
  fi

  save_options_to_settings "${value}" &&
   apply_langs_settings
  
  if has_failed; then
    echo 'Failed to set keyboard layout options'
    return 2
  fi

  echo "Keyboard layout options ${value} set"  
}

# Sets the keyboard model to the given model.
# Arguments:
#  name: the name of the model
set_model () {
  authenticate_user || return $?

  local name="${1}"

  if is_not_given "${name}"; then
    on_script_mode &&
      echo 'Missing the keyboard model name' && return 2

    pick_keyboard_model || return $?
    is_empty "${REPLY}" && echo 'Keyboard model name is required' && return 2
    name="${REPLY}"
  fi

  if is_not_keyboard_model "${name}"; then
    echo 'Invalid or unknown keyboard model name'
    return 2
  fi

  save_model_to_settings "${name}" &&
   apply_langs_settings
  
  if has_failed; then
    echo 'Failed to set keyboard model'
    return 2
  fi

  echo "Keyboard model set to ${name}"  
}

# Adds a locale to the system locales.
# Arguments:
#  name: the name of a locale
add_locale () {
  authenticate_user || return $?

  local name="${1}"

  if is_not_given "${name}"; then
    on_script_mode &&
      echo 'Missing the locale name' && return 2

    pick_locale not_installed || return $?
    is_empty "${REPLY}" && echo 'Locale name is required' && return 2
    name="${REPLY}"
  fi

  if is_not_locale "${name}"; then
    echo 'Invalid or unknown locale'
    return 2
  elif is_locale_installed "${name}"; then
    echo "Locale ${name} is already added"
    return 2
  fi

  sudo sed -i "s/\s*#\s*\(${name}\)\s*/\1/" /etc/locale.gen &&
   sudo locale-gen

  if has_failed; then
    echo 'Failed to add locale'
    return 2
  fi

  echo "Locale ${name} has been added"  
}

# Removes the given locale from the system locales.
# Arguments:
#  name: a locale name
remove_locale () {
  authenticate_user || return $?

  local name="${1}"

  if is_not_given "${name}"; then
    on_script_mode &&
      echo 'Missing the locale name' && return 2

    pick_locale installed || return $?
    is_empty "${REPLY}" && echo 'Locale name is required' && return 2
    name="${REPLY}"
  fi

  if is_not_locale "${name}"; then
    echo 'Invalid or unknown locale'
    return 2
  elif is_locale_not_installed "${name}"; then
    echo "Locale ${name} is already removed"
    return 2
  elif equals "${name}" 'en_US.UTF-8 UTF-8'; then
    echo 'Default locale cannot be removed'
    return 2
  fi

  sudo sed -i "s/\s*\(${name}\)\s*/#\1/" /etc/locale.gen &&
   sudo locale-gen

  if has_failed; then
    echo 'Failed to remove locale'
    return 2
  fi

  echo "Locale ${name} has been removed"
}

# Adds a new layout to keyboard layouts.
# Arguments:
#  code:    a layout code
#  variant: a variant of the layout or default
add_layout () {
  authenticate_user || return $?

  local code="${1}"
  local variant="${2}"

  if is_not_given "${code}"; then
    on_script_mode &&
      echo 'Missing the layout code' && return 2

    pick_layout || return $?
    is_empty "${REPLY}" && echo 'Layout code is required' && return 2
    code="${REPLY}"
  fi

  if is_not_layout "${code}"; then
    echo 'Invalid or unknown layout code'
    return 2
  fi
  
  if is_not_given "${variant}"; then
    on_script_mode &&
      echo 'Missing the layout variant' && return 2

    pick_layout_variant "${code}" || return $?
    is_empty "${REPLY}" && echo 'Layout variant is required' && return 2
    variant="${REPLY}"
  fi

  if is_not_layout_variant "${code}" "${variant}"; then
    echo 'Invalid or unknown layout variant'
    return 2
  fi

  if is_layout_installed "${code}" "${variant}"; then
    echo "Layout ${code}${variant:+ ${variant}} is already added"
    return 2
  fi

  save_layout_to_settings "${code}" "${variant}" &&
   apply_langs_settings

  if has_failed; then
    echo "Failed to add layout ${code}${variant:+ ${variant}}"
    return 2
  fi

  echo "Layout ${code}${variant:+ ${variant}} has been added"
}

# Removes a layout from keyboard layouts.
# Arguments:
#  code:    a layout code
#  variant: a variant of the layout
remove_layout () {
  authenticate_user || return $?

  local code="${1}"
  local variant="${2}"

  if on_script_mode; then
    is_not_given "${code}" && echo 'Missing the layout code' && return 2
    is_not_given "${variant}" && echo 'Missing the layout variant' && return 2
  else
    if is_not_given "${code}" && is_not_given "${variant}"; then
      pick_installed_layout || return $?
      is_empty "${REPLY}" && echo 'Layout is required' && return 2
      code="$(echo ${REPLY} | cut -d ':' -f 1)"
      variant="$(echo ${REPLY} | cut -d ':' -f 2)"
    fi
  fi

  if is_not_layout "${code}"; then
    echo 'Invalid or unknown layout code'
    return 2
  elif equals "${code}" 'us' && equals "${variant}" 'default'; then
    echo 'Default layout cannot be removed'
    return 2
  elif is_layout_not_installed "${code}" "${variant}"; then
    echo "Layout ${code}${variant:+ ${variant}} is not installed"
    return 2
  fi

  delete_layout_from_settings "${code}" "${variant}" &&
   apply_langs_settings

  if has_failed; then
    echo "Failed to remove layout ${code}${variant:+ ${variant}}"
    return 2
  fi

  echo "Layout ${code}${variant:+ ${variant}} has been removed"
}

# Sets the order of the currently installed layouts to the
# given layouts.
# Arguments:
#  layouts: a list of layout <code:variant> pairs
order_layouts () {
  authenticate_user || return $?

  local layouts=("$@")

  if is_true "${#layouts[@]} = 0"; then
    on_script_mode &&
      echo 'Missing layouts pairs' && return 2

    pick_installed_layouts || return $?
    is_empty "${REPLY}" && echo 'Layouts are required' && return 2
    layouts="${REPLY}"
  else
    # Convert given layouts args to json array
    layouts="$(jq -ncer '$ARGS.positional' --args -- "${layouts[@]}")" || return 1
  fi
  
  # Check for duplicated values in given layouts
  local query='(.|unique|length) as $len'
  query+=' | if $len != (.|length) then true else false end'

  local has_dups='false'
  has_dups="$(echo "${layouts}" | jq -cr "${query}")"

  if is_true "${has_dups}"; then
    echo 'Layouts should not have duplicated values'
    return 2
  fi
  
  # Check if given layouts match the currently installed ones
  local query='[.layouts[]|"\(.code):\(.variant)"] as $cl'
  query+=' | ($cl - $l | length) as $len1'
  query+=' | ($l - $cl | length) as $len2'
  query+=' | if $len1 == 0 and $len2 == 0 then $l|join(" ") else empty end'

  layouts="$(jq -cr --argjson l "${layouts}" "${query}" "${LANGS_SETTINGS}")" || return 1

  if is_empty "${layouts}"; then
    echo 'Layouts do not match with current layouts'
    return 2
  fi

  save_layouts_to_settings ${layouts} &&
   apply_langs_settings

  if has_failed; then
    echo 'Failed to set layouts order'
    return 2
  fi

  echo "Layouts order set to ${layouts}"
}

