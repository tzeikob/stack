#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/langs/helpers

# Shows the current status of languages and locales.
# Outputs:
#  A verbose list of text data.
show_status () {
  localectl status | awk -F':' '{
    i=index($0,":")
    if (i > 0) {
      l=$1
      gsub(/^[ \t]+|[ \t]+$/, "", l)
      split(l,a," ")
      printf "%-8s %s\n", a[2]":", substr($0, i+1)
    } else {
      gsub(/ /,"")
      printf "%-8s %s\n", "", " "$0
    }
  }'

  local locales=''
  locales="$(locale -a | awk '{ORS=", ";} {print $0}')" || return 1

  # Remove extra comma after the last locale element
  if is_not_empty "${locales}"; then
    locales="${locales::-2}"
  fi

  echo "Locales:  ${locales}"
}

# Sets the keymap of the console keyboard to the
# given keymap.
# Arguments:
#  map: the name of a keyboard map
set_keymap () {
  local map="${1}"

  if is_not_given "${map}"; then
    on_script_mode &&
      echo 'Missing the keyboard map' && return 2

    pick_keymap || return $?
    require 'Keyboard map is required' || return 2
    map="${REPLY}"
  fi

  if is_not_keymap "${map}"; then
    echo 'Invalid or unknown keyboard map'
    return 2
  fi

  localectl set-keymap --no-convert "${map}"
  
  if [[ $? -ne 0 ]]; then
    echo 'Failed to set keyboard map'
    return 2
  fi

  echo "Keyboard map set to ${map}"
}

# Sets the language and all locale variables to
# the given locale.
# Arguments:
#  name: the name of a locale
set_locale () {
  local name="${1}"
  
  if is_not_given "${name}"; then
    on_script_mode &&
     echo 'Missing the locale name' && return 2

    pick_locale installed || return $?
    require 'Locale name is required' || return 2
    name="${REPLY}"
  fi

  if is_not_locale "${name}"; then
    echo 'Invalid or unknown locale'
    return 2
  elif is_locale_not_installed "${name}"; then
    echo "Locale ${name} is not currently added"
    return 2
  fi

  # Keep only the first part of locale
  name="$(echo "${name}" | cut -d ' ' -f 1)"

  # Set system language variable
  sudo sed -i "s/\(LANG=\).*/\1${name}/" /etc/locale.conf &&
    sudo sed -i "s/\(LANGUAGE=\).*/\1${name}:en:C/" /etc/locale.conf &&
    unset LANG LANGUAGE

  # Set system locale variables
  local vars=(
    CTYPE NUMERIC TIME COLLATE MONETARY MESSAGES PAPER
    NAME ADDRESS TELEPHONE MEASUREMENT IDENTIFICATION
  )

  local index=0
  for ((index = 0; index < ${#vars[@]}; index++)); do
    local var="${vars[index]}"
  
    sudo sed -i "s/\(${var}=\).*/\1${name}/" /etc/locale.conf &&
      unset "${var}"
  done
  
  source /etc/profile.d/locale.sh

  if [[ $? -ne 0 ]]; then
    echo "Failed to set system locale"
    return 2
  fi

  echo "System locale set to ${name} (re-login)"
}

# Sets a keyboard layout options.
# Arguments:
#  value: a layout options value
set_options () {
  local value="${1}"

  if is_not_given "${value}"; then
    on_script_mode &&
      echo 'Missing the options value' && return 2

    pick_options_value || return $?
    require 'Options value is required' || return 2
    value="${REPLY}"
  fi

  if is_not_layout_options "${value}"; then
    echo 'Invalid or unknown options value'
    return 2
  fi

  local layouts=''
  layouts="$(cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbLayout/{print $3}' | tr -d '"')" || return 1

  local model=''
  model="$(cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbModel/{print $3}' | tr -d '"')" || return 1

  localectl --no-convert set-x11-keymap "${layouts}" "${model}" '' "${value}" &&
   setxkbmap -layout "${layouts}" -model "${model}" -option "${value}"

  if [[ $? -ne 0 ]]; then
    echo 'Failed to set keyboard layout options'
    return 2
  fi

  echo "Keyboard layout options ${value} set"
}

# Sets the keyboard model to the given model.
# Arguments:
#  name: the name of the model
set_model () {
  local name="${1}"

  if is_not_given "${name}"; then
    on_script_mode &&
      echo 'Missing the keyboard model name' && return 2

    pick_keyboard_model || return $?
    require 'Keyboard model name is required' || return 2
    name="${REPLY}"
  fi

  if is_not_keyboard_model "${name}"; then
    echo 'Invalid or unknown keyboard model name'
    return 2
  fi

  local layouts=''
  layouts="$(cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbLayout/{print $3}' | tr -d '"')" || return 1

  local options=''
  options="$(cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbOptions/{print $3}' | tr -d '"')" || return 1

  localectl --no-convert set-x11-keymap "${layouts}" "${name}" '' "${options}" &&
   setxkbmap -layout "${layouts}" -model "${value}" -option "${options}"
  
  if [[ $? -ne 0 ]]; then
    echo 'Failed to set keyboard model'
    return 2
  fi

  echo "Keyboard model set to ${name}"
}

# Adds a locale to the system locales.
# Arguments:
#  name: the name of a locale
add_locale () {
  local name="${1}"

  if is_not_given "${name}"; then
    on_script_mode &&
      echo 'Missing the locale name' && return 2

    pick_locale not_installed || return $?
    require 'Locale name is required' || return 2
    name="${REPLY}"
  fi

  if is_not_locale "${name}"; then
    echo 'Invalid or unknown locale'
    return 2
  elif is_locale_installed "${name}"; then
    echo "Locale ${name} is already added"
    return 2
  fi

  sudo sed -i "s/\s*#\s*\(${name}\)\s*/\1/" /etc/locale.gen &&
   sudo locale-gen

  if [[ $? -ne 0 ]]; then
    echo 'Failed to add locale'
    return 2
  fi

  echo "Locale ${name} has been added"  
}

# Removes the given locale from the system locales.
# Arguments:
#  name: a locale name
remove_locale () {
  local name="${1}"

  if is_not_given "${name}"; then
    on_script_mode &&
      echo 'Missing the locale name' && return 2

    pick_locale installed || return $?
    require 'Locale name is required' || return 2
    name="${REPLY}"
  fi

  if is_not_locale "${name}"; then
    echo 'Invalid or unknown locale'
    return 2
  elif is_locale_not_installed "${name}"; then
    echo "Locale ${name} is already removed"
    return 2
  elif [[ "${name}" == "en_US.UTF-8 UTF-8" ]]; then
    echo 'Default locale cannot be removed'
    return 2
  fi

  sudo sed -i "s/\s*\(${name}\)\s*/#\1/" /etc/locale.gen &&
   sudo locale-gen

  if [[ $? -ne 0 ]]; then
    echo 'Failed to remove locale'
    return 2
  fi

  echo "Locale ${name} has been removed"
}

# Adds a new layout to keyboard layouts.
# Arguments:
#  code: a layout code
add_layout () {
  local code="${1}"

  if is_not_given "${code}"; then
    on_script_mode &&
      echo 'Missing the layout code' && return 2

    pick_layout || return $?
    require 'Layout code is required' || return 2
    code="${REPLY}"
  fi

  if is_not_layout "${code}"; then
    echo 'Invalid or unknown layout code'
    return 2
  fi

  local layouts=''
  layouts="$(cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbLayout/{print $3}' | tr -d '"')" || return 1

  if [[ "${layouts}" =~ "${code}" ]]; then
    echo "Layout ${code} is already added"
    return 2
  fi

  if is_not_empty "${layouts}"; then
    layouts="${layouts},${code}"
  else
    layouts="${code}"
  fi

  local model=''
  model="$(cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbModel/{print $3}' | tr -d '"')" || return 1

  local options=''
  options="$(cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbOptions/{print $3}' | tr -d '"')" || return 1

  localectl --no-convert set-x11-keymap "${layouts}" "${model}" '' "${options}" &&
   setxkbmap -layout "${layouts}" -model "${model}" -option "${options}"

  if [[ $? -ne 0 ]]; then
    echo 'Failed to add layout'
    return 2
  fi

  echo "Layout ${code} has been added"
}

# Removes a layout from keyboard layouts.
# Arguments:
#  code: a layout code
remove_layout () {
  local code="${1}"

  if is_not_given "${code}"; then
    on_script_mode &&
      echo 'Missing the layout code' && return 2

    pick_layout installed || return $?
    require 'Layout code is required' || return 2
    code="${REPLY}"
  fi

  if is_not_layout "${code}"; then
    echo 'Invalid or unknown layout code'
    return 2
  elif [[ "${code}" == "us" ]]; then
    echo 'Default layout cannot be removed'
    return 2
  fi

  local layouts=''
  layouts="$(cat /etc/X11/xorg.conf.d/00-keyboard.conf |
      awk '/XkbLayout/{print $3}' | tr -d '"')" || return 1
  
  if [[ "${layouts}" == "${code}" ]]; then
    echo 'Cannot remove the only layout'
    return 2
  elif [[ ! "${layouts}" =~ "${code}" ]]; then
    echo "Layout ${code} is already removed"
    return 2
  fi

  if [[ "${layouts}" =~ "${code}," ]]; then
    layouts=${layouts//${code},/}
  else
    layouts=${layouts//,${code}/}
  fi

  local model=''
  model="$(cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbModel/{print $3}' | tr -d '"')" || return 1

  local options=''
  options="$(cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbOptions/{print $3}' | tr -d '"')" || return 1

  localectl --no-convert set-x11-keymap "${layouts}" "${model}" '' "${options}" &&
   setxkbmap -layout "${layouts}" -model "${model}" -option "${options}"

  if [[ $? -ne 0 ]]; then
    echo 'Failed to remove layout'
    return 2
  fi

  echo "Layout ${code} has been removed"
}

# Sets the order of the currently installed layouts to the
# given layouts.
# Arguments:
#  codes: a list of layout codes
order_layouts () {
  local codes=("$@")

  # Collect currently installed layouts in json array
  local layouts=''
  layouts="$(cat /etc/X11/xorg.conf.d/00-keyboard.conf | awk '/XkbLayout/{
    gsub(/"/,"",$0);split($3,a,",");
    output=""
    for (i=1; i<=length(a); i++) {
      output=output"{\"key\":\""a[i]"\",\"value\":\""a[i]"\"}"
      if (i < length(a)) output=output","
    }
    print "["output"]"
  }')" || return 1
  
  local len=0
  len="$(count "${layouts}")" || return 1

  if [[ ${len} -eq 0 ]]; then
    echo 'No layouts have set yet'
    return 2
  elif [[ ${len} -eq 1 ]]; then
    echo 'Only one layout was found'
    return 2
  fi

  if [[ ${#codes[@]} -eq 0 ]]; then
    on_script_mode &&
      echo 'Missing layout codes' && return 2

    pick_many 'Pick layout codes by order:' "${layouts}" horizontal || return $?
    require 'Layout codes are required' || return 2
    local selected="${REPLY}"

    # Convert selection from json to array
    readarray -t codes < <(echo "${selected}" | jq -cr '.[]')
  fi
  
  # Convert layout codes to json array
  codes="$(jq -ncer '$ARGS.positional' --args -- "${codes[@]}")" || return 1

  # Check for duplicated values in layout codes
  local query='length as $l|unique|if length != $l then true else false end'

  local has_duplications=''
  has_duplications="$(echo "${codes}" | jq -cr "${query}")" || return 1

  if [[ "${has_duplications}" == "true" ]]; then
    echo 'Layout codes should be unique values'
    return 2
  fi

  # Check if given layout codes match the currently installed ones
  local query=''
  query+='([.[]|.key]|sort_by(.)) as $a'
  query+=' |($o|sort_by(.)) as $b'
  query+=' |if $a == $b then true else false end'

  local match=''
  match="$(echo "${layouts}" | jq -cr --argjson o "${codes}" "${query}")" || return 1

  if [[ "${match}" == "false" ]]; then
    echo 'Layout codes do not match with current layouts'
    return 2
  fi

  local model=''
  model="$(cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbModel/{print $3}' | tr -d '"')" || return 1

  local options=''
  options="$(cat /etc/X11/xorg.conf.d/00-keyboard.conf |
    awk '/XkbOptions/{print $3}' | tr -d '"')" || return 1

  codes="$(echo "${codes}" | jq -cer 'join(",")')"

  localectl --no-convert set-x11-keymap "${codes}" "${model}" '' "${options}" &&
   setxkbmap -layout "${codes}" -model "${model}" -option "${options}"

  if [[ $? -ne 0 ]]; then
    echo 'Failed to set layouts order'
    return 2
  fi

  echo "Layouts order set to ${codes}"
}

