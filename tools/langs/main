#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/langs/commands

# Shows the help message.
# Arguments:
#  mode: loop or once
# Outputs:
#  A long help message.
show_help () {
  local mode="${1:-"once"}"

  if [[ "${mode}" == "once" ]]; then
    echo 'Usage: langs [OPTIONS] COMMAND [OBJECT] [ARGUMENTS]...'
    
    echo -e '\nOPTIONS'
    printf ' %-10s %s\n' \
      '-h' 'Show this help message.' \
      '-q' 'Stay quiet and do not play beep sounds.'
  
    echo -e '\nCOMMANDS'
  else
    echo 'Usage: COMMAND [OBJECT] [ARGUMENTS]...'

    echo -e '\nCOMMANDS'
    printf ' %-35s %s\n' \
      'help' 'Show this help message.'
  fi

  printf ' %-35s %s\n' \
    'show status' 'Show the system locale and keyboard status.' \
    '' '' \
    'set language [<language>]' 'Set the system language.' \
    'set keymap [<map>]' 'Set the keyboard virtual console keymap.' \
    'set options [<value>]' 'Set a keyboard layout options.' \
    'set model [<name>]' 'Set the model of the keyboard.' \
    '' '' \
    'set locale <name> [<locale>]' 'Set a locale variable, where name could be' \
    '' 'ctype, numeric, time, collate, monetary,' \
    '' 'messages, paper, name, address, telephone,' \
    '' 'measurement, identification.' \
    'add locale [<locale>]' 'Add a locale to the system locales.' \
    'remove locale [<locale>]' 'Remove a locale from the system locales.' \
    '' '' \
    'add layout [<language>]' 'Add a keyboard layout language.' \
    'remove layout [<language>]' 'Remove a keyboard layout language.' \
    'order layouts' 'Set the order of keyboard layouts.'
}

run () {
  local opt=''

  while getopts 'hq' opt; do
    case "${opt}" in
     'h')
        show_help once
        return 0;;
     'q') QUIET='true';;
     *)
      echo 'Ooops, invalid or unknown option'
      $(exit 2) || beep
      return $?;;
    esac
  done

  shift $((OPTIND-1))

  local mode='once'
  if [[ $# -eq 0 ]]; then
    mode='loop'
    clear
  fi

  while true; do
    if [[ "${mode}" == "loop" ]]; then
      prompt langs && history -s "${REPLY}"
    else
      REPLY="$@"
    fi

    set -f
    set_separator line
    local args=($(xargs -n1 <<< "${REPLY}"))
    restore_separator && set +f
    REPLY=''

    local cmd="${args[0]}"
    local obj="${args[1]}"

    if [[ "${mode}" == "loop" ]]; then
      case "${cmd}${obj:+ ${obj}}" in
        'help') show_help loop && continue;;
        'clear') clear && continue;;
        'quit') break;;
        '') continue;;
      esac
    fi

    case "${cmd}${obj:+ ${obj}}" in
      'show status') show_status;;
      'set keymap') set_keymap "${args[2]}" && beep;;
      'set language') set_language "${args[2]}" && beep;;
      'set locale') set_locale "${args[2]}" "${args[3]}" && beep;;
      'set options') set_options "${args[2]}" && beep;;
      'set model') set_model "${args[2]}" && beep;;
      'add locale') add_locale "${args[2]}" && beep;;
      'add layout') add_layout "${args[2]}" && beep;;
      'remove locale') remove_locale "${args[2]}" && beep;;
      'remove layout') remove_layout "${args[2]}" && beep;;
      'order layouts') order_layouts && beep;;
      *)
        echo 'Ooops, invalid or unknown command!'
        $(return 2);;
    esac || beep

    local exit_code=$?
    if [[ "${mode}" == "once" ]]; then
      return ${exit_code}
    fi
  done

  clear
}

run "$@"

