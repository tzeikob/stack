#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/langs/commands

# Shows the help message.
# Arguments:
#  mode: loop or once
# Outputs:
#  A long help message.
show_help () {
  local mode="${1}"

  if equals "${mode}" 'once'; then
    echo 'Usage: langs [OPTIONS] COMMAND [OBJECT] [ARGUMENTS]...'
    
    echo -e '\nOPTIONS'
    printf ' %-10s %s\n' \
      '-h' 'Show this help message.' \
      '-q' 'Do not play beep sounds.' \
      '-s' 'Run on script mode.'
  
    echo -e '\nCOMMANDS'
  else
    echo 'Usage: COMMAND [OBJECT] [ARGUMENTS]...'

    echo -e '\nCOMMANDS'
    printf ' %-35s %s\n' \
      'help' 'Show this help message.'
  fi

  printf ' %-35s %s\n' \
    'show status' 'Show the system locale and keyboard status.' \
    '' '' \
    'add locale <name>' 'Add a locale to the system locales.' \
    'remove locale <name>' 'Remove a locale from the system locales.' \
    'set locale <name>' 'Set the locale of the system.' \
    '' '' \
    'add layout <code>' 'Add a keyboard layout.' \
    'remove layout <code>' 'Remove a keyboard layout.' \
    'order layouts <codes>' 'Set the order of keyboard layouts.' \
    '' '' \
    'set keymap <map>' 'Set the keyboard virtual console keymap.' \
    'set options <value>' 'Set a keyboard layout options.' \
    'set model <name>' 'Set the model of the keyboard.'
}

run () {
  local opt=''

  while getopts ':hqs' opt; do
    case "${opt}" in
     'h')
        set_quiet_mode 'on'
        show_help once
        return 0;;
     'q') set_quiet_mode 'on';;
     's') set_script_mode 'on';;
     *)
      echo "Ooops, invalid or unknown option -${OPTARG}!"
      beep 2
      return $?;;
    esac
  done

  # Collect command arguments
  shift $((OPTIND-1))
  local args_len=$#

  if is_true "${args_len} = 0" && on_script_mode; then
    echo 'Option -s cannot be used in loop mode'
    beep 2
    return $?
  fi

  local mode='once'
  if is_true "${args_len} = 0"; then
    mode='loop'
    clear
  fi

  while true; do
    if equals "${mode}" 'loop'; then
      prompt langs
    else
      REPLY="$@"
    fi

    set -f
    set_separator line
    local args=($(xargs -n1 <<< "${REPLY}"))
    restore_separator && set +f
    REPLY=''

    local cmd="${args[0]}"
    local obj="${args[1]}"

    if equals "${mode}" 'loop'; then
      case "${cmd}${obj:+ ${obj}}" in
        'help') clear && show_help && continue;;
        'clear') clear && continue;;
        'quit') break;;
        '') continue;;
      esac
    fi

    case "${cmd}${obj:+ ${obj}}" in
      'show status') show_status;;
      'add locale') add_locale "${args[2]}";;
      'remove locale') remove_locale "${args[2]}";;
      'set locale') set_locale "${args[2]}";;
      'add layout') add_layout "${args[2]}";;
      'remove layout') remove_layout "${args[2]}";;
      'order layouts') order_layouts "${args[@]:2}";;
      'set keymap') set_keymap "${args[2]}";;
      'set options') set_options "${args[2]}";;
      'set model') set_model "${args[2]}";;
      *)
        echo 'Ooops, invalid or unknown command!'
        $(return 2);;
    esac

    # Save exit status code of the last executed cmd
    local exit_code=$?
  
    if is_true "${exit_code} = 1"; then
      echo 'Ooops, an unknwon error occurred!'
    fi

    on_loud_mode && beep "${exit_code}"

    if equals "${mode}" 'once'; then
      return ${exit_code}
    fi
  done

  clear
}

run "$@"

