#!/bin/bash

set -o pipefail

source /opt/stack/utils

# Shows a menu asking the user to select a keyboard map.
# Outputs:
#  A menu of keyboard maps.
pick_keymap () {
	local maps=''

	maps="$(localectl --no-pager list-keymaps | awk '{
	  print "{\"key\":\""$0"\",\"value\":\""$0"\"},"
	}')" || return 1

	# Remove extra comma delimiter from the last element
	maps="${maps:+${maps::-1}}"

  maps="[${maps}]"

	pick_one 'Select a key map:' "${maps}" vertical || return $?
}

# Checks if the given keyboard map is valid.
# Arguments:
#  map: a keyboard map name
# Returns:
#  0 if map is valid otherwise 1.
is_keymap () {
	local map="${1}"
  
  localectl --no-pager list-keymaps | grep -qE "^${map}$"
  
  if has_failed; then
    return 1
  fi

	return 0
}

# Checks if the given keyboard map is not valid.
# Arguments:
#  map: a keyboard map name
# Returns:
#  0 if map is not valid otherwise 1.
is_not_keymap () {
  is_keymap "${1}" && return 1 || return 0
}

# Shows a menu asking the user to select a locale.
# In case the filter is given, all means all locales,
# installed means those currently installed and
# not_installed means those those currently not installed,
# where the default is all.
# Arguments:
#  filter: all, installed, not_installed
# Outputs:
#  A menu of locales.
pick_locale () {
  local filter="${1:-all}"

  local locales=''

  if equals "${filter}" 'not_installed'; then
    locales="$(cat /etc/locale.gen | tail -n +24 | trim | awk '/^\s*#/{
      gsub(/#/,"",$0);
      print "{\"key\":\""$0"\",\"value\":\""$0"\"},"
    }')" || return 1
  elif equals "${filter}" 'installed'; then
    locales="$(cat /etc/locale.gen | tail -n +24 | trim | awk '/^\s*[a-zA-Z\s0-9_.-]+/{
      print "{\"key\":\""$0"\",\"value\":\""$0"\"},"
    }')" || return 1
  else
    locales="$(cat /etc/locale.gen | tail -n +24 | tr -d '#' | trim | awk '{
      print "{\"key\":\""$0"\",\"value\":\""$0"\"},"
    }')" || return 1
  fi
  
	# Removes the last comma delimiter from the last element
  locales="${locales:+${locales::-1}}"

  locales="[${locales}]"

  pick_one 'Select a locale:' "${locales}" vertical || return $?
}

# Checks if the given locale is valid.
# Arguments:
#  name: the name of a locale
# Returns:
#  0 if locale is valid otherwise 1.
is_locale () {
	local name="${1}"
  
  grep -qE "^\s*#?\s*${name}\s*$" /etc/locale.gen

  if has_failed; then
    return 1
  fi

	return 0
}

# Checks if the given locale is not valid.
# Arguments:
#  name: the name of a locale
# Returns:
#  0 if locale is not valid otherwise 1.
is_not_locale () {
  is_locale "${1}" && return 1 || return 0
}

# Checks if the given locale is already installed.
# Arguments:
#  name: the name of a locale
# Returns:
#  0 if locale is set otherwise 1.
is_locale_installed () {
	local name="${1}"
	
  if grep -qE "^\s*${name}\s*$" /etc/locale.gen; then
    return 0
  fi

	return 1
}

# Checks if the given locale is not installed.
# Arguments:
#  name: the name of a locale
# Returns:
#  0 if locale is not set otherwise 1.
is_locale_not_installed () {
	is_locale_installed "${1}" && return 1 || return 0
}

# Shows a menu asking the user to select a layout
# options value.
# Outputs:
# A menu of keyboard layout options.
pick_options_value () {
  local options=''

  options="$(localectl --no-pager list-x11-keymap-options | awk '{
    print "{\"key\":\""$0"\",\"value\":\""$0"\"},"
  }')" ||  return 1

  # Remove extra comma delimiter from last element
  options="${options:+${options::-1}}"

  options="[${options}]"

  pick_one 'Select an options value:' "${options}" vertical || return $?
}

# Checks if the given layout options value
# is valid.
# Arguments:
#  value: a layout options value
# Returns:
#  0 if value is valid otherwise 1.
is_layout_options () {
  local value="${1}"
  
  localectl --no-pager list-x11-keymap-options | grep -qw "${value}"
  
  if has_failed; then
    return 1
  fi

  return 0
}

# Checks if the given layout options value
# is not valid.
# Arguments:
#  value: a layout options value
# Returns:
#  0 if value is not valid otherwise 1.
is_not_layout_options () {
  is_layout_options "${1}" && return 1 || return 0
}

# Shows a menu asking the user to select a keyboard model.
# Outputs:
#  A menu of keyboard models.
pick_keyboard_model () {
  local models=''

  models="$(localectl --no-pager list-x11-keymap-models | awk '{
    print "{\"key\":\""$1"\",\"value\":\""$1"\"},"
  }')" || return 1

  # Remove the extra comma delimiter from the last element
  models="${models:+${models::-1}}"

  models="[${models}]"

  pick_one 'Select a model name:' "${models}" vertical || return $?
}

# Checks if the given keyboard model is valid.
# Arguments:
#  name: the name of a keyboard model
# Returns:
#  0 if model is valid otherwise 1.
is_keyboard_model () {
  local name="${1}"
  
  localectl --no-pager list-x11-keymap-models | grep -qw "${name}"

  if has_failed; then
    return 1
  fi

  return 0
}

# Checks if the given keyboard model is not valid.
# Arguments:
#  name: the name of a keyboard model
# Returns:
#  0 if model is not valid otherwise 1.
is_not_keyboard_model () {
  is_keyboard_model "${1}" && return 1 || return 0
}

# Shows a menu asking the user to select a keyboard layout.
# If status is given options will be limited to this value.
# Arguments:
#  status: installed or none
# Outputs:
#  A menu of keyboard layouts.
pick_layout () {
  local status="${1}"

  local layouts=''

  if equals "${status}" 'installed'; then
    layouts="$(cat /etc/X11/xorg.conf.d/00-keyboard.conf |
      awk '/XkbLayout/{print $3}' | tr -d '"' | tr ',' '\n' | awk '{
      print "{\"key\":\""$0"\",\"value\":\""$0"\"},"
    }')" || return 1

    if is_empty "${layouts}"; then
      echo 'No installed layouts have found'
      return 2
    fi
  else
    layouts="$(localectl --no-pager list-x11-keymap-layouts | awk '{
      print "{\"key\":\""$0"\",\"value\":\""$0"\"},"
    }')" || return 1
  fi
  
  # Remove the extra comma delimiter from last element
  layouts="${layouts:+${layouts::-1}}"

  layouts="[${layouts}]"

  pick_one 'Select a layout code:' "${layouts}" vertical || return $?
}

# Checks if the keyboard layout with the given code is valid.
# Arguments:
#  code: a layout code
# Returns:
#  0 if layout is valid otherwise 1.
is_layout () {
  local code="${1}"

  if not_match "${code}" '^[a-z]{2,6}$'; then
    return 1
  fi

  localectl --no-pager list-x11-keymap-layouts | grep -qw "${code}"
  
  if has_failed; then
    return 1
  fi

  return 0
}

# Checks if the keyboard layout with the given code
# is not valid.
# Arguments:
#  code: a layout code
# Returns:
#  0 if layout is not valid otherwise 1.
is_not_layout () {
  is_layout "${1}" && return 1 || return 0
}

