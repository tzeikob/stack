#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/printers/commands

# Shows the help message.
# Arguments:
#  mode: loop or once
# Outputs:
#  A long help message.
show_help () {
  local mode="${1:-"once"}"

  if [[ "${mode}" == "once" ]]; then
    echo 'Usage: printers [OPTIONS] COMMAND [OBJECT] [ARGUMENTS]...'
    
    echo -e '\nOPTIONS'
    printf ' %-10s %s\n' \
      '-h' 'Show this help message.' \
      '-q' 'Stay quiet and do not play beep sounds.'
  
    echo -e '\nCOMMANDS'
  else
    echo 'Usage: COMMAND [OBJECT] [ARGUMENTS]...'

    echo -e '\nCOMMANDS'
    printf ' %-40s %s\n' \
      'help' 'Show this help message.'
  fi

  printf ' %-40s %s\n' \
    'show status' 'Show a report of cups service and printers.' \
    'show printer [<name>]' 'Show the data of a printer.' \
    '' '' \
    'list printers' 'List all printers.' \
    'add printer <name> [<uri>]' 'Add a new printer.' \
    'remove printer [<name>]' 'Remove a printer.' \
    '' '' \
    'set quality [<name> [600dpi|1200dpi]]' 'Set the print quality of a printer.' \
    'set size [<name> [<size>]]' 'Set the default page size of a printer.' \
    'set paper [<name> [<type>]]' 'Set the paper type of a printer.' \
    'set toner [<name> [standard|save]]' 'Set the toner mode of a printer.' \
    'set onerror [<name> [<policy>]]' 'Set the on error policy of a printer.' \
    'set default [<name>]' 'Set a printer as default print destination.' \
    '' '' \
    'share printer [<name>]' 'Share a printer to the local network.' \
    'unshare printer [<name>]' 'Unshare a printer of the local network.' \
    '' '' \
    'list jobs' 'List all queued print jobs.' \
    'cancel job [<id>]' 'Cancel a queued print job.' \
    '' '' \
    'restart' 'Restart the cups service.'
}

run () {
  local opt=''

  while getopts 'hq' opt; do
    case "${opt}" in
     'h')
        show_help once
        return 0;;
     'q') QUIET='true';;
     *)
      echo 'Ooops, invalid or unknown option'
      $(exit 2) || beep
      return $?;;
    esac
  done

  shift $((OPTIND-1))

  local mode='once'
  if [[ $# -eq 0 ]]; then
    mode='loop'
    clear
  fi

  while true; do
    if [[ "${mode}" == "loop" ]]; then
      prompt printers
    else
      REPLY="$@"
    fi

    set -f
    set_separator line
    local args=($(xargs -n1 <<< "${REPLY}"))
    restore_separator && set +f
    REPLY=''

    local cmd="${args[0]}"
    local obj="${args[1]}"

    if [[ "${mode}" == "loop" ]]; then
      case "${cmd}${obj:+ ${obj}}" in
        'help') clear && show_help loop && continue;;
        'clear') clear && continue;;
        'quit') break;;
        '') continue;;
      esac
    fi

    case "${cmd}${obj:+ ${obj}}" in
      'show status') show_status;;
      'show printer') show_printer "${args[2]}";;
      'list printers') list_printers;;
      'list jobs') list_jobs;;
      'add printer') add_printer "${args[2]}" "${args[3]}" && beep;;
      'remove printer') remove_printer "${args[2]}" && beep;;
      'share printer') share_printer "${args[2]}" && beep;;
      'unshare printer') unshare_printer "${args[2]}" && beep;;
      'set quality') set_option "${args[2]}" 'Quality' "${args[3]}" && beep;;
      'set size') set_option "${args[2]}" 'PageSize' "${args[3]}" && beep;;
      'set paper') set_option "${args[2]}" 'MediaType' "${args[3]}" && beep;;
      'set toner') set_option "${args[2]}" 'TonerSaveMode' "${args[3]}" && beep;;
      'set onerror') set_option "${args[2]}" 'printer-error-policy' "${args[3]}" && beep;;
      'set default') set_default "${args[2]}" && beep;;
      'cancel job') cancel_job "${args[2]}" && beep;;
      'restart') restart;;
      *)
        echo 'Ooops, invalid or unknown command!'
        $(return 2);;
    esac || beep

    local exit_code=$?
    if [[ "${mode}" == "once" ]]; then
      return ${exit_code}
    fi
  done

  clear
}

run "$@"

