#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/printers/commands

# Shows the help message.
# Arguments:
#  mode: loop or once
# Outputs:
#  A long help message.
show_help () {
  local mode="${1:-"once"}"

  if equals "${mode}" 'once'; then
    echo 'Usage: printers [OPTIONS] COMMAND [OBJECT] [ARGUMENTS]...'
    
    echo -e '\nOPTIONS'
    printf ' %-8s %s\n' \
      '-h' 'Show this help message.' \
      '-q' 'Do not play beep sounds.' \
      '-s' 'Run on script mode.'
  
    echo -e '\nCOMMANDS'
  else
    echo 'Usage: COMMAND [OBJECT] [ARGUMENTS]...'

    echo -e '\nCOMMANDS'
    printf ' %-36s %s\n' \
      'help' 'Show this help message.' \
      '' ''
  fi

  printf ' %-36s %s\n' \
    'show status' 'Show a report of cups service and printers.' \
    'show printer <name>' 'Show the data of a printer.' \
    '' '' \
    'list printers' 'List all printers.' \
    'add printer <uri> <name> <driver>' 'Add a new printer.' \
    'remove printer <name>' 'Remove a printer.' \
    '' '' \
    'set default <name>' 'Set a printer as default destination.' \
    'set option <name> <key> <value>' 'Set the option of a printer with key equal' \
    '' 'to Quality, PageSize, MediaType, ToneSaveMode' \
    '' 'or printer-error-policy.' \
    '' '' \
    'share printer <name>' 'Share a printer to the local network.' \
    'unshare printer <name>' 'Unshare a printer of the local network.' \
    '' '' \
    'list jobs' 'List all queued print jobs.' \
    'cancel job <id>' 'Cancel a queued print job.' \
    '' '' \
    'restart' 'Restart the cups service.'
}

run () {
  local opt=''

  while getopts ':hqs' opt; do
    case "${opt}" in
     'h')
        set_quiet_mode 'on'
        show_help once
        return 0;;
     'q') set_quiet_mode 'on';;
     's') ON_SCRIPT_MODE='true';;
     *)
      echo "Ooops, invalid or unknown option -${OPTARG}!"
      beep 2
      return $?;;
    esac
  done

  shift $((OPTIND-1))

  local mode='once'
  if is_true "$# = 0"; then
    mode='loop'
    clear
  fi

  while true; do
    if equals "${mode}" 'loop'; then
      prompt printers
    else
      REPLY="$@"
    fi

    set -f
    set_separator line
    local args=($(xargs -n1 <<< "${REPLY}"))
    restore_separator && set +f
    REPLY=''

    local cmd="${args[0]}"
    local obj="${args[1]}"

    if equals "${mode}" 'loop'; then
      case "${cmd}${obj:+ ${obj}}" in
        'help') clear && show_help loop && continue;;
        'clear') clear && continue;;
        'quit') break;;
        '') continue;;
      esac
    fi

    case "${cmd}${obj:+ ${obj}}" in
      'show status') show_status;;
      'show printer') show_printer "${args[2]}";;
      'list printers') list_printers;;
      'list jobs') list_jobs;;
      'add printer') add_printer "${args[2]}" "${args[3]}" "${args[4]}";;
      'remove printer') remove_printer "${args[2]}";;
      'share printer') share_printer "${args[2]}";;
      'unshare printer') unshare_printer "${args[2]}";;
      'set default') set_default "${args[2]}";;
      'set option') set_option "${args[2]}" "${args[3]}" "${args[4]}";;
      'cancel job') cancel_job "${args[2]}";;
      'restart') restart;;
      *)
        echo 'Ooops, invalid or unknown command!'
        $(return 2);;
    esac

    # Save exit status code of the last executed cmd
    local exit_code=$?
  
    if is_true "${exit_code} = 1"; then
      echo 'Ooops, an unknwon error occurred!'
    fi

    on_loud_mode && beep "${exit_code}"

    if equals "${mode}" 'once'; then
      return ${exit_code}
    fi
  done

  clear
}

run "$@"

