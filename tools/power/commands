#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/power/helpers

SETTINGS_FILE="${CONFIG_HOME}/power.json"

# Shows the current status of the system's power.
# Arguments:
#  None
# Outputs:
#  A verbose list of text data.
show_status () {
  local query=''
  query+='"Adapter:      \(."on-line"|if . then "on" else "off" end)"'

  find_adapter | jq -cer "${query}" || return 1

  local battery=''
  battery="$(find_battery)" || return 1

  if [[ -n "${battery}" ]]; then
    local query=''
    query+='Battery:      yes\n'
    query+='State:        \(.state|ascii_downcase)\n'
    query+='Charge:       \(.charge_percent)%'
    query+="\(.design_capacity_mah|if . then \"\nCapacity:     \(.)mAh\" else \"\" end)"
    query="\"${query}\""

    echo "${battery}" | jq -cer "${query}" || return 1
  else
    echo 'Battery:      no'
  fi

  if [[ -f '/sys/class/power_supply/BAT0/current_now' ]]; then
    local current_now="$(< /sys/class/power_supply/BAT0/current_now)"
    echo "Current:      ${current_now}mAh"
  fi

  if [[ -f '/sys/class/power_supply/BAT0/charge_now' ]]; then
    local charge_now="$(< /sys/class/power_supply/BAT0/charge_now)"
    echo "Load:         ${charge_now}mAh"
  fi

  local query='.[]|select(.unit == "acpid.service")|"ACPID:        \(.active)"'

  local acpid_status=''
  acpid_status="$(systemctl -a | jc --systemctl | jq -cr "${query}")" || return 1

  if [[ -n "${acpid_status}" ]]; then
    echo "${acpid_status}"
  fi

  local query='.[]|select(.unit == "tlp.service")|"TLP:          \(.active)"'

  local tlp_status=''
  tlp_status="$(systemctl -a | jc --systemctl | jq -cr "${query}")" || return 1

  if [[ -n "${tlp_status}" ]]; then
    echo "${tlp_status}"
  fi

  if [[ -f "${SETTINGS_FILE}" ]]; then
    local query='.screensaver.interval|if . then . else "" end'

    local screensaver=''
    screensaver="$(jq -cr "${query}" "${SETTINGS_FILE}")" || return 1
    
    if [[ -n "${screensaver}" ]] && [[ ${screensaver} -gt 0 ]]; then
      echo "Screensaver:  ${screensaver} mins"
    else
      echo 'Screensaver:  off'
    fi
  else
    echo 'Screensaver:  off'
  fi

  loginctl show-session | awk '{
    match($0,/(.*)=(.*)/,a)

    if (a[1] == "Docked") {
      a[1]="Docked"
    } else if (a[1] == "LidClosed") {
      a[1]="Lid Down"
    } else {
      next
    }

    printf  "%-12s  %s\n", a[1]":", a[2]
  }' || return 1

  echo ''

  loginctl show-session | awk '{
    match($0,/(.*)=(.*)/,a)

    if (a[1] == "HandlePowerKey") {
      a[1]="On Power"
    } else if (a[1] == "HandleRebootKey") {
      a[1]="On Reboot"
    } else if (a[1] == "HandleSuspendKey") {
      a[1]="On Suspend"
    } else if (a[1] == "HandleHibernateKey") {
      a[1]="On Hibernate"
    } else if (a[1] == "HandleLidSwitch") {
      a[1]="On Lid Down"
    } else if (a[1] == "HandleLidSwitchDocked") {
      a[1]="On Docked"
    } else if (a[1] == "IdleAction") {
      a[1]="On Idle"
    } else {
      next
    }

    printf  "%-13s  %s\n", a[1]":", a[2]
  }' || return 1
}

# Sets the action of the hander with the given name.
# Arguments:
#  handler: power, reboot, suspend, lid or docked
#  action:  poweroff, reboot, suspend or ignore
set_action () {
  local handler="${1}"
  local action="${2}"

  if [[ -z "${handler}" ]]; then
    local handlers=''
    handlers+='{"key":"power", "value":"power"},'
    handlers+='{"key":"reboot", "value":"reboot"},'
    handlers+='{"key":"suspend", "value":"suspend"},'
    handlers+='{"key":"lid", "value":"lid"},'
    handlers+='{"key":"docked", "value":"docked"}'
    handlers="[${handlers}]"

    pick_one 'Select a power handler:' "${handlers}" vertical || return $?
    handler="${REPLY}"
  fi

  if [[ ! "${handler}" =~ ^(power|reboot|suspend|lid|docked)$ ]]; then
    echo 'Invalid power handler'
    return 2
  fi

  if [[ -z "${action}" ]]; then
    local actions=''
    actions+='{"key":"poweroff", "value":"poweroff"},'
    actions+='{"key":"reboot", "value":"reboot"},'
    actions+='{"key":"suspend", "value":"suspend"},'
    actions+='{"key":"ignore", "value":"ignore"}'
    actions="[${actions}]"

    pick_one 'Select an action:' "${actions}" vertical || return $?
    action="${REPLY}"
  fi

  if [[ ! "${action}" =~ ^(poweroff|reboot|suspend|ignore)$ ]]; then
    echo 'Invalid power action'
    return 2
  fi

  local option=''
  if [[ "${handler}" == "power" ]]; then
    option='HandlePowerKey'
  elif [[ "${handler}" == "reboot" ]]; then
    option='HandleRebootKey'
  elif [[ "${handler}" == "suspend" ]]; then
    option='HandleSuspendKey'
  elif [[ "${handler}" == "lid" ]]; then
    option='HandleLidSwitch'
  elif [[ "${handler}" == "docked" ]]; then
    option='HandleLidSwitchDocked'
  else
    echo 'Invalid power handler'
    return 2
  fi

  local config_file='/etc/systemd/logind.conf.d/00-main.conf'

  # Copy the default config file if not yet created
  if [[ ! -f "${config_file}" ]]; then
    sudo mkdir -p /etc/systemd/logind.conf.d
    sudo cp /etc/systemd/logind.conf "${config_file}"
  fi

  if grep -qE "^${option}=" "${config_file}"; then
    sudo sed -i "s/^\(${option}=\).*/\1${action}/" "${config_file}"
  else
    echo "${option}=${action}" | sudo tee -a "${config_file}" > /dev/null
  fi

  systemctl kill -s HUP systemd-logind

  if [[ $? -ne 0 ]]; then
    echo "Failed to set ${handler} action"
    return 2
  fi

  echo "Action ${handler} set to ${action}"
}

# Resets the action of all power handlers.
# Arguments:
#  None
reset_actions () {
  local config_file='/etc/systemd/logind.conf.d/00-main.conf'

  if [[ ! -f "${config_file}" ]]; then
    echo 'Actions already set to defaults'
    return 0
  fi

  sudo sed -i '/^HandlePowerKey=.*/d' "${config_file}"
  sudo sed -i '/^HandleRebootKey=.*/d' "${config_file}"
  sudo sed -i '/^HandleSuspendKey=.*/d' "${config_file}"
  sudo sed -i '/^HandleLidSwitch=.*/d' "${config_file}"
  sudo sed -i '/^HandleLidSwitchDocked=.*/d' "${config_file}"

  systemctl kill -s HUP systemd-logind

  if [[ $? -ne 0 ]]; then
    echo 'Failed to reset power actions'
    return 2
  fi

  echo 'Power actions have been reset'
}

# Sets the interval time of the screen saver, where
# 0 means deactivate the screensaver.
# Arguments:
#  interval: the number of minutes or 0
set_screensaver () {
  local interval="${1}"

  if [[ -z "${interval}" ]]; then
    ask 'Enter the interval in mins [0-60]:' || return $?
    interval="${REPLY}"
  fi
  
  if [[ ! "${interval}" =~ ^[0-9]{,2}$ ]]; then
    echo 'Invalid or malformed interval'
    return 2
  elif [[ ${interval} -lt 0 ]] || [[ ${interval} -gt 60 ]]; then
    echo 'Interval is out of range'
    return 2
  fi

  # Save screen saver interval into settings file
  local settings='{}'
  local screensaver="{\"interval\": ${interval}}"

  if [[ -f "${SETTINGS_FILE}" ]]; then
    settings="$(jq -e ".screensaver = ${screensaver} " "${SETTINGS_FILE}")" || return 1
  else
    settings="$(echo "{\"screensaver\": ${screensaver}}" | jq -e '.')" || return 1
  fi

  mkdir -p "${CONFIG_HOME}"
  echo "${settings}" > "${SETTINGS_FILE}"

  if [[ ${interval} -gt 0 ]]; then
    local secs=$((interval*60))

    xset s "${secs}" "${secs}" &> /dev/null
  else
    xset s off &> /dev/null
  fi
  
  if [[ $? -ne 0 ]]; then
    echo 'Failed to set the screen saver'
    return 2
  fi

  echo "Screen saver set to ${interval} mins"
}

# Initializes the screen saver to the interval saved
# in the settings file.
# Arguments:
#  None
init_screensaver () {
  if [[ ! -f "${SETTINGS_FILE}" ]]; then
    echo 'No screen saver settings found'
    return 2
  fi

  local interval=''
  interval="$(jq '.screensaver.interval|if . then . else 5 end' "${SETTINGS_FILE}")"

  if [[ ${interval} -gt 0 ]]; then
    local secs=$((interval*60))

    xset s "${secs}" "${secs}" &> /dev/null
  else
    xset s off &> /dev/null
  fi
  
  if [[ $? -ne 0 ]]; then
    echo 'Failed to initialize the screen saver'
    return 2
  fi

  echo "Screen saver initialized to ${interval} mins"
}

# Enables or disables power saving mode via the tlp service.
# Arguments:
#  status: on or off
set_tlp () {
  local status="${1}"

  if [[ -z "${status}" ]]; then
    local statuses=''
    statuses+='{"key":"on", "value":"On"},'
    statuses+='{"key":"off", "value":"Off"}'
    statuses="[${statuses}]"

    pick_one 'Set TLP status to:' "${statuses}" horizontal || return $?
    status="${REPLY}"
  fi

  if [[ ! "${status}" =~ ^(on|off)$ ]]; then
    echo 'Invalid TLP status'
    return 2
  fi

  if [[ "${status}" == "on" ]]; then
    echo 'Enabling TLP service...'
    sudo systemctl stop acpid.service &> /dev/null &&
    sudo systemctl disable acpid.service &> /dev/null &&
    sudo systemctl enable tlp.service &> /dev/null &&
    sudo systemctl start tlp.service &> /dev/null &&
    sudo systemctl daemon-reload
  else
    echo 'Disabling TLP service...'
    sudo systemctl stop tlp.service &> /dev/null &&
    sudo systemctl disable tlp.service &> /dev/null &&
    sudo systemctl enable acpid.service &> /dev/null &&
    sudo systemctl start acpid.service &> /dev/null &&
    sudo systemctl daemon-reload
  fi

  if [[ $? -ne 0 ]]; then
    echo "Failed to set TLP to ${status}"
    return 2
  fi

  echo "TLP has been set to ${status}"
}

# Sets the battery charge start/stop threshold to the given
# percentage limit.
# Arguments:
#  action:    start or stop
#  threshold: a percentage value between [0,100]
set_charge () {
  local action="${1}"
  local threshold="${2}"

  if [[ -z "${action}" ]]; then
    local actions=''
    actions+='{"key":"start", "value":"Start"},'
    actions+='{"key":"stop", "value":"Stop"}'
    actions="[${actions}]"

    pick_one 'Which charge action to set:' "${actions}" horizontal || return $?
    action="${REPLY}"
  fi

  if [[ ! "${action}" =~ ^(start|stop)$ ]]; then
    echo 'Invalid charge action'
    return 2
  fi

  if [[ -z "${threshold}" ]]; then
    ask 'Enter the charge threshold [0-100]:' || return $?
    threshold="${REPLY}"
  fi
  
  if [[ ! "${threshold}" =~ ^[0-9]{1,3}$ ]]; then
    echo 'Invalid charge threshold value'
    return 2
  elif [[ ${threshold} -lt 0 ]] || [[ ${threshold} -gt 100 ]]; then
    echo 'Charge threshold is out of range'
    return 2
  fi

  local config_file='/etc/tlp.d/00-main.conf'

  if [[ ! -f "${config_file}" ]]; then
    sudo rm -f /etc/tlp.d/00-template.conf
    sudo touch "${config_file}"
  fi

  local option=''

  if [[ "${action}" == "start" ]]; then
    option='START_CHARGE_THRESH_BAT'
  else
    option='STOP_CHARGE_THRESH_BAT'
  fi

  local index=0
  for index in 0 1; do
    if grep -qE "^${option}${index}=" "${config_file}"; then
      sudo sed -i "s/^\(${option}${index}=\).*/\1${threshold}/" "${config_file}"
    else
      echo "${option}${index}=${threshold}" | sudo tee -a "${config_file}" > /dev/null
    fi
  done

  # Restart TLP only if it is enabled
  local query='.[]|select(.unit == "tlp.service")'

  local tlp_process=''
  tlp_process="$(systemctl -a | jc --systemctl | jq -cr "${query}")" || return 1

  if [[ -n "${tlp_process}" ]]; then
    sudo systemctl restart tlp.service &> /dev/null || return 1
  fi

  echo "Charge ${action} threshold set to ${threshold}%"
}

# Shuts the system power down.
# Arguments:
#  None
shutdown_system () {
  systemctl poweroff

  if [[ $? -ne 0 ]]; then
    echo 'Unable to shutdown the system'
    return 2
  fi
}

# Reboots the system.
# Arguments:
#  None
reboot_system () {
  systemctl reboot

  if [[ $? -ne 0 ]]; then
    echo 'Unable to reboot the system'
    return 2
  fi
}

# Sets system in suspend mode.
# Arguments:
#  None
suspend_system () {
  systemctl suspend

  if [[ $? -ne 0 ]]; then
    echo 'Unable to suspend the system'
    return 2
  fi
}

# Blanks the screen immediately.
# Arguments:
#  None
blank_screen () {
  xset dpms force off

  if [[ $? -ne 0 ]]; then
    echo 'Unable to blank the screen'
    return 2
  fi
}

