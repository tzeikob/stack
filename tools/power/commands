#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/power/helpers

# Shows the current status of the system's power.
# Outputs:
#  A verbose list of text data.
show_status () {
  local query=''
  query+='"Adapter:      \(."on-line"|if . then "on" else "off" end)"'

  find_adapter | jq -cer "${query}" || return 1

  local battery=''
  battery="$(find_battery)" || return 1

  if is_not_empty "${battery}"; then
    local query=''
    query+='Battery:      yes\n'
    query+='State:        \(.state|ascii_downcase)\n'
    query+='Charge:       \(.charge_percent)%'
    query+="\(.design_capacity_mah|if . then \"\nCapacity:     \(.)mAh\" else \"\" end)"
    query="\"${query}\""

    echo "${battery}" | jq -cer "${query}" || return 1
  else
    echo 'Battery:      no'
  fi

  if file_exists '/sys/class/power_supply/BAT0/current_now'; then
    local current_now="$(< /sys/class/power_supply/BAT0/current_now)"
    echo "Current:      ${current_now}mAh"
  fi

  if file_exists '/sys/class/power_supply/BAT0/charge_now'; then
    local charge_now="$(< /sys/class/power_supply/BAT0/charge_now)"
    echo "Load:         ${charge_now}mAh"
  fi

  local query='.[]|select(.unit == "acpid.service")|"ACPID:        \(.active)"'

  local acpid_status=''
  acpid_status="$(systemctl -a | jc --systemctl | jq -cr "${query}")" || return 1

  if is_not_empty "${acpid_status}"; then
    echo "${acpid_status}"
  fi

  local query='.[]|select(.unit == "tlp.service")|"TLP:          \(.active)"'

  local tlp_status=''
  tlp_status="$(systemctl -a | jc --systemctl | jq -cr "${query}")" || return 1

  if is_not_empty "${tlp_status}"; then
    echo "${tlp_status}"
  fi

  local config_file='/etc/tlp.d/00-main.conf'

  local index=0
  for index in 0 1; do
    local start=''
    start="$(grep -E "^START_CHARGE_THRESH_BAT${index}=" "${config_file}" | cut -d '=' -f 2)"
    
    local stop=''
    stop="$(grep -E "^STOP_CHARGE_THRESH_BAT${index}=" "${config_file}" | cut -d '=' -f 2)"
    
    if is_not_empty "${start}" || is_not_empty "${stop}"; then
      echo "Charge[${index}]:    [${start:-0}%, ${stop:-100}%]"
    fi
  done

  if file_exists "${POWER_SETTINGS}"; then
    local query='.screensaver.interval|if . then . else "" end'

    local screensaver=''
    screensaver="$(jq -cr "${query}" "${POWER_SETTINGS}")" || return 1
    
    if is_given "${screensaver}" && is_true "${screensaver} > 0"; then
      echo "Screensaver:  ${screensaver} mins"
    else
      echo 'Screensaver:  off'
    fi
  else
    echo 'Screensaver:  off'
  fi

  loginctl show-session | awk '{
    match($0,/(.*)=(.*)/,a)

    if (a[1] == "Docked") {
      a[1]="Docked"
    } else if (a[1] == "LidClosed") {
      a[1]="Lid Down"
    } else {
      next
    }

    printf  "%-12s  %s\n", a[1]":", a[2]
  }' || return 1

  echo ''

  loginctl show-session | awk '{
    match($0,/(.*)=(.*)/,a)

    if (a[1] == "HandlePowerKey") {
      a[1]="On Power"
    } else if (a[1] == "HandleRebootKey") {
      a[1]="On Reboot"
    } else if (a[1] == "HandleSuspendKey") {
      a[1]="On Suspend"
    } else if (a[1] == "HandleHibernateKey") {
      a[1]="On Hibernate"
    } else if (a[1] == "HandleLidSwitch") {
      a[1]="On Lid Down"
    } else if (a[1] == "HandleLidSwitchDocked") {
      a[1]="On Docked"
    } else if (a[1] == "IdleAction") {
      a[1]="On Idle"
    } else {
      next
    }

    printf  "%-13s  %s\n", a[1]":", a[2]
  }' || return 1
}

# Sets the action of the handler with the given name.
# Arguments:
#  handler: power, reboot, suspend, lid or docked
#  action:  poweroff, reboot, suspend or ignore
set_action () {
  authenticate_user || return $?

  local handler="${1}"
  local action="${2}"

  if is_not_given "${handler}"; then
    on_script_mode &&
      echo 'Missing the power handler' && return 2

    pick_power_handler || return $?
    is_empty "${REPLY}" && echo 'Power handler is required' && return 2
    handler="${REPLY}"
  fi

  if is_not_power_handler "${handler}"; then
    echo 'Invalid power handler'
    return 2
  fi

  if is_not_given "${action}"; then
    on_script_mode &&
      echo 'Missing power action' && return 2

    pick_power_action || return $?
    is_empty "${REPLY}" && echo 'Power action is required' && return 2
    action="${REPLY}"
  fi

  if is_not_power_action "${action}"; then
    echo 'Invalid power action'
    return 2
  fi

  # Resolve the logind config option for the handler
  local option=''
  option="$(convert_handler_to_option "${handler}")" || return 1

  local config_file='/etc/systemd/logind.conf.d/00-main.conf'

  # Copy the default config file if not yet created
  if file_not_exists "${config_file}"; then
    sudo mkdir -p /etc/systemd/logind.conf.d
    sudo cp /etc/systemd/logind.conf "${config_file}"
  fi

  if grep -qE "^${option}=" "${config_file}"; then
    sudo sed -i "s/^\(${option}=\).*/\1${action}/" "${config_file}"
  else
    echo "${option}=${action}" | sudo tee -a "${config_file}" > /dev/null
  fi

  sudo systemctl kill -s HUP systemd-logind

  if has_failed; then
    echo "Failed to set ${handler} action"
    return 2
  fi

  echo "Action ${handler} set to ${action}"
}

# Resets the action of all power handlers.
reset_actions () {
  authenticate_user || return $?

  local config_file='/etc/systemd/logind.conf.d/00-main.conf'

  if file_not_exists "${config_file}"; then
    echo 'Actions already set to defaults'
    return 2
  fi

  sudo sed -i '/^HandlePowerKey=.*/d' "${config_file}"
  sudo sed -i '/^HandleRebootKey=.*/d' "${config_file}"
  sudo sed -i '/^HandleSuspendKey=.*/d' "${config_file}"
  sudo sed -i '/^HandleLidSwitch=.*/d' "${config_file}"
  sudo sed -i '/^HandleLidSwitchDocked=.*/d' "${config_file}"

  sudo systemctl kill -s HUP systemd-logind

  if has_failed; then
    echo 'Failed to reset power actions'
    return 2
  fi

  echo 'Power actions have been reset'
}

# Sets the interval time of the screen saver, where
# 0 means deactivate the screensaver.
# Arguments:
#  interval: the number of minutes or 0
set_screensaver () {
  local interval="${1}"

  if is_not_given "${interval}"; then
    echo 'Missing interval time'
    return 2
  elif is_not_positive_integer "${interval}"; then
    echo 'Invalid interval time'
    return 2
  elif is_interval_out_of_range "${interval}"; then
    echo 'Interval time out of range'
    return 2
  fi

  if is_true "${interval} > 0"; then
    local secs=0
    secs="$(calc "${interval} * 60")" || return 1

    xset s "${secs}" "${secs}" &> /dev/null
  else
    xset s off &> /dev/null
  fi
  
  if has_failed; then
    echo 'Failed to set the screen saver'
    return 2
  fi

  echo "Screen saver set to ${interval} mins"
  
  save_screen_saver_to_settings "${interval}" ||
    echo 'Failed to save screen saver to settings'
}

# Initiates the screen saver to the interval saved
# in the settings file.
init_screensaver () {
  local interval=5

  if file_exists "${POWER_SETTINGS}"; then
    interval="$(jq '.screensaver.interval|if . then . else 5 end' "${POWER_SETTINGS}")"
  fi
 
  if is_true "${interval} > 0"; then
    local secs=0
    secs="$(calc "${interval} * 60")" || return 1

    xset s "${secs}" "${secs}" &> /dev/null
  else
    xset s off &> /dev/null
  fi
  
  if has_failed; then
    echo 'Failed to initialize the screen saver'
    return 2
  fi

  echo "Screen saver initialized to ${interval} mins"
}

# Enables or disables power saving mode via the tlp service.
# Arguments:
#  status: on or off
set_tlp () {
  authenticate_user || return $?

  local status="${1}"

  if is_not_given "${status}"; then
    echo 'Missing the power saving status'
    return 2
  elif is_not_toggle "${status}"; then
    echo 'Invalid power saving status'
    return 2
  fi

  if is_on "${status}" ]]; then
    echo 'Enabling power saving mode...'
    sudo systemctl stop acpid.service &> /dev/null &&
    sudo systemctl disable acpid.service &> /dev/null &&
    sudo systemctl enable tlp.service &> /dev/null &&
    sudo systemctl start tlp.service &> /dev/null &&
    sudo systemctl daemon-reload
  else
    echo 'Disabling power saving mode...'
    sudo systemctl stop tlp.service &> /dev/null &&
    sudo systemctl disable tlp.service &> /dev/null &&
    sudo systemctl enable acpid.service &> /dev/null &&
    sudo systemctl start acpid.service &> /dev/null &&
    sudo systemctl daemon-reload
  fi

  if has_failed; then
    echo "Failed to set power saving mode to ${status}"
    return 2
  fi

  echo "Power saving mode set to ${status}"
}

# Sets the battery charging start/stop thresholds to the given
# percentage limits.
# Arguments:
#  start: the percent of capacity to start charging
#  stop:  the percent of capacity to stop charging
set_charging () {
  authenticate_user || return $?

  local start="${1}"
  local stop="${2}"

  if is_not_given "${start}"; then
    echo 'Missing the charging start threshold'
    return 2
  elif is_not_positive_integer "${start}"; then
    echo 'Invalid charging start threshold'
    return 2
  elif is_charge_limit_out_of_range "${start}"; then
    echo 'Charging start threshold is out of range'
    return 2
  fi

  if is_not_given "${stop}"; then
    echo 'Missing the charging stop threshold'
    return 2
  elif is_not_positive_integer "${stop}"; then
    echo 'Invalid charging stop threshold'
    return 2
  elif is_charge_limit_out_of_range "${stop}"; then
    echo 'Charging stop threshold is out of range'
    return 2
  fi

  if is_true "${start} >= ${stop}"; then
    echo 'Start threshold should be lower than stop'
    return 2
  fi

  local config_file='/etc/tlp.d/00-main.conf'

  if file_not_exists "${config_file}"; then
    sudo rm -f /etc/tlp.d/00-template.conf
    sudo touch "${config_file}"
  fi

  local index=0
  for index in 0 1; do
    if grep -qE "^START_CHARGE_THRESH_BAT${index}=" "${config_file}"; then
      sudo sed -i "s/^\(START_CHARGE_THRESH_BAT${index}=\).*/\1${start}/" "${config_file}"
    else
      echo "START_CHARGE_THRESH_BAT${index}=${start}" | sudo tee -a "${config_file}" > /dev/null
    fi
    
    if grep -qE "^STOP_CHARGE_THRESH_BAT${index}=" "${config_file}"; then
      sudo sed -i "s/^\(STOP_CHARGE_THRESH_BAT${index}=\).*/\1${stop}/" "${config_file}"
    else
      echo "STOP_CHARGE_THRESH_BAT${index}=${stop}" | sudo tee -a "${config_file}" > /dev/null
    fi
  done

  # Restart TLP only if it is enabled
  local query='.[]|select(.unit == "tlp.service")'

  local tlp_process=''
  tlp_process="$(systemctl -a | jc --systemctl | jq -cr "${query}")" || return 1

  if is_not_empty "${tlp_process}"; then
    sudo systemctl restart tlp.service &> /dev/null || return 1
  fi

  echo "Charging set to start at ${start}% and stop at ${stop}%"
}

# Shuts the system power down.
shutdown_system () {
  systemctl poweroff

  if has_failed; then
    echo 'Failed to shutdown the system'
    return 2
  fi
}

# Reboots the system.
reboot_system () {
  systemctl reboot

  if has_failed; then
    echo 'Failed to reboot the system'
    return 2
  fi
}

# Sets system in suspend mode.
suspend_system () {
  systemctl suspend

  if has_failed; then
    echo 'Failed to suspend the system'
    return 2
  fi
}

# Blanks the screen immediately.
blank_screen () {
  xset dpms force off

  if has_failed; then
    echo 'Failed to blank the screen'
    return 2
  fi
}

