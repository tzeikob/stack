#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/power/commands

# Shows the help message.
# Arguments:
#  mode: loop or once
# Outputs:
#  A long help message.
show_help () {
  local mode="${1:-"once"}"

  if equals "${mode}" 'once'; then
    echo 'Usage: power [OPTIONS] COMMAND [OBJECT] [ARGUMENTS]...'
    
    echo -e '\nOPTIONS'
    printf ' %-10s %s\n' \
      '-h' 'Show this help message.' \
      '-q' 'Do not play beep sounds.' \
      '-s' 'Run on script mode.'
  
    echo -e '\nCOMMANDS'
  else
    echo 'Usage: COMMAND [OBJECT] [ARGUMENTS]...'

    echo -e '\nCOMMANDS'
    printf ' %-36s %s\n' \
      'help' 'Show this help message.'
  fi

  printf ' %-36s %s\n' \
    'show status' 'Show the power status of the system.' \
    '' '' \
    'set action <handler> <action>' 'Set the action of a power handler like' \
    '' 'power, reboot, suspend, lid or docked to' \
    '' 'poweroff, reboot, suspend or ignore.' \
    'reset actions' 'Reset to default action for all power handlers.' \
    '' '' \
    'init screensaver' 'Initialize the screen saver.' \
    'set screensaver <mins>' 'Set the interval of the screen saver,' \
    '' 'where 0 means deactivate the screensaver.' \
    '' '' \
    'set tlp on|off' 'Enable or disable power saving mode.' \
    'set charging <start> <stop>' 'Set battery charging start and stop percent thresholds.' \
    '' '' \
    'shutdown' 'Shut the system down.' \
    'reboot' 'Reboot the system.' \
    'suspend' 'Set system in suspend mode.' \
    'blank' 'Blank the screen.'
}

run () {
  local opt=''

  while getopts ':hqs' opt; do
    case "${opt}" in
     'h')
        set_quiet_mode 'on'
        show_help once
        return 0;;
     'q') set_quiet_mode 'on';;
     's') ON_SCRIPT_MODE='true';;
     *)
      echo "Ooops, invalid or unknown option -${OPTARG}!"
      beep 2
      return $?;;
    esac
  done

  shift $((OPTIND-1))

  local mode='once'
  if is_true "$# = 0"; then
    mode='loop'
    clear
  fi

  while true; do
    if equals "${mode}" 'loop'; then
      prompt power
    else
      REPLY="$@"
    fi

    set -f
    set_separator line
    local args=($(xargs -n1 <<< "${REPLY}"))
    restore_separator && set +f
    REPLY=''

    local cmd="${args[0]}"
    local obj="${args[1]}"

    if equals "${mode}" 'loop'; then
      case "${cmd}${obj:+ ${obj}}" in
        'help') clear && show_help loop && continue;;
        'clear') clear && continue;;
        'quit') break;;
        '') continue;;
      esac
    fi

    case "${cmd}${obj:+ ${obj}}" in
      'show status') show_status;;
      'set action') set_action "${args[2]}" "${args[3]}";;
      'set screensaver') set_screensaver "${args[2]}";;
      'set tlp') set_tlp "${args[2]}";;
      'set charging') set_charging "${args[2]}" "${args[3]}";;
      'reset actions') reset_actions;;
      'init screensaver') init_screensaver;;
      'shutdown') shutdown_system;;
      'reboot') reboot_system;;
      'suspend') suspend_system;;
      'blank') blank_screen;;
      *)
        echo 'Ooops, invalid or unknown command!'
        $(return 2);;
    esac

    # Save exit status code of the last executed cmd
    local exit_code=$?
  
    if is_true "${exit_code} = 1"; then
      echo 'Ooops, an unknwon error occurred!'
    fi

    on_loud_mode && beep "${exit_code}"

    if equals "${mode}" 'once'; then
      return ${exit_code}
    fi
  done

  clear
}

run "$@"

