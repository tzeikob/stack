#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/security/helpers

# Shows the current status of the system's security.
# Outputs:
#  A verbose list of text data.
show_status () {
  passwd -S | awk '{
    status="protected"
    if ($2 == "L") {
      status="locked"
    } else if ($2 == "NP") {
      status="no password"
    }

    print "Password:         "status
    print "Last Changed:     "$3
  }' || return 1

  cat /etc/security/faillock.conf | awk '{
    if ($0 ~ /^deny =.*/) {
      print "Failed Attempts:  "$3
    } else if ($0 ~ /^unlock_time =.*/) {
      print "Unblock Time:     "$3" secs"
    } else if ($0 ~ /^fail_interval =.*/) {
      print "Fail Interval:    "$3" secs"
    }
  }' || return 1

  local locker_process=''
  locker_process="$(ps ax -o 'command' | jc --ps |
    jq '.[]|select(.command|test("^xautolock"))|.command')" || return 1
  
  if [[ -n "${locker_process}" ]]; then
    echo "${locker_process}" | awk '{
      match($0,/.* -time (.*) -corners.*/,a)
        print "Screen Locker:    "a[1]" mins"
    }'
  else
    echo 'Screen Locker:    off'
  fi
}

# Sets the screen locker given the interval
# time in mins, where 0 means deactivate the
# locker.
# Arguments:
#  interval: the interval time in mins [0,60]
set_screen_locker () {
  local interval="${1}"

  if [[ -z "${interval}" ]]; then
    echo 'Missing interval time'
    return 2
  elif [[ ! "${interval}" =~ ^[0-9]{,2}$ ]]; then
    echo 'Invalid interval time'
    return 2
  elif [[ ${interval} -lt 0 ]] || [[ ${interval} -gt 60 ]]; then
    echo 'Interval time out of range [0,60]'
    return 2
  fi

  # Kill possibly running locker instances
  kill_screen_locker || return 1

  if [[ ${interval} -gt 0 ]]; then
    xautolock -locker 'security -q lock screen' \
      -nowlocker 'security -q lock screen' -time "${interval}" \
      -corners 0-00 -detectsleep &> /dev/null &
    
    if [[ $? -ne 0 ]]; then
      echo 'Failed to set screen locker'
      return 2
    fi
  
    echo "Screen locker set to ${interval} mins"
  else
    echo "Screen locker has been disabled"
  fi
  
  # Save screen locker interval into settings
  save_screen_locker "${interval}"
}

# Initializes the screen locker from
# the settings stored in settings file.
init_screen_locker () {
  local interval=8

  if [[ -f "${SETTINGS_FILE}" ]]; then
    interval="$(jq '.screen_locker.interval|if . then . else 8 end' "${SETTINGS_FILE}")"
  fi

  # Kill possibly running locker instances
  kill_screen_locker || return 1

  if [[ ${interval} -gt 0 ]]; then
    xautolock -locker 'security -q lock screen' \
      -nowlocker 'security -q lock screen' \
      -time "${interval}" \
      -corners 0-00 -detectsleep &> /dev/null &
    
    if [[ $? -ne 0 ]]; then
      echo 'Failed to initialize the screen locker'
      return 2
    fi
    
    echo "Screen locker initialized to ${interval} mins"
  else
    echo "Screen locker has been disabled"
  fi
}

# Locks the screen making sure notifications stream is muted
# before lock and resets it back to it's previous state
# after user unlocks the screen.
lock_screen () {
  local is_locked="$(is_screen_locked)" || return 1
  
  if [[ "${is_locked}" == "true" ]]; then
    echo 'Screen locker is already running'
    return 2
  fi

  local is_paused=''
  is_paused="$(notifications -q get state | jq -cr '.is_paused')"

  if [[ "${is_paused}" == "false" ]]; then
    notifications -q mute all
  fi

  env XSECURELOCK_FONT='PixelMix' \
    XSECURELOCK_SAVER='saver_clock' \
    XSECURELOCK_NO_COMPOSITE=1 \
    XSECURELOCK_BLANK_TIMEOUT=-1 \
    xsecurelock >/dev/null 2>&1

  if [[ $? -ne 0 ]]; then
    echo 'Unable to lock the screen'
    return 2
  fi

  # Reset notifications stream to previous state
  if [[ "${is_paused}" == "false" ]]; then
    notifications -q unmute all
  fi
}

# Changes the password of the current user.
set_user_password () {
  ask_secret 'Enter current password:'
  local password="${REPLY}"

  if ! authenticate_user "${password}"; then
    echo 'Sorry incorrect password!'
    return 2
  fi

  ask_secret 'Enter new password:'
  local new_password="${REPLY}"

  if ! confirm_secret 'Retype new password:' "${new_password}"; then
    echo 'New password does not match!'
    return 2
  fi

  echo -e "${password}\n${new_password}\n${new_password}" |
    passwd --quiet >/dev/null 2>&1

  if [[ $? -ne 0 ]]; then
    echo 'Failed to set user password'
    return 2
  fi

  echo 'User password has been set'
}

# Logs the user out, terminating the current xorg session.
logout_user () {
  bspc quit

  if [[ $? -ne 0 ]]; then
    echo 'Failed to logout the user'
    return 2
  fi
}

# Sets the max number of failed attempts before
# the user's password gets blocked.
# Arguments:
#  attempts: the max number of failed password attempts
set_faillock_attempts () {
  local attempts="${1}"

  if [[ -z "${attempts}" ]]; then
    echo 'Missing attempts number'
    return 2
  elif [[ ! "${attempts}" =~ ^[1-9][0-9]*$ ]]; then
    echo 'Invalid attempts number'
    return 2
  elif [[ ! ${attempts} -gt 0 ]]; then
    echo 'Attempts number should be greater than 0'
    return 2
  fi

  sudo -k sed -ri "s;deny =.*;deny = ${attempts};" /etc/security/faillock.conf

  if [[ $? -ne 0 ]]; then
    echo 'Failed to set max failed attempts'
    return 2
  fi

  echo "Failed attempts set to ${attempts}"
}

# Sets the time a blocked password should be unblocked.
# Arguments:
#  time: the time in secs to unblock the password
set_faillock_unblock () {
  local time="${1}"
  
  if [[ -z "${time}" ]]; then
    echo 'Missing unblock time'
    return 2
  elif [[ ! "${time}" =~ ^[1-9][0-9]*$ ]]; then
    echo 'Invalid unblock time'
    return 2
  elif [[ ! ${time} -gt 0 ]]; then
    echo 'Unblock time should be greater than 0'
    return 2
  fi

  sudo -k sed -ri "s;unlock_time =.*;unlock_time = ${time};" /etc/security/faillock.conf

  if [[ $? -ne 0 ]]; then
    echo 'Failed to set unblock time'
    return 2
  fi

  echo "Unblock time set to ${time} secs"
}

# Sets the interval in which a failed password attempt
# should be counted as consecutive attempt to trigger
# a password block.
# Arguments:
#  time: the time in secs between consecutive fails
set_faillock_interval () {
  local time="${1}"

  if [[ -z "${time}" ]]; then
    echo 'Missing interval time'
    return 2
  elif [[ ! "${time}" =~ ^[1-9][0-9]*$ ]]; then
    echo 'Invalid interval time'
    return 2
  elif [[ ! ${time} -gt 0 ]]; then
    echo 'Interval time should be greater than 0'
    return 2
  fi

  sudo -k sed -ri "s;fail_interval =.*;fail_interval = ${time};" /etc/security/faillock.conf

  if [[ $? -ne 0 ]]; then
    echo 'Failed to set fail interval'
    return 2
  fi

  echo "Fail interval set to ${time} secs"
}

