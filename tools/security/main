#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/security/commands

# Shows the help message.
# Arguments:
#  mode: loop or once
# Outputs:
#  A long help message.
show_help () {
  local mode="${1:-"once"}"

  if [[ "${mode}" == "once" ]]; then
    echo 'Usage: security [OPTIONS] COMMAND [OBJECT] [ARGUMENTS]...'
    
    echo -e '\nOPTIONS'
    printf ' %-10s %s\n' \
      '-h' 'Show this help message.' \
      '-q' 'Stay quiet and do not play beep sounds.'
  
    echo -e '\nCOMMANDS'
  else
    echo 'Usage: COMMAND [OBJECT] [ARGUMENTS]...'

    echo -e '\nCOMMANDS'
    printf ' %-28s %s\n' \
      'help' 'Show this help message.'
  fi

  printf ' %-28s %s\n' \
    'show status' 'Show the status of the system security.' \
    '' '' \
    'set password' 'Set a new user password.' \
    'set attempts <max>' 'Set max failed attempts before password is blocked.' \
    'set unblock <time>' 'Set password unblock time in secs.' \
    'set interval <time>' 'Set consecutive password fails interval in secs.' \
    '' '' \
    'set locker <mins>' 'Set the interval of the screen locker,' \
    '' 'where 0 means deactivate the locker.' \
    'init locker' 'Initialize the screen locker.' \
    '' '' \
    'lock screen' 'Lock the screen.' \
    'logout user' 'Logout the user.'
}

run () {
  local opt=''

  while getopts 'hq' opt; do
    case "${opt}" in
     'h')
        show_help once
        return 0;;
     'q') QUIET='true';;
     *)
      echo 'Ooops, invalid or unknown option'
      $(exit 2) || beep
      return $?;;
    esac
  done

  shift $((OPTIND-1))

  local mode='once'
  if [[ $# -eq 0 ]]; then
    mode='loop'
    clear
  fi

  while true; do
    if [[ "${mode}" == "loop" ]]; then
      prompt security
    else
      REPLY="$@"
    fi

    set -f
    set_separator line
    local args=($(xargs -n1 <<< "${REPLY}"))
    restore_separator && set +f
    REPLY=''

    local cmd="${args[0]}"
    local obj="${args[1]}"

    if [[ "${mode}" == "loop" ]]; then
      case "${cmd}${obj:+ ${obj}}" in
        'help') clear && show_help loop && continue;;
        'clear') clear && continue;;
        'quit') break;;
        '') continue;;
      esac
    fi

    case "${cmd}${obj:+ ${obj}}" in
      'show status') show_status;;
      'set locker') set_screen_locker "${args[2]}" && beep;;
      'set password') set_user_password && beep;;
      'set attempts') set_faillock_attempts "${args[2]}" && beep;;
      'set unblock') set_faillock_unblock "${args[2]}" && beep;;
      'set interval') set_faillock_interval "${args[2]}" && beep;;
      'init locker') init_screen_locker && beep;;
      'lock screen') lock_screen;;
      'logout user') logout_user;;
      *)
        echo 'Ooops, invalid or unknown command!'
        $(return 2);;
    esac || beep

    local exit_code=$?
    if [[ "${mode}" == "once" ]]; then
      return ${exit_code}
    fi
  done

  clear
}

run "$@"

