#!/bin/bash

set -o pipefail

source /opt/stack/utils
source /opt/stack/security/commands

# Shows the help message.
# Arguments:
#  mode: once or none
# Outputs:
#  A long help message.
show_help () {
  if [[ "${1}" == "once" ]]; then
    echo "Usage: security COMMAND [OBJECT] [ARGUMENTS]..."

    echo -e "\nCOMMANDS"
    printf " %-16s %s\n" \
      "help" "Show this help message." \
      "" "" \
      "init locker" "Initialize the screen locker." \
      "" "" \
      "lock screen" "Lock the screen." \
      "logout user" "Logout the user."

    return 0
  fi

  echo "Usage: COMMAND [OBJECT] [ARGUMENTS]..."

  echo -e "\nCOMMANDS"
  printf " %-25s %s\n" \
    "help" "Show this help message." \
    "" "" \
    "show status" "Show the status of the system security." \
    "" "" \
    "set password" "Set a new user password." \
    "set attempts <max>" "Set max failed attempts before password is blocked." \
    "set unblock <time>" "Set password unblock time in secs." \
    "set interval <time>" "Set consecutive password fails interval in secs." \
    "" "" \
    "set locker <mins>" "Set the interval of the screen locker," \
    "" "where 0 means deactivate the locker."
}

loop () {
  clear

  while true; do
    prompt "security" && history -s "${REPLY}"

    set -f
    set_separator "line"
    local cmd=($(xargs -n1 <<< "${REPLY}"))
    restore_separator && set +f

    if [[ "${cmd[0]}" == "help" ]]; then
      show_help
      continue
    elif [[ "${cmd[0]}" == "clear" ]]; then
      clear
      continue
    elif [[ "${cmd[0]}" == "quit" ]]; then
      break
    elif [[ -z "${cmd[0]}" ]]; then
      continue
    fi

    case "${cmd[0]}" in
      "show")
        case "${cmd[1]}" in
          "status") show_status;;
          *) echo "Invalid or unknown command";;
        esac;;
      "set")
        case "${cmd[1]}" in
          "locker") set_screen_locker "${cmd[2]}";;
          "password") set_user_password;;
          "attempts") set_faillock_attempts "${cmd[2]}";;
          "unblock") set_faillock_unblock "${cmd[2]}";;
          "interval") set_faillock_interval "${cmd[2]}";;
          *) echo "Invalid or unknown command";;
        esac;;
      *) echo "Invalid or unknown command";; 
    esac
    
    if [[ $? -eq 1 ]]; then
      echo "An unknown error has occurred"
    fi
  done

  clear
}

once () {
  case "${1}" in
    "help") show_help "once";;
    "init")
      case "${2}" in
        "locker") init_screen_locker || abort;;
        *) abort "Invalid or unknown command";;
      esac;;
    "lock")
      case "${2}" in
        "screen") lock_screen;;
        *) abort "Invalid or unknown command";;
      esac;;
    "logout")
      case "${2}" in
        "user") logout_user;;
        *) abort "Invalid or unknown command";;
      esac;;
    *) abort "Invalid or unknown command";;
  esac

  if [[ $? -ne 0 ]]; then
    abort
  fi
}

if [[ $# -eq 0 ]]; then
  loop
else
  once "$@"
fi

